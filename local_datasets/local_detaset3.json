[
  {
    "id": 401,
    "input": "Write a program that uses a macro to find the square of a number.",
    "output": "#include <stdio.h>\n\n#define SQUARE(x) ((x) * (x))\n\nint main() {\n    int num = 5;\n    printf(\"The square of %d is: %d\\n\", num, SQUARE(num));\n    return 0;\n}",
    "description": "This program uses a macro to calculate the square of a number."
  },
  {
    "id": 402,
    "input": "Write a program that defines a constant using #define and prints its value.",
    "output": "#include <stdio.h>\n\n#define PI 3.14159\n\nint main() {\n    printf(\"The value of PI is: %f\\n\", PI);\n    return 0;\n}",
    "description": "This program defines a constant using #define and prints its value."
  },
  {
    "id": 403,
    "input": "Write a program that uses conditional compilation to print different messages.",
    "output": "#include <stdio.h>\n\n#define DEBUG 1\n\nint main() {\n    #ifdef DEBUG\n        printf(\"Debug mode is enabled.\\n\");\n    #else\n        printf(\"Debug mode is disabled.\\n\");\n    #endif\n    return 0;\n}",
    "description": "This program uses conditional compilation to print different messages based on a macro."
  },
  {
    "id": 404,
    "input": "Write a program that uses #include to include a custom header file.",
    "output": "#include <stdio.h>\n#include \"custom.h\"\n\nint main() {\n    printf(\"Message from custom header: %s\\n\", MESSAGE);\n    return 0;\n}",
    "description": "This program demonstrates the use of #include to include a custom header file."
  },
  {
    "id": 405,
    "input": "Write a program that uses a macro to swap two numbers.",
    "output": "#include <stdio.h>\n\n#define SWAP(a, b) { int temp = a; a = b; b = temp; }\n\nint main() {\n    int x = 10, y = 20;\n    printf(\"Before swap: x = %d, y = %d\\n\", x, y);\n    SWAP(x, y);\n    printf(\"After swap: x = %d, y = %d\\n\", x, y);\n    return 0;\n}",
    "description": "This program uses a macro to swap two numbers."
  },
  {
    "id": 406,
    "input": "Write a program that uses #ifdef and #undef to toggle a feature.",
    "output": "#include <stdio.h>\n\n#define FEATURE_ENABLED\n\nint main() {\n    #ifdef FEATURE_ENABLED\n        printf(\"Feature is enabled.\\n\");\n        #undef FEATURE_ENABLED\n    #endif\n\n    #ifdef FEATURE_ENABLED\n        printf(\"Feature is still enabled.\\n\");\n    #else\n        printf(\"Feature is now disabled.\\n\");\n    #endif\n\n    return 0;\n}",
    "description": "This program uses #ifdef and #undef to toggle a feature at compile time."
  },
  {
    "id": 407,
    "input": "Write a program that uses #pragma to suppress a warning.",
    "output": "#include <stdio.h>\n\n#pragma GCC diagnostic ignored \"-Wunused-variable\"\n\nint main() {\n    int unusedVar;\n    printf(\"Warning for unused variable is suppressed.\\n\");\n    return 0;\n}",
    "description": "This program uses #pragma to suppress a specific compiler warning."
  },
  {
    "id": 408,
    "input": "Write a program that demonstrates the use of #error for invalid conditions.",
    "output": "#include <stdio.h>\n\n#ifndef REQUIRED_MACRO\n    #error \"REQUIRED_MACRO is not defined. Define it before compiling.\"\n#endif\n\nint main() {\n    printf(\"Program compiled successfully.\\n\");\n    return 0;\n}",
    "description": "This program demonstrates the use of #error to halt compilation if a required macro is not defined."
  },
  {
    "id": 409,
    "input": "Write a program that uses #line to change the line number reported by the compiler.",
    "output": "#include <stdio.h>\n\n#line 100 \"custom_file.c\"\n\nint main() {\n    printf(\"This line is reported as line 100 in custom_file.c.\\n\");\n    return 0;\n}",
    "description": "This program uses #line to change the line number and file name reported by the compiler."
  },
  {
    "id": 410,
    "input": "Write a program that demonstrates the use of token pasting operator in macros.",
    "output": "#include <stdio.h>\n\n#define CONCAT(a, b) a##b\n\nint main() {\n    int xy = 100;\n    printf(\"Value of xy is: %d\\n\", CONCAT(x, y));\n    return 0;\n}",
    "description": "This program demonstrates the use of the token pasting operator (##) in macros."
  },
  {
    "id": 411,
    "input": "Write a program that conditionally includes headers based on a macro.",
    "output": "#include <stdio.h>\n\n#define USE_CUSTOM_HEADER\n\n#ifdef USE_CUSTOM_HEADER\n    #include \"custom_header.h\"\n#else\n    #include <stdlib.h>\n#endif\n\nint main() {\n    #ifdef USE_CUSTOM_HEADER\n        printf(\"Custom header included.\\n\");\n    #else\n        printf(\"Standard header included.\\n\");\n    #endif\n    return 0;\n}",
    "description": "This program conditionally includes headers based on whether a macro is defined."
  },
  {
    "id": 412,
    "input": "Write a program that uses recursive macros.",
    "output": "#include <stdio.h>\n\n#define MULTIPLY(x, y) ((x) * (y))\n#define SQUARE(x) MULTIPLY(x, x)\n\nint main() {\n    int num = 4;\n    printf(\"Square of %d is: %d\\n\", num, SQUARE(num));\n    return 0;\n}",
    "description": "This program demonstrates recursive macros by using one macro within another."
  },
  {
    "id": 413,
    "input": "Write a program that demonstrates the use of predefined macros like __FILE__ and __LINE__.",
    "output": "#include <stdio.h>\n\nint main() {\n    printf(\"This code is in file: %s\\n\", __FILE__);\n    printf(\"This code is at line: %d\\n\", __LINE__);\n    return 0;\n}",
    "description": "This program uses predefined macros to display the current file name and line number."
  },
  {
    "id": 414,
    "input": "Write a program that uses variadic macros to print a formatted message.",
    "output": "#include <stdio.h>\n\n#define LOG(fmt, ...) printf(\"LOG: \" fmt \"\\n\", __VA_ARGS__)\n\nint main() {\n    LOG(\"Value of x: %d\", 42);\n    LOG(\"Hello, %s!\", \"world\");\n    return 0;\n}",
    "description": "This program uses a variadic macro to print formatted log messages."
  },
  {
    "id": 415,
    "input": "Write a program that changes the behavior of a macro using #undef and redefines.",
    "output": "#include <stdio.h>\n\n#define GREETING \"Hello, World!\"\n\nint main() {\n    printf(\"%s\\n\", GREETING);\n    #undef GREETING\n    #define GREETING \"Goodbye, World!\"\n    printf(\"%s\\n\", GREETING);\n    return 0;\n}",
    "description": "This program redefines a macro using #undef to change its behavior."
  },
  {
    "id": 416,
    "input": "Write a program that includes a header file multiple times but uses include guards.",
    "output": "#include <stdio.h>\n#include \"my_header.h\"\n#include \"my_header.h\" // This will not cause multiple inclusion.\n\nint main() {\n    printf(\"Include guards prevent multiple inclusions.\\n\");\n    return 0;\n}",
    "description": "This program demonstrates the use of include guards to prevent multiple inclusions of the same header file."
  },
  {
    "id": 417,
    "input": "Write a program that uses #pragma once as an alternative to include guards.",
    "output": "#include <stdio.h>\n#include \"my_header_once.h\"\n#include \"my_header_once.h\" // This will not cause multiple inclusion.\n\nint main() {\n    printf(\"#pragma once prevents multiple inclusions.\\n\");\n    return 0;\n}",
    "description": "This program uses #pragma once as an alternative to traditional include guards."
  },
  {
    "id": 418,
    "input": "Write a program that uses the stringify operator in macros.",
    "output": "#include <stdio.h>\n\n#define STRINGIFY(x) #x\n\nint main() {\n    printf(\"The macro value is: %s\\n\", STRINGIFY(Hello, World!));\n    return 0;\n}",
    "description": "This program uses the stringify operator (#) to convert macro arguments to strings."
  },
  {
    "id": 419,
    "input": "Write a program that uses nested conditional compilation.",
    "output": "#include <stdio.h>\n\n#define PLATFORM_WINDOWS\n\nint main() {\n    #ifdef PLATFORM_WINDOWS\n        #ifdef DEBUG\n            printf(\"Windows debug mode.\\n\");\n        #else\n            printf(\"Windows release mode.\\n\");\n        #endif\n    #else\n        printf(\"Non-Windows platform.\\n\");\n    #endif\n    return 0;\n}",
    "description": "This program demonstrates nested conditional compilation using multiple #ifdef directives."
  },
  {
    "id": 420,
    "input": "Write a program that uses macros to create a simple min function.",
    "output": "#include <stdio.h>\n\n#define MIN(a, b) ((a) < (b) ? (a) : (b))\n\nint main() {\n    int x = 10, y = 20;\n    printf(\"The minimum value is: %d\\n\", MIN(x, y));\n    return 0;\n}",
    "description": "This program defines a macro to calculate the minimum of two numbers."
  },
  {
    "id": 421,
    "input": "Write a program that handles division by zero.",
    "output": "#include <stdio.h>\n\nint main() {\n    int a, b;\n    printf(\"Enter two integers (dividend and divisor): \");\n    scanf(\"%d %d\", &a, &b);\n    if (b == 0) {\n        printf(\"Error: Division by zero is not allowed.\\n\");\n    } else {\n        printf(\"Result: %d\\n\", a / b);\n    }\n    return 0;\n}",
    "description": "This program checks for division by zero and prevents the error."
  },
  {
    "id": 422,
    "input": "Write a program that handles a file not found error.",
    "output": "#include <stdio.h>\n\nint main() {\n    FILE *file = fopen(\"nonexistent.txt\", \"r\");\n    if (file == NULL) {\n        printf(\"Error: File not found.\\n\");\n        return 1;\n    }\n    fclose(file);\n    return 0;\n}",
    "description": "This program handles the case where a file does not exist."
  },
  {
    "id": 423,
    "input": "Write a program that checks for invalid input in scanf.",
    "output": "#include <stdio.h>\n\nint main() {\n    int num;\n    printf(\"Enter an integer: \");\n    if (scanf(\"%d\", &num) != 1) {\n        printf(\"Error: Invalid input.\\n\");\n        return 1;\n    }\n    printf(\"You entered: %d\\n\", num);\n    return 0;\n}",
    "description": "This program validates user input and checks for invalid data types."
  },
  {
    "id": 424,
    "input": "Write a program that handles memory allocation failure.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int *ptr = (int *)malloc(1000000000 * sizeof(int));\n    if (ptr == NULL) {\n        printf(\"Error: Memory allocation failed.\\n\");\n        return 1;\n    }\n    printf(\"Memory allocated successfully.\\n\");\n    free(ptr);\n    return 0;\n}",
    "description": "This program checks if memory allocation was successful."
  },
  {
    "id": 425,
    "input": "Write a program that handles array index out of bounds error.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int index;\n    printf(\"Enter an index (0-4): \");\n    scanf(\"%d\", &index);\n    if (index < 0 || index >= 5) {\n        printf(\"Error: Index out of bounds.\\n\");\n    } else {\n        printf(\"Value at index %d: %d\\n\", index, arr[index]);\n    }\n    return 0;\n}",
    "description": "This program prevents accessing an array out of bounds."
  },
  {
    "id": 426,
    "input": "Write a program that handles null pointer dereferencing.",
    "output": "#include <stdio.h>\n\nint main() {\n    int *ptr = NULL;\n    if (ptr == NULL) {\n        printf(\"Error: Null pointer dereference.\\n\");\n        return 1;\n    }\n    *ptr = 10;\n    printf(\"Value: %d\\n\", *ptr);\n    return 0;\n}",
    "description": "This program checks for null pointers before dereferencing them."
  },
  {
    "id": 427,
    "input": "Write a program that checks for overflow in integer addition.",
    "output": "#include <stdio.h>\n#include <limits.h>\n\nint main() {\n    int a, b;\n    printf(\"Enter two integers: \");\n    scanf(\"%d %d\", &a, &b);\n    if (a > 0 && b > INT_MAX - a) {\n        printf(\"Error: Integer overflow detected.\\n\");\n    } else {\n        printf(\"Result: %d\\n\", a + b);\n    }\n    return 0;\n}",
    "description": "This program detects overflow in integer addition."
  },
  {
    "id": 428,
    "input": "Write a program that handles invalid command line arguments.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        printf(\"Error: Invalid number of arguments. Usage: ./program <number>\\n\");\n        return 1;\n    }\n    int num = atoi(argv[1]);\n    printf(\"You entered: %d\\n\", num);\n    return 0;\n}",
    "description": "This program checks the number of command line arguments and validates input."
  },
  {
    "id": 429,
    "input": "Write a program that checks for errors while writing to a file.",
    "output": "#include <stdio.h>\n\nint main() {\n    FILE *file = fopen(\"output.txt\", \"w\");\n    if (file == NULL) {\n        printf(\"Error: Unable to open file for writing.\\n\");\n        return 1;\n    }\n    if (fprintf(file, \"Hello, World!\\n\") < 0) {\n        printf(\"Error: Failed to write to file.\\n\");\n        fclose(file);\n        return 1;\n    }\n    fclose(file);\n    printf(\"File written successfully.\\n\");\n    return 0;\n}",
    "description": "This program checks for errors while writing to a file."
  },
  {
    "id": 430,
    "input": "Write a program that handles division by zero using floating-point numbers.",
    "output": "#include <stdio.h>\n#include <math.h>\n\nint main() {\n    double a, b;\n    printf(\"Enter two numbers (dividend and divisor): \");\n    scanf(\"%lf %lf\", &a, &b);\n    if (fabs(b) < 1e-7) {\n        printf(\"Error: Division by zero is not allowed.\\n\");\n    } else {\n        printf(\"Result: %.2f\\n\", a / b);\n    }\n    return 0;\n}",
    "description": "This program handles division by zero for floating-point numbers."
  },
  {
    "id": 431,
    "input": "Write a program that retries file opening if it fails initially.",
    "output": "#include <stdio.h>\n#include <unistd.h>\n\nint main() {\n    FILE *file;\n    int attempts = 0;\n    while ((file = fopen(\"file.txt\", \"r\")) == NULL && attempts < 3) {\n        printf(\"Error opening file. Retrying...\\n\");\n        attempts++;\n        sleep(1);\n    }\n    if (file == NULL) {\n        printf(\"Failed to open file after 3 attempts.\\n\");\n        return 1;\n    }\n    printf(\"File opened successfully.\\n\");\n    fclose(file);\n    return 0;\n}",
    "description": "This program retries opening a file up to three times before giving up."
  },
  {
    "id": 432,
    "input": "Write a program that validates a configuration file's format.",
    "output": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    FILE *file = fopen(\"config.cfg\", \"r\");\n    char line[256];\n    int valid = 1;\n\n    if (file == NULL) {\n        printf(\"Error: Configuration file not found.\\n\");\n        return 1;\n    }\n\n    while (fgets(line, sizeof(line), file)) {\n        if (strchr(line, '=') == NULL) {\n            printf(\"Error: Invalid format in line: %s\\n\", line);\n            valid = 0;\n            break;\n        }\n    }\n    fclose(file);\n\n    if (valid) {\n        printf(\"Configuration file is valid.\\n\");\n    } else {\n        printf(\"Configuration file is invalid.\\n\");\n    }\n    return valid ? 0 : 1;\n}",
    "description": "This program checks if a configuration file has a valid key=value format."
  },
  {
    "id": 433,
    "input": "Write a program that handles integer underflow and overflow in subtraction.",
    "output": "#include <stdio.h>\n#include <limits.h>\n\nint main() {\n    int a, b;\n    printf(\"Enter two integers (a and b): \");\n    scanf(\"%d %d\", &a, &b);\n\n    if ((b > 0 && a < INT_MIN + b) || (b < 0 && a > INT_MAX + b)) {\n        printf(\"Error: Integer overflow or underflow in subtraction.\\n\");\n    } else {\n        printf(\"Result: %d\\n\", a - b);\n    }\n\n    return 0;\n}",
    "description": "This program ensures that integer subtraction does not result in overflow or underflow."
  },
  {
    "id": 434,
    "input": "Write a program that handles errors while dynamically resizing an array.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int *arr = malloc(5 * sizeof(int));\n    if (arr == NULL) {\n        printf(\"Error: Initial memory allocation failed.\\n\");\n        return 1;\n    }\n\n    for (int i = 0; i < 5; i++) {\n        arr[i] = i + 1;\n    }\n\n    int *temp = realloc(arr, 10 * sizeof(int));\n    if (temp == NULL) {\n        printf(\"Error: Memory reallocation failed.\\n\");\n        free(arr);\n        return 1;\n    }\n    arr = temp;\n\n    for (int i = 5; i < 10; i++) {\n        arr[i] = i + 1;\n    }\n\n    printf(\"Array resized successfully.\\n\");\n    free(arr);\n    return 0;\n}",
    "description": "This program handles errors that occur during dynamic memory reallocation."
  },
  {
    "id": 435,
    "input": "Write a program that gracefully handles invalid user commands.",
    "output": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char command[50];\n    printf(\"Enter a command (start/stop/status): \");\n    scanf(\"%s\", command);\n\n    if (strcmp(command, \"start\") == 0) {\n        printf(\"System started.\\n\");\n    } else if (strcmp(command, \"stop\") == 0) {\n        printf(\"System stopped.\\n\");\n    } else if (strcmp(command, \"status\") == 0) {\n        printf(\"System is running.\\n\");\n    } else {\n        printf(\"Error: Invalid command '%s'.\\n\", command);\n    }\n\n    return 0;\n}",
    "description": "This program validates user input commands and handles invalid entries gracefully."
  },
  {
    "id": 436,
    "input": "Write a program that calculates the square root of a number using the math library.",
    "output": "#include <stdio.h>\n#include <math.h>\n\nint main() {\n    double number, result;\n    printf(\"Enter a number: \");\n    scanf(\"%lf\", &number);\n\n    if (number < 0) {\n        printf(\"Error: Cannot calculate the square root of a negative number.\\n\");\n    } else {\n        result = sqrt(number);\n        printf(\"The square root of %.2f is %.2f\\n\", number, result);\n    }\n\n    return 0;\n}",
    "description": "This program calculates the square root of a given number using the `sqrt` function from the math library."
  },
  {
    "id": 437,
    "input": "Write a program that calculates the length of a string using the string library.",
    "output": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str[100];\n    printf(\"Enter a string: \");\n    scanf(\"%s\", str);\n\n    printf(\"The length of the string is: %lu\\n\", strlen(str));\n\n    return 0;\n}",
    "description": "This program calculates the length of a string using the `strlen` function from the string library."
  },
  {
    "id": 438,
    "input": "Write a program that converts a string to uppercase using the ctype library.",
    "output": "#include <stdio.h>\n#include <ctype.h>\n\nint main() {\n    char str[100];\n    printf(\"Enter a string: \");\n    scanf(\"%s\", str);\n\n    for (int i = 0; str[i] != '\\0'; i++) {\n        str[i] = toupper(str[i]);\n    }\n\n    printf(\"The uppercase string is: %s\\n\", str);\n\n    return 0;\n}",
    "description": "This program converts a string to uppercase using the `toupper` function from the ctype library."
  },
  {
    "id": 439,
    "input": "Write a program that generates a random number using the stdlib library.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    srand(time(0));\n    int random_number = rand();\n    printf(\"The random number is: %d\\n\", random_number);\n\n    return 0;\n}",
    "description": "This program generates a random number using the `rand` function and seeds it with the current time using `srand`."
  },
  {
    "id": 440,
    "input": "Write a program that sorts an array of integers using the qsort function.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint compare(const void *a, const void *b) {\n    return (*(int *)a - *(int *)b);\n}\n\nint main() {\n    int arr[] = {5, 3, 8, 6, 2};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    qsort(arr, n, sizeof(int), compare);\n\n    printf(\"Sorted array: \");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}",
    "description": "This program sorts an array of integers using the `qsort` function from the stdlib library."
  },
  {
    "id": 441,
    "input": "Write a program that reads and writes to a file using the standard I/O library.",
    "output": "#include <stdio.h>\n\nint main() {\n    FILE *file = fopen(\"data.txt\", \"w\");\n    if (file == NULL) {\n        printf(\"Error opening file for writing.\\n\");\n        return 1;\n    }\n    fprintf(file, \"Hello, file!\\n\");\n    fclose(file);\n\n    file = fopen(\"data.txt\", \"r\");\n    if (file == NULL) {\n        printf(\"Error opening file for reading.\\n\");\n        return 1;\n    }\n    char buffer[100];\n    while (fgets(buffer, sizeof(buffer), file)) {\n        printf(\"Read: %s\", buffer);\n    }\n    fclose(file);\n\n    return 0;\n}",
    "description": "This program demonstrates basic file operations like writing and reading using the standard I/O library."
  },
  {
    "id": 442,
    "input": "Write a program that finds the minimum and maximum values in an array using the math library.",
    "output": "#include <stdio.h>\n#include <math.h>\n\nint main() {\n    int arr[] = {12, 45, 23, 8, 56};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int min = arr[0], max = arr[0];\n\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n\n    printf(\"Minimum value: %d\\n\", min);\n    printf(\"Maximum value: %d\\n\", max);\n\n    return 0;\n}",
    "description": "This program calculates the minimum and maximum values in an array using standard logic."
  },
  {
    "id": 443,
    "input": "Write a program that calculates the power of a number using the math library.",
    "output": "#include <stdio.h>\n#include <math.h>\n\nint main() {\n    double base, exponent, result;\n    printf(\"Enter the base and exponent: \");\n    scanf(\"%lf %lf\", &base, &exponent);\n\n    result = pow(base, exponent);\n    printf(\"%.2f raised to the power %.2f is %.2f\\n\", base, exponent, result);\n\n    return 0;\n}",
    "description": "This program calculates the power of a number using the `pow` function from the math library."
  },
  {
    "id": 444,
    "input": "Write a program that checks if a character is a digit using the ctype library.",
    "output": "#include <stdio.h>\n#include <ctype.h>\n\nint main() {\n    char ch;\n    printf(\"Enter a character: \");\n    scanf(\" %c\", &ch);\n\n    if (isdigit(ch)) {\n        printf(\"The character '%c' is a digit.\\n\", ch);\n    } else {\n        printf(\"The character '%c' is not a digit.\\n\", ch);\n    }\n\n    return 0;\n}",
    "description": "This program checks if a given character is a digit using the `isdigit` function from the ctype library."
  },
  {
    "id": 445,
    "input": "Write a program that compares two strings using the string library.",
    "output": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str1[50], str2[50];\n    printf(\"Enter the first string: \");\n    scanf(\"%s\", str1);\n    printf(\"Enter the second string: \");\n    scanf(\"%s\", str2);\n\n    if (strcmp(str1, str2) == 0) {\n        printf(\"The strings are equal.\\n\");\n    } else {\n        printf(\"The strings are not equal.\\n\");\n    }\n\n    return 0;\n}",
    "description": "This program compares two strings using the `strcmp` function from the string library."
  },
  {
    "id": 446,
    "input": "Write a program that reads integers from a file and calculates their sum using the standard I/O library.",
    "output": "#include <stdio.h>\n\nint main() {\n    FILE *file = fopen(\"numbers.txt\", \"r\");\n    if (file == NULL) {\n        printf(\"Error: Unable to open file.\\n\");\n        return 1;\n    }\n\n    int number, sum = 0;\n    while (fscanf(file, \"%d\", &number) == 1) {\n        sum += number;\n    }\n    fclose(file);\n\n    printf(\"The sum of the numbers is: %d\\n\", sum);\n    return 0;\n}",
    "description": "This program reads integers from a file and calculates their sum using the standard I/O library."
  },
  {
    "id": 447,
    "input": "Write a program that calculates the factorial of a number using recursion.",
    "output": "#include <stdio.h>\n\nlong long factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int num;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n\n    if (num < 0) {\n        printf(\"Error: Factorial of a negative number is not defined.\\n\");\n    } else {\n        printf(\"The factorial of %d is: %lld\\n\", num, factorial(num));\n    }\n\n    return 0;\n}",
    "description": "This program calculates the factorial of a number using recursion."
  },
  {
    "id": 448,
    "input": "Write a program that uses the standard library to convert a string to a number.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    char str[20];\n    printf(\"Enter a numeric string: \");\n    scanf(\"%s\", str);\n\n    int number = atoi(str);\n    printf(\"The converted number is: %d\\n\", number);\n\n    return 0;\n}",
    "description": "This program uses the `atoi` function from the standard library to convert a numeric string to an integer."
  },
  {
    "id": 449,
    "input": "Write a program that reverses a string using the string library.",
    "output": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str[100];\n    printf(\"Enter a string: \");\n    scanf(\"%s\", str);\n\n    int len = strlen(str);\n    for (int i = 0; i < len / 2; i++) {\n        char temp = str[i];\n        str[i] = str[len - i - 1];\n        str[len - i - 1] = temp;\n    }\n\n    printf(\"The reversed string is: %s\\n\", str);\n    return 0;\n}",
    "description": "This program reverses a string in place using the string library."
  },
  {
    "id": 450,
    "input": "Write a program that calculates the current date and time using the time library.",
    "output": "#include <stdio.h>\n#include <time.h>\n\nint main() {\n    time_t t;\n    struct tm *local_time;\n\n    time(&t);\n    local_time = localtime(&t);\n\n    printf(\"Current date and time: %02d-%02d-%04d %02d:%02d:%02d\\n\",\n           local_time->tm_mday, local_time->tm_mon + 1, local_time->tm_year + 1900,\n           local_time->tm_hour, local_time->tm_min, local_time->tm_sec);\n\n    return 0;\n}",
    "description": "This program calculates and displays the current date and time using the time library."
  },
  {
    "id": 451,
    "input": "Write a program that implements the Bubble Sort algorithm.",
    "output": "#include <stdio.h>\n\nvoid bubbleSort(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}\n\nint main() {\n    int arr[] = {64, 34, 25, 12, 22, 11, 90};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    bubbleSort(arr, n);\n\n    printf(\"Sorted array: \");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}",
    "description": "This program sorts an array using the Bubble Sort algorithm."
  },
  {
    "id": 452,
    "input": "Write a program that implements the Linear Search algorithm.",
    "output": "#include <stdio.h>\n\nint linearSearch(int arr[], int n, int x) {\n    for (int i = 0; i < n; i++) {\n        if (arr[i] == x) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nint main() {\n    int arr[] = {10, 20, 30, 40, 50};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int x = 30;\n\n    int result = linearSearch(arr, n, x);\n    if (result != -1) {\n        printf(\"Element found at index %d\\n\", result);\n    } else {\n        printf(\"Element not found\\n\");\n    }\n\n    return 0;\n}",
    "description": "This program searches for an element in an array using the Linear Search algorithm."
  },
  {
    "id": 453,
    "input": "Write a program that implements the Binary Search algorithm.",
    "output": "#include <stdio.h>\n\nint binarySearch(int arr[], int n, int x) {\n    int left = 0, right = n - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] == x) {\n            return mid;\n        } else if (arr[mid] < x) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return -1;\n}\n\nint main() {\n    int arr[] = {10, 20, 30, 40, 50};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int x = 30;\n\n    int result = binarySearch(arr, n, x);\n    if (result != -1) {\n        printf(\"Element found at index %d\\n\", result);\n    } else {\n        printf(\"Element not found\\n\");\n    }\n\n    return 0;\n}",
    "description": "This program searches for an element in a sorted array using the Binary Search algorithm."
  },
  {
    "id": 454,
    "input": "Write a program that implements the Selection Sort algorithm.",
    "output": "#include <stdio.h>\n\nvoid selectionSort(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        int minIndex = i;\n        for (int j = i + 1; j < n; j++) {\n            if (arr[j] < arr[minIndex]) {\n                minIndex = j;\n            }\n        }\n        int temp = arr[minIndex];\n        arr[minIndex] = arr[i];\n        arr[i] = temp;\n    }\n}\n\nint main() {\n    int arr[] = {64, 25, 12, 22, 11};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    selectionSort(arr, n);\n\n    printf(\"Sorted array: \");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}",
    "description": "This program sorts an array using the Selection Sort algorithm."
  },
  {
    "id": 455,
    "input": "Write a program that finds the GCD of two numbers using the Euclidean algorithm.",
    "output": "#include <stdio.h>\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\nint main() {\n    int a = 56, b = 98;\n    printf(\"The GCD of %d and %d is: %d\\n\", a, b, gcd(a, b));\n    return 0;\n}",
    "description": "This program calculates the Greatest Common Divisor (GCD) of two numbers using the Euclidean algorithm."
  },
  {
    "id": 456,
    "input": "Write a program that implements the Insertion Sort algorithm.",
    "output": "#include <stdio.h>\n\nvoid insertionSort(int arr[], int n) {\n    for (int i = 1; i < n; i++) {\n        int key = arr[i];\n        int j = i - 1;\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        arr[j + 1] = key;\n    }\n}\n\nint main() {\n    int arr[] = {12, 11, 13, 5, 6};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    insertionSort(arr, n);\n\n    printf(\"Sorted array: \");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}",
    "description": "This program sorts an array using the Insertion Sort algorithm."
  },
  {
    "id": 457,
    "input": "Write a program that finds the Fibonacci sequence up to n terms using iteration.",
    "output": "#include <stdio.h>\n\nvoid printFibonacci(int n) {\n    int t1 = 0, t2 = 1, nextTerm;\n    printf(\"Fibonacci sequence: %d %d \", t1, t2);\n    for (int i = 3; i <= n; i++) {\n        nextTerm = t1 + t2;\n        printf(\"%d \", nextTerm);\n        t1 = t2;\n        t2 = nextTerm;\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int n = 10;\n    printFibonacci(n);\n    return 0;\n}",
    "description": "This program generates the Fibonacci sequence up to n terms using iteration."
  },
  {
    "id": 458,
    "input": "Write a program that checks if a number is prime.",
    "output": "#include <stdio.h>\n#include <stdbool.h>\n\nbool isPrime(int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    int n = 29;\n    if (isPrime(n)) {\n        printf(\"%d is a prime number.\\n\", n);\n    } else {\n        printf(\"%d is not a prime number.\\n\", n);\n    }\n    return 0;\n}",
    "description": "This program checks whether a given number is prime or not."
  },
  {
    "id": 459,
    "input": "Write a program that finds the sum of digits of a number.",
    "output": "#include <stdio.h>\n\nint sumOfDigits(int n) {\n    int sum = 0;\n    while (n != 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n}\n\nint main() {\n    int n = 12345;\n    printf(\"The sum of the digits of %d is: %d\\n\", n, sumOfDigits(n));\n    return 0;\n}",
    "description": "This program calculates the sum of the digits of a given number."
  },
  {
    "id": 460,
    "input": "Write a program that reverses a string.",
    "output": "#include <stdio.h>\n#include <string.h>\n\nvoid reverseString(char str[]) {\n    int n = strlen(str);\n    for (int i = 0; i < n / 2; i++) {\n        char temp = str[i];\n        str[i] = str[n - i - 1];\n        str[n - i - 1] = temp;\n    }\n}\n\nint main() {\n    char str[] = \"hello\";\n    reverseString(str);\n    printf(\"Reversed string: %s\\n\", str);\n    return 0;\n}",
    "description": "This program reverses a given string."
  },
  {
    "id": 461,
    "input": "Write a program that implements the Quick Sort algorithm.",
    "output": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint partition(int arr[], int low, int high) {\n    int pivot = arr[high];\n    int i = low - 1;\n    for (int j = low; j < high; j++) {\n        if (arr[j] < pivot) {\n            i++;\n            swap(&arr[i], &arr[j]);\n        }\n    }\n    swap(&arr[i + 1], &arr[high]);\n    return i + 1;\n}\n\nvoid quickSort(int arr[], int low, int high) {\n    if (low < high) {\n        int pi = partition(arr, low, high);\n        quickSort(arr, low, pi - 1);\n        quickSort(arr, pi + 1, high);\n    }\n}\n\nint main() {\n    int arr[] = {10, 80, 30, 90, 40, 50, 70};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    quickSort(arr, 0, n - 1);\n\n    printf(\"Sorted array: \");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}",
    "description": "This program sorts an array using the Quick Sort algorithm."
  },
  {
    "id": 462,
    "input": "Write a program that finds the shortest path using Dijkstra's algorithm.",
    "output": "#include <stdio.h>\n#include <limits.h>\n\n#define V 5\n\nint minDistance(int dist[], int visited[]) {\n    int min = INT_MAX, min_index;\n    for (int v = 0; v < V; v++) {\n        if (!visited[v] && dist[v] <= min) {\n            min = dist[v], min_index = v;\n        }\n    }\n    return min_index;\n}\n\nvoid dijkstra(int graph[V][V], int src) {\n    int dist[V], visited[V] = {0};\n    for (int i = 0; i < V; i++) {\n        dist[i] = INT_MAX;\n    }\n    dist[src] = 0;\n\n    for (int count = 0; count < V - 1; count++) {\n        int u = minDistance(dist, visited);\n        visited[u] = 1;\n        for (int v = 0; v < V; v++) {\n            if (!visited[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {\n                dist[v] = dist[u] + graph[u][v];\n            }\n        }\n    }\n\n    printf(\"Vertex Distance from Source\\n\");\n    for (int i = 0; i < V; i++) {\n        printf(\"%d\\t\\t%d\\n\", i, dist[i]);\n    }\n}\n\nint main() {\n    int graph[V][V] = {\n        {0, 10, 0, 0, 5},\n        {0, 0, 1, 0, 2},\n        {0, 0, 0, 4, 0},\n        {7, 0, 6, 0, 0},\n        {0, 3, 9, 2, 0}\n    };\n\n    dijkstra(graph, 0);\n    return 0;\n}",
    "description": "This program finds the shortest path from a source vertex to all other vertices using Dijkstra's algorithm."
  },
  {
    "id": 463,
    "input": "Write a program that solves the 0-1 Knapsack problem using dynamic programming.",
    "output": "#include <stdio.h>\n\nint max(int a, int b) {\n    return (a > b) ? a : b;\n}\n\nint knapsack(int W, int wt[], int val[], int n) {\n    int dp[n + 1][W + 1];\n    for (int i = 0; i <= n; i++) {\n        for (int w = 0; w <= W; w++) {\n            if (i == 0 || w == 0) {\n                dp[i][w] = 0;\n            } else if (wt[i - 1] <= w) {\n                dp[i][w] = max(val[i - 1] + dp[i - 1][w - wt[i - 1]], dp[i - 1][w]);\n            } else {\n                dp[i][w] = dp[i - 1][w];\n            }\n        }\n    }\n    return dp[n][W];\n}\n\nint main() {\n    int val[] = {60, 100, 120};\n    int wt[] = {10, 20, 30};\n    int W = 50;\n    int n = sizeof(val) / sizeof(val[0]);\n\n    printf(\"Maximum value in Knapsack = %d\\n\", knapsack(W, wt, val, n));\n    return 0;\n}",
    "description": "This program solves the 0-1 Knapsack problem using a dynamic programming approach."
  },
  {
    "id": 464,
    "input": "Write a program that finds all permutations of a given string.",
    "output": "#include <stdio.h>\n#include <string.h>\n\nvoid swap(char *x, char *y) {\n    char temp = *x;\n    *x = *y;\n    *y = temp;\n}\n\nvoid permute(char *str, int l, int r) {\n    if (l == r) {\n        printf(\"%s\\n\", str);\n    } else {\n        for (int i = l; i <= r; i++) {\n            swap(&str[l], &str[i]);\n            permute(str, l + 1, r);\n            swap(&str[l], &str[i]); // backtrack\n        }\n    }\n}\n\nint main() {\n    char str[] = \"ABC\";\n    int n = strlen(str);\n    permute(str, 0, n - 1);\n    return 0;\n}",
    "description": "This program generates all permutations of a given string using recursion."
  },
  {
    "id": 465,
    "input": "Write a program that implements the Merge Sort algorithm.",
    "output": "#include <stdio.h>\n\nvoid merge(int arr[], int l, int m, int r) {\n    int n1 = m - l + 1;\n    int n2 = r - m;\n\n    int L[n1], R[n2];\n    for (int i = 0; i < n1; i++) {\n        L[i] = arr[l + i];\n    }\n    for (int i = 0; i < n2; i++) {\n        R[i] = arr[m + 1 + i];\n    }\n\n    int i = 0, j = 0, k = l;\n    while (i < n1 && j < n2) {\n        if (L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        } else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n\n    while (i < n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n\n    while (j < n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\nvoid mergeSort(int arr[], int l, int r) {\n    if (l < r) {\n        int m = l + (r - l) / 2;\n\n        mergeSort(arr, l, m);\n        mergeSort(arr, m + 1, r);\n\n        merge(arr, l, m, r);\n    }\n}\n\nint main() {\n    int arr[] = {12, 11, 13, 5, 6, 7};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    mergeSort(arr, 0, n - 1);\n\n    printf(\"Sorted array: \");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}",
    "description": "This program implements the Merge Sort algorithm to sort an array."
  },
  {
    "id": 466,
    "input": "Write a program that implements a stack using an array.",
    "output": "#include <stdio.h>\n\n#define MAX 5\n\nint stack[MAX];\nint top = -1;\n\nvoid push(int value) {\n    if (top < MAX - 1) {\n        stack[++top] = value;\n        printf(\"Pushed %d\\n\", value);\n    } else {\n        printf(\"Stack Overflow\\n\");\n    }\n}\n\nint pop() {\n    if (top >= 0) {\n        return stack[top--];\n    } else {\n        printf(\"Stack Underflow\\n\");\n        return -1;\n    }\n}\n\nint peek() {\n    if (top >= 0) {\n        return stack[top];\n    } else {\n        printf(\"Stack is empty\\n\");\n        return -1;\n    }\n}\n\nint main() {\n    push(10);\n    push(20);\n    push(30);\n    printf(\"Popped: %d\\n\", pop());\n    printf(\"Peek: %d\\n\", peek());\n    return 0;\n}",
    "description": "This program demonstrates the implementation of a stack using an array."
  },
  {
    "id": 467,
    "input": "Write a program that implements a queue using an array.",
    "output": "#include <stdio.h>\n\n#define MAX 5\n\nint queue[MAX];\nint front = -1, rear = -1;\n\nvoid enqueue(int value) {\n    if (rear == MAX - 1) {\n        printf(\"Queue Overflow\\n\");\n    } else {\n        if (front == -1) front = 0;\n        queue[++rear] = value;\n        printf(\"Enqueued %d\\n\", value);\n    }\n}\n\nint dequeue() {\n    if (front == -1) {\n        printf(\"Queue Underflow\\n\");\n        return -1;\n    } else {\n        int value = queue[front++];\n        if (front > rear) front = rear = -1;\n        return value;\n    }\n}\n\nint frontElement() {\n    if (front != -1) {\n        return queue[front];\n    } else {\n        printf(\"Queue is empty\\n\");\n        return -1;\n    }\n}\n\nint main() {\n    enqueue(10);\n    enqueue(20);\n    enqueue(30);\n    printf(\"Dequeued: %d\\n\", dequeue());\n    printf(\"Front element: %d\\n\", frontElement());\n    return 0;\n}",
    "description": "This program demonstrates the implementation of a queue using an array."
  },
  {
    "id": 468,
    "input": "Write a program that implements a linked list.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nvoid insert(struct Node** head, int value) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = value;\n    newNode->next = *head;\n    *head = newNode;\n}\n\nvoid display(struct Node* head) {\n    struct Node* current = head;\n    while (current != NULL) {\n        printf(\"%d \", current->data);\n        current = current->next;\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    struct Node* head = NULL;\n    insert(&head, 10);\n    insert(&head, 20);\n    insert(&head, 30);\n    display(head);\n    return 0;\n}",
    "description": "This program demonstrates the implementation of a singly linked list."
  },
  {
    "id": 469,
    "input": "Write a program that implements a doubly linked list.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n    struct Node* prev;\n};\n\nvoid insert(struct Node** head, int value) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = value;\n    newNode->next = *head;\n    newNode->prev = NULL;\n    if (*head != NULL) {\n        (*head)->prev = newNode;\n    }\n    *head = newNode;\n}\n\nvoid display(struct Node* head) {\n    struct Node* current = head;\n    while (current != NULL) {\n        printf(\"%d \", current->data);\n        current = current->next;\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    struct Node* head = NULL;\n    insert(&head, 10);\n    insert(&head, 20);\n    insert(&head, 30);\n    display(head);\n    return 0;\n}",
    "description": "This program demonstrates the implementation of a doubly linked list."
  },
  {
    "id": 470,
    "input": "Write a program that implements a binary search tree.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* left;\n    struct Node* right;\n};\n\nstruct Node* insert(struct Node* root, int value) {\n    if (root == NULL) {\n        struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n        newNode->data = value;\n        newNode->left = newNode->right = NULL;\n        return newNode;\n    }\n    if (value < root->data) {\n        root->left = insert(root->left, value);\n    } else {\n        root->right = insert(root->right, value);\n    }\n    return root;\n}\n\nvoid inorder(struct Node* root) {\n    if (root != NULL) {\n        inorder(root->left);\n        printf(\"%d \", root->data);\n        inorder(root->right);\n    }\n}\n\nint main() {\n    struct Node* root = NULL;\n    root = insert(root, 50);\n    insert(root, 30);\n    insert(root, 70);\n    insert(root, 20);\n    insert(root, 40);\n    insert(root, 60);\n    insert(root, 80);\n    inorder(root);\n    printf(\"\\n\");\n    return 0;\n}",
    "description": "This program demonstrates the implementation of a binary search tree."
  },
  {
    "id": 471,
    "input": "Write a program that implements a circular queue.",
    "output": "#include <stdio.h>\n\n#define MAX 5\n\nint queue[MAX];\nint front = -1, rear = -1;\n\nvoid enqueue(int value) {\n    if ((rear + 1) % MAX == front) {\n        printf(\"Queue Overflow\\n\");\n    } else {\n        if (front == -1) front = 0;\n        rear = (rear + 1) % MAX;\n        queue[rear] = value;\n        printf(\"Enqueued %d\\n\", value);\n    }\n}\n\nint dequeue() {\n    if (front == -1) {\n        printf(\"Queue Underflow\\n\");\n        return -1;\n    } else {\n        int value = queue[front];\n        if (front == rear) {\n            front = rear = -1;\n        } else {\n            front = (front + 1) % MAX;\n        }\n        return value;\n    }\n}\n\nint frontElement() {\n    if (front != -1) {\n        return queue[front];\n    } else {\n        printf(\"Queue is empty\\n\");\n        return -1;\n    }\n}\n\nint main() {\n    enqueue(10);\n    enqueue(20);\n    enqueue(30);\n    printf(\"Dequeued: %d\\n\", dequeue());\n    printf(\"Front element: %d\\n\", frontElement());\n    return 0;\n}",
    "description": "This program demonstrates the implementation of a circular queue."
  },
  {
    "id": 472,
    "input": "Write a program that implements a hash table.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\n#define SIZE 10\n\nstruct HashTable {\n    int key;\n    int value;\n};\n\nstruct HashTable table[SIZE];\n\nvoid insert(int key, int value) {\n    int index = key % SIZE;\n    table[index].key = key;\n    table[index].value = value;\n}\n\nint search(int key) {\n    int index = key % SIZE;\n    if (table[index].key == key) {\n        return table[index].value;\n    } else {\n        return -1;\n    }\n}\n\nint main() {\n    insert(10, 100);\n    insert(20, 200);\n    insert(30, 300);\n    printf(\"Value at key 20: %d\\n\", search(20));\n    printf(\"Value at key 40: %d\\n\", search(40));\n    return 0;\n}",
    "description": "This program demonstrates the implementation of a basic hash table."
  },
  {
    "id": 473,
    "input": "Write a program that implements the selection sort algorithm.",
    "output": "#include <stdio.h>\n\nvoid selectionSort(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        int minIdx = i;\n        for (int j = i + 1; j < n; j++) {\n            if (arr[j] < arr[minIdx]) {\n                minIdx = j;\n            }\n        }\n        if (minIdx != i) {\n            int temp = arr[i];\n            arr[i] = arr[minIdx];\n            arr[minIdx] = temp;\n        }\n    }\n}\n\nint main() {\n    int arr[] = {64, 25, 12, 22, 11};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    selectionSort(arr, n);\n    printf(\"Sorted array: \");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "description": "This program demonstrates the implementation of the selection sort algorithm."
  },
  {
    "id": 474,
    "input": "Write a program that implements the bubble sort algorithm.",
    "output": "#include <stdio.h>\n\nvoid bubbleSort(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}\n\nint main() {\n    int arr[] = {64, 34, 25, 12, 22, 11, 90};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    bubbleSort(arr, n);\n    printf(\"Sorted array: \");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "description": "This program demonstrates the implementation of the bubble sort algorithm."
  },
  {
    "id": 475,
    "input": "Write a program that implements the quicksort algorithm.",
    "output": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint partition(int arr[], int low, int high) {\n    int pivot = arr[high];\n    int i = low - 1;\n    for (int j = low; j < high; j++) {\n        if (arr[j] < pivot) {\n            i++;\n            swap(&arr[i], &arr[j]);\n        }\n    }\n    swap(&arr[i + 1], &arr[high]);\n    return i + 1;\n}\n\nvoid quickSort(int arr[], int low, int high) {\n    if (low < high) {\n        int pi = partition(arr, low, high);\n        quickSort(arr, low, pi - 1);\n        quickSort(arr, pi + 1, high);\n    }\n}\n\nint main() {\n    int arr[] = {10, 7, 8, 9, 1, 5};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    quickSort(arr, 0, n - 1);\n    printf(\"Sorted array: \");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "description": "This program demonstrates the implementation of the quicksort algorithm."
  },
  {
    "id": 476,
    "input": "Write a program that implements a stack using arrays.",
    "output": "#include <stdio.h>\n#define MAX 10\n\nint stack[MAX];\nint top = -1;\n\nvoid push(int value) {\n    if (top == MAX - 1) {\n        printf(\"Stack overflow\\n\");\n    } else {\n        stack[++top] = value;\n        printf(\"Pushed %d\\n\", value);\n    }\n}\n\nvoid pop() {\n    if (top == -1) {\n        printf(\"Stack underflow\\n\");\n    } else {\n        printf(\"Popped %d\\n\", stack[top--]);\n    }\n}\n\nvoid display() {\n    if (top == -1) {\n        printf(\"Stack is empty\\n\");\n    } else {\n        for (int i = 0; i <= top; i++) {\n            printf(\"%d \", stack[i]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    push(10);\n    push(20);\n    push(30);\n    display();\n    pop();\n    display();\n    return 0;\n}",
    "description": "This program demonstrates the implementation of a stack using arrays."
  },
  {
    "id": 477,
    "input": "Write a program that implements a queue using arrays.",
    "output": "#include <stdio.h>\n#define MAX 10\n\nint queue[MAX];\nint front = -1, rear = -1;\n\nvoid enqueue(int value) {\n    if (rear == MAX - 1) {\n        printf(\"Queue overflow\\n\");\n    } else {\n        if (front == -1) front = 0;\n        queue[++rear] = value;\n        printf(\"Enqueued %d\\n\", value);\n    }\n}\n\nvoid dequeue() {\n    if (front == -1) {\n        printf(\"Queue underflow\\n\");\n    } else {\n        printf(\"Dequeued %d\\n\", queue[front++]);\n        if (front > rear) front = rear = -1;\n    }\n}\n\nvoid display() {\n    if (front == -1) {\n        printf(\"Queue is empty\\n\");\n    } else {\n        for (int i = front; i <= rear; i++) {\n            printf(\"%d \", queue[i]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    enqueue(10);\n    enqueue(20);\n    enqueue(30);\n    display();\n    dequeue();\n    display();\n    return 0;\n}",
    "description": "This program demonstrates the implementation of a queue using arrays."
  },
  {
    "id": 478,
    "input": "Write a program that implements a linked list.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nvoid append(struct Node** head, int value) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = value;\n    newNode->next = NULL;\n    if (*head == NULL) {\n        *head = newNode;\n    } else {\n        struct Node* temp = *head;\n        while (temp->next != NULL) {\n            temp = temp->next;\n        }\n        temp->next = newNode;\n    }\n}\n\nvoid display(struct Node* head) {\n    struct Node* temp = head;\n    while (temp != NULL) {\n        printf(\"%d \", temp->data);\n        temp = temp->next;\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    struct Node* head = NULL;\n    append(&head, 10);\n    append(&head, 20);\n    append(&head, 30);\n    display(head);\n    return 0;\n}",
    "description": "This program demonstrates the implementation of a linked list."
  },
  {
    "id": 479,
    "input": "Write a program that implements a binary search tree (BST).",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* left;\n    struct Node* right;\n};\n\nstruct Node* createNode(int value) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = value;\n    newNode->left = newNode->right = NULL;\n    return newNode;\n}\n\nstruct Node* insert(struct Node* root, int value) {\n    if (root == NULL) {\n        return createNode(value);\n    }\n    if (value < root->data) {\n        root->left = insert(root->left, value);\n    } else {\n        root->right = insert(root->right, value);\n    }\n    return root;\n}\n\nvoid inorder(struct Node* root) {\n    if (root != NULL) {\n        inorder(root->left);\n        printf(\"%d \", root->data);\n        inorder(root->right);\n    }\n}\n\nint main() {\n    struct Node* root = NULL;\n    root = insert(root, 50);\n    insert(root, 30);\n    insert(root, 20);\n    insert(root, 40);\n    insert(root, 70);\n    inorder(root);\n    return 0;\n}",
    "description": "This program demonstrates the implementation of a binary search tree (BST)."
  },
  {
    "id": 480,
    "input": "Write a program that implements a stack using a linked list.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nstruct Stack {\n    struct Node* top;\n};\n\nvoid push(struct Stack* stack, int value) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = value;\n    newNode->next = stack->top;\n    stack->top = newNode;\n}\n\nvoid pop(struct Stack* stack) {\n    if (stack->top == NULL) {\n        printf(\"Stack underflow\\n\");\n    } else {\n        struct Node* temp = stack->top;\n        stack->top = stack->top->next;\n        free(temp);\n    }\n}\n\nvoid display(struct Stack* stack) {\n    struct Node* temp = stack->top;\n    while (temp != NULL) {\n        printf(\"%d \", temp->data);\n        temp = temp->next;\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    struct Stack stack = {NULL};\n    push(&stack, 10);\n    push(&stack, 20);\n    push(&stack, 30);\n    display(&stack);\n    pop(&stack);\n    display(&stack);\n    return 0;\n}",
    "description": "This program demonstrates the implementation of a stack using a linked list."
  },
  {
    "id": 481,
    "input": "Write a program that implements a queue using a linked list.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nstruct Queue {\n    struct Node* front;\n    struct Node* rear;\n};\n\nvoid enqueue(struct Queue* queue, int value) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = value;\n    newNode->next = NULL;\n    if (queue->rear == NULL) {\n        queue->front = queue->rear = newNode;\n    } else {\n        queue->rear->next = newNode;\n        queue->rear = newNode;\n    }\n}\n\nvoid dequeue(struct Queue* queue) {\n    if (queue->front == NULL) {\n        printf(\"Queue underflow\\n\");\n    } else {\n        struct Node* temp = queue->front;\n        queue->front = queue->front->next;\n        if (queue->front == NULL) {\n            queue->rear = NULL;\n        }\n        free(temp);\n    }\n}\n\nvoid display(struct Queue* queue) {\n    struct Node* temp = queue->front;\n    while (temp != NULL) {\n        printf(\"%d \", temp->data);\n        temp = temp->next;\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    struct Queue queue = {NULL, NULL};\n    enqueue(&queue, 10);\n    enqueue(&queue, 20);\n    enqueue(&queue, 30);\n    display(&queue);\n    dequeue(&queue);\n    display(&queue);\n    return 0;\n}",
    "description": "This program demonstrates the implementation of a queue using a linked list."
  },
  {
    "id": 482,
    "input": "Write a program that implements a circular queue using arrays.",
    "output": "#include <stdio.h>\n#define MAX 5\n\nint queue[MAX];\nint front = -1, rear = -1;\n\nvoid enqueue(int value) {\n    if ((rear + 1) % MAX == front) {\n        printf(\"Queue overflow\\n\");\n    } else {\n        if (front == -1) front = 0;\n        rear = (rear + 1) % MAX;\n        queue[rear] = value;\n    }\n}\n\nvoid dequeue() {\n    if (front == -1) {\n        printf(\"Queue underflow\\n\");\n    } else {\n        printf(\"Dequeued %d\\n\", queue[front]);\n        if (front == rear) {\n            front = rear = -1;\n        } else {\n            front = (front + 1) % MAX;\n        }\n    }\n}\n\nvoid display() {\n    if (front == -1) {\n        printf(\"Queue is empty\\n\");\n    } else {\n        int i = front;\n        while (i != rear) {\n            printf(\"%d \", queue[i]);\n            i = (i + 1) % MAX;\n        }\n        printf(\"%d\\n\", queue[rear]);\n    }\n}\n\nint main() {\n    enqueue(10);\n    enqueue(20);\n    enqueue(30);\n    display();\n    dequeue();\n    display();\n    return 0;\n}",
    "description": "This program demonstrates the implementation of a circular queue using arrays."
  },
  {
    "id": 483,
    "input": "Write a program that implements a doubly linked list.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n    struct Node* prev;\n};\n\nvoid append(struct Node** head, int value) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = value;\n    newNode->next = NULL;\n    newNode->prev = NULL;\n    if (*head == NULL) {\n        *head = newNode;\n    } else {\n        struct Node* temp = *head;\n        while (temp->next != NULL) {\n            temp = temp->next;\n        }\n        temp->next = newNode;\n        newNode->prev = temp;\n    }\n}\n\nvoid display(struct Node* head) {\n    struct Node* temp = head;\n    while (temp != NULL) {\n        printf(\"%d \", temp->data);\n        temp = temp->next;\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    struct Node* head = NULL;\n    append(&head, 10);\n    append(&head, 20);\n    append(&head, 30);\n    display(head);\n    return 0;\n}",
    "description": "This program demonstrates the implementation of a doubly linked list."
  },
  {
    "id": 484,
    "input": "Write a program that implements a graph using an adjacency matrix.",
    "output": "#include <stdio.h>\n#define MAX 5\n\nint graph[MAX][MAX] = {{0, 1, 0, 0, 1},\n                          {1, 0, 1, 0, 0},\n                          {0, 1, 0, 1, 0},\n                          {0, 0, 1, 0, 1},\n                          {1, 0, 0, 1, 0}};\n\nvoid displayGraph() {\n    for (int i = 0; i < MAX; i++) {\n        for (int j = 0; j < MAX; j++) {\n            printf(\"%d \", graph[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    displayGraph();\n    return 0;\n}",
    "description": "This program demonstrates the implementation of a graph using an adjacency matrix."
  },
  {
    "id": 485,
    "input": "Write a program that implements a simple hash table using an array.",
    "output": "#include <stdio.h>\n#define SIZE 10\n\nint hashTable[SIZE] = {0};\n\nint hash(int key) {\n    return key % SIZE;\n}\n\nvoid insert(int key) {\n    int index = hash(key);\n    if (hashTable[index] != 0) {\n        printf(\"Collision occurred. Could not insert %d\\n\", key);\n    } else {\n        hashTable[index] = key;\n        printf(\"Inserted %d\\n\", key);\n    }\n}\n\nvoid display() {\n    for (int i = 0; i < SIZE; i++) {\n        printf(\"%d: %d\\n\", i, hashTable[i]);\n    }\n}\n\nint main() {\n    insert(10);\n    insert(20);\n    insert(30);\n    display();\n    return 0;\n}",
    "description": "This program demonstrates the implementation of a simple hash table using an array."
  },
  {
    "id": 486,
    "input": "Write a program to calculate the solution to the quadratic equation in C.",
    "output": "#include <stdio.h>\n#include <math.h>\n\nvoid input(double *a, double *b, double *c);\nvoid calc(double a, double b, double c, double *root1_real, double *root2_real, double *root_imaginary, int *root_type);\nvoid output(double root1_real, double root2_real, double root_imaginary, int root_type);\n\nint main() {\n    double a, b, c;\n    double root1_real, root2_real;\n    double root_imaginary = 0;\n    int root_type;\n\n    input(&a, &b, &c);\n\n    calc(a, b, c, &root1_real, &root2_real, &root_imaginary, &root_type);\n    output(root1_real, root2_real, root_imaginary, root_type);\n\n    return 0;\n}\n\nvoid input(double *a, double *b, double *c) {\n    printf(\"Enter the coefficient on the quadratic equation ax squared plus bx plus c is equal to 0.\\n\");\n    printf(\"a (coefficient of x^2): \");\n    scanf(\"%lf\", a);\n    printf(\"b (coefficient of x): \");\n    scanf(\"%lf\", b);\n    printf(\"c (Constant terms): \");\n    scanf(\"%lf\", c);\n}\n\nvoid calc(double a, double b, double c, double *root1_real, double *root2_real, double *root_imaginary, int *root_type) {\n    double discriminant = b * b - 4 * a * c;\n\n    if (discriminant > 0) {\n        *root_type = 0;\n        *root1_real = (-b + sqrt(discriminant)) / (2 * a);\n        *root2_real = (-b - sqrt(discriminant)) / (2 * a);\n    } else if (discriminant == 0) {\n        *root_type = 1;\n        *root1_real = *root2_real = -b / (2 * a);\n    } else {\n        *root_type = 2;\n        *root1_real = *root2_real = -b / (2 * a);\n        *root_imaginary = sqrt(-discriminant) / (2 * a);\n    }\n}\n\nvoid output(double root1_real, double root2_real, double root_imaginary, int root_type) {\n    if (root_type == 0) {\n        printf(\"Two different real solutions: \\n\");\n        printf(\"x1 = %.2f\\n\", root1_real);\n        printf(\"x2 = %.2f\\n\", root2_real);\n    } else if (root_type == 1) {\n        printf(\"Multi-solution of real numbers: \\n\");\n        printf(\"x = %.2f\\n\", root1_real);\n    } else if (root_type == 2) {\n        printf(\"One set of conjugated imaginary solutions: \\n\");\n        printf(\"x1 = %.2f + %.2fi\\n\", root1_real, root_imaginary);\n        printf(\"x2 = %.2f - %.2fi\\n\", root2_real, root_imaginary);\n    }\n}",
    "description": "A program that finds the solution of a quadratic equation. Create a prototype declaration by creating a new function to input the three coefficients of the quadratic equation, a function to calculate, and a new function to output the value. In the input function, a pointer is used to store the value in each variable. In the function to be calculated, the square root is calculated using the sqrt function from the math.h library. Output was performed in the function that outputs according to the value of the discriminant."
  },
  {
    "id": 487,
    "input": "Write a program to implement a basic bank account system in C.",
    "output": "#include <stdio.h>\n\nstruct Account {\n    int account_number;\n    char name[50];\n    float balance;\n};\n\nvoid deposit(struct Account *acc, float amount);\nvoid withdraw(struct Account *acc, float amount);\nvoid display(struct Account acc);\n\nint main() {\n    struct Account acc1 = {101, \"John Doe\", 1000.0};\n    int choice;\n    float amount;\n\n    while (1) {\n        printf(\"\\nBank Account System\\n\");\n        printf(\"1. Deposit\\n\");\n        printf(\"2. Withdraw\\n\");\n        printf(\"3. Display Balance\\n\");\n        printf(\"4. Exit\\n\");\n        printf(\"Enter your choice: \");\n        scanf(\"%d\", &choice);\n\n        switch (choice) {\n            case 1:\n                printf(\"Enter deposit amount: \");\n                scanf(\"%f\", &amount);\n                deposit(&acc1, amount);\n                break;\n            case 2:\n                printf(\"Enter withdraw amount: \");\n                scanf(\"%f\", &amount);\n                withdraw(&acc1, amount);\n                break;\n            case 3:\n                display(acc1);\n                break;\n            case 4:\n                printf(\"Exiting program.\\n\");\n                return 0;\n            default:\n                printf(\"Invalid choice!\\n\");\n        }\n    }\n\n    return 0;\n}\n\nvoid deposit(struct Account *acc, float amount) {\n    if (amount > 0) {\n        acc->balance += amount;\n        printf(\"Deposited %.2f to account.\\n\", amount);\n    } else {\n        printf(\"Invalid deposit amount!\\n\");\n    }\n}\n\nvoid withdraw(struct Account *acc, float amount) {\n    if (amount > 0 && amount <= acc->balance) {\n        acc->balance -= amount;\n        printf(\"Withdrew %.2f from account.\\n\", amount);\n    } else if (amount > acc->balance) {\n        printf(\"Insufficient balance!\\n\");\n    } else {\n        printf(\"Invalid withdrawal amount!\\n\");\n    }\n}\n\nvoid display(struct Account acc) {\n    printf(\"\\nAccount Number: %d\\n\", acc.account_number);\n    printf(\"Account Holder: %s\\n\", acc.name);\n    printf(\"Current Balance: %.2f\\n\", acc.balance);\n}",
    "description": "This program implements a basic bank account system where a user can deposit money into an account, withdraw money from an account, and view the current balance. The program uses a `struct Account` to store the account details, including the account number, the name of the account holder, and the balance. There are three main functions: `deposit` to add money to the account, `withdraw` to remove money (with checks for sufficient balance), and `display` to show the account details. The program runs in a loop, allowing the user to perform operations until they choose to exit."
  },
  {
    "id": 488,
    "input": "Write a program to implement a simple student management system in C.",
    "output": "#include <stdio.h>\n\nstruct Student {\n    int student_id;\n    char name[50];\n    float marks[5];\n    float average;\n};\n\nvoid inputStudentData(struct Student *stu);\nvoid calculateAverage(struct Student *stu);\nvoid displayStudentData(struct Student stu);\n\nint main() {\n    struct Student student1;\n\n    inputStudentData(&student1);\n    calculateAverage(&student1);\n    displayStudentData(student1);\n\n    return 0;\n}\n\nvoid inputStudentData(struct Student *stu) {\n    printf(\"Enter student ID: \");\n    scanf(\"%d\", &stu->student_id);\n    printf(\"Enter student name: \");\n    getchar();  // To consume the leftover newline character\n    fgets(stu->name, sizeof(stu->name), stdin);\n    printf(\"Enter marks for 5 subjects: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"Subject %d: \", i + 1);\n        scanf(\"%f\", &stu->marks[i]);\n    }\n}\n\nvoid calculateAverage(struct Student *stu) {\n    float sum = 0;\n    for (int i = 0; i < 5; i++) {\n        sum += stu->marks[i];\n    }\n    stu->average = sum / 5;\n}\n\nvoid displayStudentData(struct Student stu) {\n    printf(\"\\nStudent ID: %d\\n\", stu.student_id);\n    printf(\"Name: %s\", stu.name);\n    printf(\"Marks: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%.2f \", stu.marks[i]);\n    }\n    printf(\"\\nAverage Marks: %.2f\\n\", stu.average);\n}",
    "description": "This program implements a simple student management system where user can input a student's ID, name, and marks for five subjects. The program calculates the average of the marks and displays the student's information including their marks and average. The `struct Student` is used to store the student's details, and functions are provided for input, calculation of the average, and display of the data. The program is designed to handle data for a single student but could be easily expanded for multiple students by using arrays or other data structures."
  },
  {
    "id": 489,
    "input": "Write a program to implement a simple library management system in C.",
    "output": "#include <stdio.h>\n\nstruct Book {\n    int book_id;\n    char title[50];\n    char author[50];\n    int is_available;\n};\n\nvoid addBook(struct Book *book, int id, const char *title, const char *author);\nvoid displayBook(struct Book book);\nvoid borrowBook(struct Book *book);\nvoid returnBook(struct Book *book);\n\nint main() {\n    struct Book book1;\n    addBook(&book1, 1, \"C Programming\", \"Dennis Ritchie\");\n\n    int choice;\n    while (1) {\n        printf(\"\\nLibrary Management System\\n\");\n        printf(\"1. Display Book\\n\");\n        printf(\"2. Borrow Book\\n\");\n        printf(\"3. Return Book\\n\");\n        printf(\"4. Exit\\n\");\n        printf(\"Enter your choice: \");\n        scanf(\"%d\", &choice);\n\n        switch (choice) {\n            case 1:\n                displayBook(book1);\n                break;\n            case 2:\n                borrowBook(&book1);\n                break;\n            case 3:\n                returnBook(&book1);\n                break;\n            case 4:\n                printf(\"Exiting program.\\n\");\n                return 0;\n            default:\n                printf(\"Invalid choice!\\n\");\n        }\n    }\n\n    return 0;\n}\n\nvoid addBook(struct Book *book, int id, const char *title, const char *author) {\n    book->book_id = id;\n    snprintf(book->title, sizeof(book->title), \"%s\", title);\n    snprintf(book->author, sizeof(book->author), \"%s\", author);\n    book->is_available = 1; // Available by default\n}\n\nvoid displayBook(struct Book book) {\n    printf(\"\\nBook ID: %d\\n\", book.book_id);\n    printf(\"Title: %s\\n\", book.title);\n    printf(\"Author: %s\\n\", book.author);\n    printf(\"Status: %s\\n\", book.is_available ? \"Available\" : \"Not Available\");\n}\n\nvoid borrowBook(struct Book *book) {\n    if (book->is_available) {\n        book->is_available = 0;\n        printf(\"You borrowed the book: %s\\n\", book->title);\n    } else {\n        printf(\"Sorry, the book is not available.\\n\");\n    }\n}\n\nvoid returnBook(struct Book *book) {\n    if (!book->is_available) {\n        book->is_available = 1;\n        printf(\"You returned the book: %s\\n\", book->title);\n    } else {\n        printf(\"This book was not borrowed.\\n\");\n    }\n}",
    "description": "This program implements a simple library management system in C.\n\n### Features:\n1. **Add a Book (addBook)**:\n   - Initializes the book's ID, title, and author, and sets it as available.\n2. **Display Book (displayBook)**:\n   - Displays the book details, including ID, title, author, and availability status.\n3. **Borrow Book (borrowBook)**:\n   - Marks the book as not available if it is available and shows a success message.\n   - If the book is not available, it displays an error message.\n4. **Return Book (returnBook)**:\n   - Marks the book as available if it is borrowed and shows a success message.\n   - If the book was not borrowed, it displays an error message.\n\n### Main Structure:\n- **struct Book**: A structure that holds the book information, including ID, title, author, and availability status.\n- **main function**: Displays a menu and calls functions based on the user's choice.\n- **addBook function**: Initializes the book with ID, title, author, and availability.\n- **displayBook function**: Prints the details of a book.\n- **borrowBook function**: Changes the book's availability to `borrowed`` (not available).\n- **returnBook function**: Changes the book's availability back to `available`.\n\n### User Interface:\n- The program displays a menu in the console for the user to choose an operation.\n- Each option corresponds to a specific functionality like adding, displaying, borrowing, and returning a book."
  },
  {
    "id": 490,
    "input": "Write a program to implement a simple to-do list management system in C.",
    "output": "#include <stdio.h>\n\nstruct Todo {\n    int task_id;\n    char task[100];\n    int is_completed;\n};\n\nvoid addTask(struct Todo *todo, int id, const char *task);\nvoid displayTasks(struct Todo todos[], int count);\nvoid markAsCompleted(struct Todo *todo);\n\nint main() {\n    struct Todo todos[10];\n    int task_count = 0;\n    int choice;\n\n    while (1) {\n        printf(\"\\nTo-Do List Management\\n\");\n        printf(\"1. Add Task\\n\");\n        printf(\"2. Display Tasks\\n\");\n        printf(\"3. Mark Task as Completed\\n\");\n        printf(\"4. Exit\\n\");\n        printf(\"Enter your choice: \");\n        scanf(\"%d\", &choice);\n\n        switch (choice) {\n            case 1:\n                if (task_count < 10) {\n                    char task[100];\n                    printf(\"Enter task description: \");\n                    getchar(); // To consume newline character\n                    fgets(task, sizeof(task), stdin);\n                    addTask(&todos[task_count], task_count + 1, task);\n                    task_count++;\n                } else {\n                    printf(\"Task list is full!\\n\");\n                }\n                break;\n            case 2:\n                displayTasks(todos, task_count);\n                break;\n            case 3:\n                if (task_count > 0) {\n                    int task_id;\n                    printf(\"Enter task ID to mark as completed: \");\n                    scanf(\"%d\", &task_id);\n                    if (task_id > 0 && task_id <= task_count) {\n                        markAsCompleted(&todos[task_id - 1]);\n                    } else {\n                        printf(\"Invalid task ID!\\n\");\n                    }\n                } else {\n                    printf(\"No tasks available!\\n\");\n                }\n                break;\n            case 4:\n                printf(\"Exiting program.\\n\");\n                return 0;\n            default:\n                printf(\"Invalid choice!\\n\");\n        }\n    }\n\n    return 0;\n}\n\nvoid addTask(struct Todo *todo, int id, const char *task) {\n    todo->task_id = id;\n    snprintf(todo->task, sizeof(todo->task), \"%s\", task);\n    todo->is_completed = 0; // Task is not completed initially\n}\n\nvoid displayTasks(struct Todo todos[], int count) {\n    if (count == 0) {\n        printf(\"No tasks available!\\n\");\n    } else {\n        for (int i = 0; i < count; i++) {\n            printf(\"\\nTask ID: %d\\n\", todos[i].task_id);\n            printf(\"Description: %s\\n\", todos[i].task);\n            printf(\"Status: %s\\n\", todos[i].is_completed ? \"Completed\" : \"Pending\");\n        }\n    }\n}\n\nvoid markAsCompleted(struct Todo *todo) {\n    if (todo->is_completed) {\n        printf(\"Task is already completed!\\n\");\n    } else {\n        todo->is_completed = 1;\n        printf(\"Task marked as completed.\\n\");\n    }\n}",
    "description": "This program implements a simple to-do list management system in C. It uses a structure `Todo` to represent individual tasks with the following fields:\n\n- `task_id`: An integer representing the task's unique ID.\n- `task`: A string storing the task description.\n- `is_completed`: An integer (0 or 1) indicating whether the task is completed.\n\nThe main menu offers the following options:\n1. Add Task: Prompts the user to enter a new task description. The task is added to the `todos` array with a unique ID and a status of 'not completed'.\n2. Display Tasks: Lists all tasks, including their ID, description, and status ('Pending' or 'Completed').\n3. Mark Task as Completed: Prompts the user to enter a task ID and updates the status of the specified task to 'Completed'.\n4. Exit: Ends the program.\n\nThe program limits the number of tasks to 10. The `addTask`, `displayTasks`, and `markAsCompleted` functions modularize the task management operations for better code organization."
  },
  {
    "id": 491,
    "input": "Write a program to implement a simple bank account management system in C.",
    "output": "#include <stdio.h>\n\nstruct BankAccount {\n    int account_number;\n    char account_holder[50];\n    float balance;\n};\n\nvoid deposit(struct BankAccount *account, float amount);\nvoid withdraw(struct BankAccount *account, float amount);\nvoid displayAccount(struct BankAccount account);\n\nint main() {\n    struct BankAccount account = {123456, \"John Doe\", 1000.0};\n    int choice;\n    float amount;\n\n    while (1) {\n        printf(\"\\nBank Account Management\\n\");\n        printf(\"1. Deposit\\n\");\n        printf(\"2. Withdraw\\n\");\n        printf(\"3. Display Account Info\\n\");\n        printf(\"4. Exit\\n\");\n        printf(\"Enter your choice: \");\n        scanf(\"%d\", &choice);\n\n        switch (choice) {\n            case 1:\n                printf(\"Enter deposit amount: \");\n                scanf(\"%f\", &amount);\n                deposit(&account, amount);\n                break;\n            case 2:\n                printf(\"Enter withdrawal amount: \");\n                scanf(\"%f\", &amount);\n                withdraw(&account, amount);\n                break;\n            case 3:\n                displayAccount(account);\n                break;\n            case 4:\n                printf(\"Exiting program.\\n\");\n                return 0;\n            default:\n                printf(\"Invalid choice!\\n\");\n        }\n    }\n\n    return 0;\n}\n\nvoid deposit(struct BankAccount *account, float amount) {\n    account->balance += amount;\n    printf(\"Deposited %.2f. New balance: %.2f\\n\", amount, account->balance);\n}\n\nvoid withdraw(struct BankAccount *account, float amount) {\n    if (account->balance >= amount) {\n        account->balance -= amount;\n        printf(\"Withdrawn %.2f. New balance: %.2f\\n\", amount, account->balance);\n    } else {\n        printf(\"Insufficient funds!\\n\");\n    }\n}\n\nvoid displayAccount(struct BankAccount account) {\n    printf(\"\\nAccount Number: %d\\n\", account.account_number);\n    printf(\"Account Holder: %s\\n\", account.account_holder);\n    printf(\"Balance: %.2f\\n\", account.balance);\n}",
    "description": "This program implements a simple bank account management system in C.\n\n### Features:\n1. **Deposit**: Adds funds to the account balance and displays the new balance.\n2. **Withdraw**: Deducts funds from the account balance if sufficient balance is available, or shows an error message if insufficient funds.\n3. **Display Account**: Displays the account number, account holder's name, and current balance.\n\n### Main Structure:\n- **struct BankAccount**: A structure that holds the account number, account holder's name, and balance.\n- **main function**: Displays a menu for the user to choose actions like depositing, withdrawing, or displaying account info.\n- **deposit function**: Adds funds to the account.\n- **withdraw function**: Reduces funds from the account.\n- **displayAccount function**: Prints the details of the account.\n\n### User Interface:\n- The program runs in a loop, displaying a menu for the user to choose an operation.\n- Each option corresponds to a specific functionality like depositing, withdrawing, or displaying the account information."
  },
  {
    "id": 492,
    "input": "Write a program to implement a simple library management system in C.",
    "output": "#include <stdio.h>\n\nstruct Book {\n    int book_id;\n    char title[100];\n    char author[50];\n    int is_available;\n};\n\nvoid addBook(struct Book *book, int id, const char *title, const char *author);\nvoid displayBooks(struct Book books[], int count);\nvoid borrowBook(struct Book *book);\n\nint main() {\n    struct Book books[10];\n    int book_count = 0, choice;\n\n    while (1) {\n        printf(\"\\nLibrary Management System\\n\");\n        printf(\"1. Add Book\\n\");\n        printf(\"2. Display Books\\n\");\n        printf(\"3. Borrow Book\\n\");\n        printf(\"4. Exit\\n\");\n        printf(\"Enter your choice: \");\n        scanf(\"%d\", &choice);\n\n        switch (choice) {\n            case 1:\n                if (book_count < 10) {\n                    char title[100], author[50];\n                    printf(\"Enter book title: \");\n                    getchar();  // To consume newline\n                    fgets(title, sizeof(title), stdin);\n                    printf(\"Enter author name: \");\n                    fgets(author, sizeof(author), stdin);\n                    addBook(&books[book_count], book_count + 1, title, author);\n                    book_count++;\n                } else {\n                    printf(\"Library is full!\\n\");\n                }\n                break;\n            case 2:\n                displayBooks(books, book_count);\n                break;\n            case 3:\n                if (book_count > 0) {\n                    int book_id;\n                    printf(\"Enter book ID to borrow: \");\n                    scanf(\"%d\", &book_id);\n                    if (book_id > 0 && book_id <= book_count) {\n                        borrowBook(&books[book_id - 1]);\n                    } else {\n                        printf(\"Invalid book ID!\\n\");\n                    }\n                } else {\n                    printf(\"No books available!\\n\");\n                }\n                break;\n            case 4:\n                printf(\"Exiting program.\\n\");\n                return 0;\n            default:\n                printf(\"Invalid choice!\\n\");\n        }\n    }\n\n    return 0;\n}\n\nvoid addBook(struct Book *book, int id, const char *title, const char *author) {\n    book->book_id = id;\n    snprintf(book->title, sizeof(book->title), \"%s\", title);\n    snprintf(book->author, sizeof(book->author), \"%s\", author);\n    book->is_available = 1;  // Book is available initially\n}\n\nvoid displayBooks(struct Book books[], int count) {\n    if (count == 0) {\n        printf(\"No books available!\\n\");\n    } else {\n        for (int i = 0; i < count; i++) {\n            printf(\"\\nBook ID: %d\\n\", books[i].book_id);\n            printf(\"Title: %s\\n\", books[i].title);\n            printf(\"Author: %s\\n\", books[i].author);\n            printf(\"Status: %s\\n\", books[i].is_available ? \"Available\" : \"Borrowed\");\n        }\n    }\n}\n\nvoid borrowBook(struct Book *book) {\n    if (book->is_available) {\n        book->is_available = 0;\n        printf(\"Book borrowed successfully.\\n\");\n    } else {\n        printf(\"Book is already borrowed.\\n\");\n    }\n}",
    "description": "This program implements a simple library management system for multiple books in C.\n\n### Features:\n1. **Add a Book (addBook)**: Allows the user to add a book to the system with a title, author, and availability status.\n2. **Display Books (displayBooks)**: Displays a list of all books in the library, showing their ID, title, author, and availability.\n3. **Borrow Book (borrowBook)**: Allows the user to borrow a book if it is available. The book status is updated accordingly.\n\n### Main Structure:\n- **struct Book**: A structure that holds the book information, including ID, title, author, and availability.\n- **main function**: Displays a menu and handles user input to perform actions like adding, displaying, or borrowing books.\n- **addBook function**: Adds a new book with the specified details.\n- **displayBooks function**: Lists all available books in the library.\n- **borrowBook function**: Allows borrowing of a book and changes its availability.\n\n### User Interface:\n- The program continuously runs a loop, presenting a menu to the user to add books, display books, or borrow them."
  },
  {
    "id": 493,
    "input": "Write a program to implement a simple temperature conversion system in C.",
    "output": "#include <stdio.h>\n\nvoid celsiusToFahrenheit(float celsius);\nvoid fahrenheitToCelsius(float fahrenheit);\n\nint main() {\n    int choice;\n    float temperature;\n\n    while (1) {\n        printf(\"\\nTemperature Conversion System\\n\");\n        printf(\"1. Celsius to Fahrenheit\\n\");\n        printf(\"2. Fahrenheit to Celsius\\n\");\n        printf(\"3. Exit\\n\");\n        printf(\"Enter your choice: \");\n        scanf(\"%d\", &choice);\n\n        switch (choice) {\n            case 1:\n                printf(\"Enter temperature in Celsius: \");\n                scanf(\"%f\", &temperature);\n                celsiusToFahrenheit(temperature);\n                break;\n            case 2:\n                printf(\"Enter temperature in Fahrenheit: \");\n                scanf(\"%f\", &temperature);\n                fahrenheitToCelsius(temperature);\n                break;\n            case 3:\n                printf(\"Exiting program.\\n\");\n                return 0;\n            default:\n                printf(\"Invalid choice!\\n\");\n        }\n    }\n\n    return 0;\n}\n\nvoid celsiusToFahrenheit(float celsius) {\n    float fahrenheit = (celsius * 9 / 5) + 32;\n    printf(\"%.2f Celsius = %.2f Fahrenheit\\n\", celsius, fahrenheit);\n}\n\nvoid fahrenheitToCelsius(float fahrenheit) {\n    float celsius = (fahrenheit - 32) * 5 / 9;\n    printf(\"%.2f Fahrenheit = %.2f Celsius\\n\", fahrenheit, celsius);\n}",
    "description": "This program implements a temperature conversion system in C, which can convert temperatures between Celsius and Fahrenheit.\n\n### Features:\n1. **Celsius to Fahrenheit (celsiusToFahrenheit)**: Converts a given temperature in Celsius to Fahrenheit.\n2. **Fahrenheit to Celsius (fahrenheitToCelsius)**: Converts a given temperature in Fahrenheit to Celsius.\n\n### Main Structure:\n- **main function**: Displays a menu for the user to choose between Celsius to Fahrenheit or Fahrenheit to Celsius conversion.\n- **celsiusToFahrenheit function**: Takes a Celsius value and converts it to Fahrenheit.\n- **fahrenheitToCelsius function**: Takes a Fahrenheit value and converts it to Celsius.\n\n### User Interface:\n- The program repeatedly asks for the user's choice and temperature to perform the conversion until the user chooses to exit."
  },
  {
    "id": 494,
    "input": "Write a program to implement a simple contact management system in C.",
    "output": "#include <stdio.h>\n\nstruct Contact {\n    char name[50];\n    char phone_number[15];\n    char email[50];\n};\n\nvoid addContact(struct Contact *contact, const char *name, const char *phone, const char *email);\nvoid displayContacts(struct Contact contacts[], int count);\n\nint main() {\n    struct Contact contacts[10];\n    int contact_count = 0, choice;\n\n    while (1) {\n        printf(\"\\nContact Management System\\n\");\n        printf(\"1. Add Contact\\n\");\n        printf(\"2. Display Contacts\\n\");\n        printf(\"3. Exit\\n\");\n        printf(\"Enter your choice: \");\n        scanf(\"%d\", &choice);\n\n        switch (choice) {\n            case 1:\n                if (contact_count < 10) {\n                    char name[50], phone[15], email[50];\n                    printf(\"Enter contact name: \");\n                    getchar();  // To consume newline\n                    fgets(name, sizeof(name), stdin);\n                    printf(\"Enter phone number: \");\n                    fgets(phone, sizeof(phone), stdin);\n                    printf(\"Enter email address: \");\n                    fgets(email, sizeof(email), stdin);\n                    addContact(&contacts[contact_count], name, phone, email);\n                    contact_count++;\n                } else {\n                    printf(\"Contact list is full!\\n\");\n                }\n                break;\n            case 2:\n                displayContacts(contacts, contact_count);\n                break;\n            case 3:\n                printf(\"Exiting program.\\n\");\n                return 0;\n            default:\n                printf(\"Invalid choice!\\n\");\n        }\n    }\n\n    return 0;\n}\n\nvoid addContact(struct Contact *contact, const char *name, const char *phone, const char *email) {\n    snprintf(contact->name, sizeof(contact->name), \"%s\", name);\n    snprintf(contact->phone_number, sizeof(contact->phone_number), \"%s\", phone);\n    snprintf(contact->email, sizeof(contact->email), \"%s\", email);\n}\n\nvoid displayContacts(struct Contact contacts[], int count) {\n    if (count == 0) {\n        printf(\"No contacts available!\\n\");\n    } else {\n        for (int i = 0; i < count; i++) {\n            printf(\"\\nContact Name: %s\\n\", contacts[i].name);\n            printf(\"Phone Number: %s\\n\", contacts[i].phone_number);\n            printf(\"Email: %s\\n\", contacts[i].email);\n        }\n    }\n}",
    "description": "This program implements a simple contact management system in C, where users can add contacts and display them.\n\n### Features:\n1. **Add Contact (addContact)**: Adds a new contact with name, phone number, and email address.\n2. **Display Contacts (displayContacts)**: Displays all the stored contacts.\n\n### Main Structure:\n- **main function**: Displays a menu to add contacts, display contacts, or exit.\n- **addContact function**: Adds a new contact to the list.\n- **displayContacts function**: Displays the list of all stored contacts.\n\n### User Interface:\n- The program allows users to add a contact or view the stored contacts. It handles up to 10 contacts."
  },
  {
    "id": 495,
    "input": "Write a program to implement a simple student grade management system in C.",
    "output": "#include <stdio.h>\n\nstruct Student {\n    char name[50];\n    int grades[5];\n    float average;\n};\n\nvoid inputGrades(struct Student *student);\nvoid calculateAverage(struct Student *student);\nvoid displayStudent(struct Student student);\n\nint main() {\n    struct Student student;\n    inputGrades(&student);\n    calculateAverage(&student);\n    displayStudent(student);\n\n    return 0;\n}\n\nvoid inputGrades(struct Student *student) {\n    printf(\"Enter student's name: \");\n    getchar(); // To consume leftover newline\n    fgets(student->name, sizeof(student->name), stdin);\n    printf(\"Enter grades for 5 subjects: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"Subject %d: \", i + 1);\n        scanf(\"%d\", &student->grades[i]);\n    }\n}\n\nvoid calculateAverage(struct Student *student) {\n    int sum = 0;\n    for (int i = 0; i < 5; i++) {\n        sum += student->grades[i];\n    }\n    student->average = sum / 5.0;\n}\n\nvoid displayStudent(struct Student student) {\n    printf(\"\\nStudent's Name: %s\", student.name);\n    printf(\"Grades: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", student.grades[i]);\n    }\n    printf(\"\\nAverage Grade: %.2f\\n\", student.average);\n}",
    "description": "This program implements a simple student grade management system in C, where a student's grades are input, and their average grade is calculated.\n\n### Features:\n1. **Input Grades (inputGrades)**: Allows input of grades for 5 subjects for a student.\n2. **Calculate Average (calculateAverage)**: Computes the average of the 5 subject grades.\n3. **Display Student (displayStudent)**: Displays the student's name, grades, and average grade.\n\n### Main Structure:\n- **main function**: Inputs grades, calculates the average, and displays the result.\n- **inputGrades function**: Takes in the student's name and grades.\n- **calculateAverage function**: Calculates the average of the grades.\n- **displayStudent function**: Displays the student's details and the computed average grade.\n\n### User Interface:\n- The program interacts with the user to input grades, compute the average, and display the results."
  },
  {
    "id": 496,
    "input": "Write a program to implement a simple bank account management system in C.",
    "output": "#include <stdio.h>\n\nstruct BankAccount {\n    char name[50];\n    int accountNumber;\n    float balance;\n};\n\nvoid deposit(struct BankAccount *account, float amount);\nvoid withdraw(struct BankAccount *account, float amount);\nvoid displayAccount(struct BankAccount account);\n\nint main() {\n    struct BankAccount account = {\"John Doe\", 123456, 1000.0};\n    int choice;\n    float amount;\n\n    while (1) {\n        printf(\"\\nBank Account Management\\n\");\n        printf(\"1. Deposit\\n\");\n        printf(\"2. Withdraw\\n\");\n        printf(\"3. Display Account\\n\");\n        printf(\"4. Exit\\n\");\n        printf(\"Enter your choice: \");\n        scanf(\"%d\", &choice);\n\n        switch (choice) {\n            case 1:\n                printf(\"Enter amount to deposit: \");\n                scanf(\"%f\", &amount);\n                deposit(&account, amount);\n                break;\n            case 2:\n                printf(\"Enter amount to withdraw: \");\n                scanf(\"%f\", &amount);\n                withdraw(&account, amount);\n                break;\n            case 3:\n                displayAccount(account);\n                break;\n            case 4:\n                printf(\"Exiting program.\\n\");\n                return 0;\n            default:\n                printf(\"Invalid choice!\\n\");\n        }\n    }\n\n    return 0;\n}\n\nvoid deposit(struct BankAccount *account, float amount) {\n    account->balance += amount;\n    printf(\"Deposited %.2f. New balance: %.2f\\n\", amount, account->balance);\n}\n\nvoid withdraw(struct BankAccount *account, float amount) {\n    if (account->balance >= amount) {\n        account->balance -= amount;\n        printf(\"Withdrew %.2f. New balance: %.2f\\n\", amount, account->balance);\n    } else {\n        printf(\"Insufficient balance!\\n\");\n    }\n}\n\nvoid displayAccount(struct BankAccount account) {\n    printf(\"\\nAccount Number: %d\\n\", account.accountNumber);\n    printf(\"Account Holder: %s\", account.name);\n    printf(\"Balance: %.2f\\n\", account.balance);\n}",
    "description": "This program implements a simple bank account management system in C, where users can deposit, withdraw, and display account details.\n\n### Features:\n1. **Deposit (deposit)**: Allows the user to deposit a specified amount into their account.\n2. **Withdraw (withdraw)**: Allows the user to withdraw a specified amount from their account, if the balance is sufficient.\n3. **Display Account (displayAccount)**: Displays account details, including account number, account holder name, and balance.\n\n### Main Structure:\n- **main function**: Displays options for deposit, withdrawal, and viewing account details.\n- **deposit function**: Adds a specified amount to the account balance.\n- **withdraw function**: Subtracts a specified amount from the account balance.\n- **displayAccount function**: Displays the account's details.\n\n### User Interface:\n- The program allows users to perform basic banking operations such as depositing, withdrawing, and checking their account balance."
  },
  {
    "id": 497,
    "input": "Write a program to implement a simple inventory management system in C.",
    "output": "#include <stdio.h>\n\nstruct Item {\n    int id;\n    char name[50];\n    int quantity;\n    float price;\n};\n\nvoid addItem(struct Item *inventory, int *count, int id, const char *name, int quantity, float price);\nvoid displayInventory(struct Item inventory[], int count);\nvoid updateQuantity(struct Item *item, int quantity);\n\nint main() {\n    struct Item inventory[10];\n    int itemCount = 0, choice, id, quantity;\n    char name[50];\n    float price;\n\n    while (1) {\n        printf(\"\\nInventory Management\\n\");\n        printf(\"1. Add Item\\n\");\n        printf(\"2. Display Inventory\\n\");\n        printf(\"3. Update Item Quantity\\n\");\n        printf(\"4. Exit\\n\");\n        printf(\"Enter your choice: \");\n        scanf(\"%d\", &choice);\n\n        switch (choice) {\n            case 1:\n                printf(\"Enter item ID: \");\n                scanf(\"%d\", &id);\n                printf(\"Enter item name: \");\n                getchar(); // To consume newline character\n                fgets(name, sizeof(name), stdin);\n                printf(\"Enter item quantity: \");\n                scanf(\"%d\", &quantity);\n                printf(\"Enter item price: \");\n                scanf(\"%f\", &price);\n                addItem(inventory, &itemCount, id, name, quantity, price);\n                break;\n            case 2:\n                displayInventory(inventory, itemCount);\n                break;\n            case 3:\n                printf(\"Enter item ID to update quantity: \");\n                scanf(\"%d\", &id);\n                printf(\"Enter new quantity: \");\n                scanf(\"%d\", &quantity);\n                updateQuantity(&inventory[id - 1], quantity);\n                break;\n            case 4:\n                printf(\"Exiting program.\\n\");\n                return 0;\n            default:\n                printf(\"Invalid choice!\\n\");\n        }\n    }\n\n    return 0;\n}\n\nvoid addItem(struct Item *inventory, int *count, int id, const char *name, int quantity, float price) {\n    inventory[*count].id = id;\n    snprintf(inventory[*count].name, sizeof(inventory[*count].name), \"%s\", name);\n    inventory[*count].quantity = quantity;\n    inventory[*count].price = price;\n    (*count)++;\n}\n\nvoid displayInventory(struct Item inventory[], int count) {\n    if (count == 0) {\n        printf(\"No items in inventory.\\n\");\n    } else {\n        for (int i = 0; i < count; i++) {\n            printf(\"\\nItem ID: %d\\n\", inventory[i].id);\n            printf(\"Item Name: %s\", inventory[i].name);\n            printf(\"Quantity: %d\\n\", inventory[i].quantity);\n            printf(\"Price: %.2f\\n\", inventory[i].price);\n        }\n    }\n}\n\nvoid updateQuantity(struct Item *item, int quantity) {\n    item->quantity = quantity;\n    printf(\"Item quantity updated to: %d\\n\", item->quantity);\n}",
    "description": "This program implements a simple inventory management system where users can add items, display the inventory, and update the quantity of items based on their ID."
  },
  {
    "id": 498,
    "input": "Write a program to implement a simple student attendance system in C.",
    "output": "#include <stdio.h>\n\nstruct Student {\n    char name[50];\n    int rollNumber;\n    int attendance;\n};\n\nvoid markAttendance(struct Student *student);\nvoid displayAttendance(struct Student students[], int count);\n\nint main() {\n    struct Student students[10];\n    int studentCount = 0, choice;\n\n    while (1) {\n        printf(\"\\nStudent Attendance Management\\n\");\n        printf(\"1. Mark Attendance\\n\");\n        printf(\"2. Display Attendance\\n\");\n        printf(\"3. Exit\\n\");\n        printf(\"Enter your choice: \");\n        scanf(\"%d\", &choice);\n\n        switch (choice) {\n            case 1:\n                if (studentCount < 10) {\n                    char name[50];\n                    printf(\"Enter student name: \");\n                    getchar(); // To consume newline character\n                    fgets(name, sizeof(name), stdin);\n                    printf(\"Enter roll number: \");\n                    scanf(\"%d\", &students[studentCount].rollNumber);\n                    snprintf(students[studentCount].name, sizeof(students[studentCount].name), \"%s\", name);\n                    students[studentCount].attendance = 0; // Initially set to 0\n                    markAttendance(&students[studentCount]);\n                    studentCount++;\n                } else {\n                    printf(\"Student list is full!\\n\");\n                }\n                break;\n            case 2:\n                displayAttendance(students, studentCount);\n                break;\n            case 3:\n                printf(\"Exiting program.\\n\");\n                return 0;\n            default:\n                printf(\"Invalid choice!\\n\");\n        }\n    }\n\n    return 0;\n}\n\nvoid markAttendance(struct Student *student) {\n    int present;\n    printf(\"Enter attendance for %s: (1 for present, 0 for absent): \", student->name);\n    scanf(\"%d\", &present);\n    student->attendance = present;\n}\n\nvoid displayAttendance(struct Student students[], int count) {\n    if (count == 0) {\n        printf(\"No students available!\\n\");\n    } else {\n        for (int i = 0; i < count; i++) {\n            printf(\"\\nStudent Roll Number: %d\\n\", students[i].rollNumber);\n            printf(\"Name: %s\", students[i].name);\n            printf(\"Attendance: %s\\n\", students[i].attendance ? \"Present\" : \"Absent\");\n        }\n    }\n}",
    "description": "This program implements a simple student attendance system where users can mark attendance for students and display the attendance records for all students."
  },
  {
    "id": 499,
    "input": "Write a program to implement a simple contact management system in C.",
    "output": "#include <stdio.h>\n\nstruct Contact {\n    char name[50];\n    char phoneNumber[15];\n    char email[50];\n};\n\nvoid addContact(struct Contact *contacts, int *count, const char *name, const char *phoneNumber, const char *email);\nvoid displayContacts(struct Contact contacts[], int count);\n\nint main() {\n    struct Contact contacts[10];\n    int contactCount = 0, choice;\n    char name[50], phoneNumber[15], email[50];\n\n    while (1) {\n        printf(\"\\nContact Management\\n\");\n        printf(\"1. Add Contact\\n\");\n        printf(\"2. Display Contacts\\n\");\n        printf(\"3. Exit\\n\");\n        printf(\"Enter your choice: \");\n        scanf(\"%d\", &choice);\n\n        switch (choice) {\n            case 1:\n                printf(\"Enter contact name: \");\n                getchar(); // To consume newline character\n                fgets(name, sizeof(name), stdin);\n                printf(\"Enter contact phone number: \");\n                fgets(phoneNumber, sizeof(phoneNumber), stdin);\n                printf(\"Enter contact email: \");\n                fgets(email, sizeof(email), stdin);\n                addContact(contacts, &contactCount, name, phoneNumber, email);\n                break;\n            case 2:\n                displayContacts(contacts, contactCount);\n                break;\n            case 3:\n                printf(\"Exiting program.\\n\");\n                return 0;\n            default:\n                printf(\"Invalid choice!\\n\");\n        }\n    }\n\n    return 0;\n}\n\nvoid addContact(struct Contact *contacts, int *count, const char *name, const char *phoneNumber, const char *email) {\n    snprintf(contacts[*count].name, sizeof(contacts[*count].name), \"%s\", name);\n    snprintf(contacts[*count].phoneNumber, sizeof(contacts[*count].phoneNumber), \"%s\", phoneNumber);\n    snprintf(contacts[*count].email, sizeof(contacts[*count].email), \"%s\", email);\n    (*count)++;\n}\n\nvoid displayContacts(struct Contact contacts[], int count) {\n    if (count == 0) {\n        printf(\"No contacts available!\\n\");\n    } else {\n        for (int i = 0; i < count; i++) {\n            printf(\"\\nContact %d:\\n\", i + 1);\n            printf(\"Name: %s\", contacts[i].name);\n            printf(\"Phone Number: %s\", contacts[i].phoneNumber);\n            printf(\"Email: %s\\n\", contacts[i].email);\n        }\n    }\n}",
    "description": "This program implements a simple contact management system where users can add contacts and display the details of all contacts."
  },
  {
    "id": 500,
    "input": "Write a program to implement a simple temperature conversion system in C.",
    "output": "#include <stdio.h>\n\nvoid celsiusToFahrenheit(float celsius);\nvoid fahrenheitToCelsius(float fahrenheit);\n\nint main() {\n    int choice;\n    float temperature;\n\n    while (1) {\n        printf(\"\\nTemperature Conversion\\n\");\n        printf(\"1. Celsius to Fahrenheit\\n\");\n        printf(\"2. Fahrenheit to Celsius\\n\");\n        printf(\"3. Exit\\n\");\n        printf(\"Enter your choice: \");\n        scanf(\"%d\", &choice);\n\n        switch (choice) {\n            case 1:\n                printf(\"Enter temperature in Celsius: \");\n                scanf(\"%f\", &temperature);\n                celsiusToFahrenheit(temperature);\n                break;\n            case 2:\n                printf(\"Enter temperature in Fahrenheit: \");\n                scanf(\"%f\", &temperature);\n                fahrenheitToCelsius(temperature);\n                break;\n            case 3:\n                printf(\"Exiting program.\\n\");\n                return 0;\n            default:\n                printf(\"Invalid choice!\\n\");\n        }\n    }\n\n    return 0;\n}\n\nvoid celsiusToFahrenheit(float celsius) {\n    float fahrenheit = (celsius * 9/5) + 32;\n    printf(\"%.2f Celsius is %.2f Fahrenheit\\n\", celsius, fahrenheit);\n}\n\nvoid fahrenheitToCelsius(float fahrenheit) {\n    float celsius = (fahrenheit - 32) * 5/9;\n    printf(\"%.2f Fahrenheit is %.2f Celsius\\n\", fahrenheit, celsius);\n}",
    "description": "This program implements a simple temperature conversion system where users can convert temperatures between Celsius and Fahrenheit."
  },
  {
    "id": 501,
    "input": "Write a program in C to print a triangle pattern based on the number of rows entered by the user.",
    "output": "#include <stdio.h>\n\nvoid printTriangle(int rows);\n\nint main() {\n    int rows;\n\n    printf(\"Enter the number of rows for the triangle: \");\n    scanf(\"%d\", &rows);\n\n    if (rows <= 0) {\n        printf(\"Invalid number of rows. Please enter a positive integer.\\n\");\n        return 1;\n    }\n\n    printTriangle(rows);\n\n    return 0;\n}\n\nvoid printTriangle(int rows) {\n    for (int i = 1; i <= rows; i++) {\n        for (int j = 1; j <= i; j++) {\n            printf(\"* \");\n        }\n        printf(\"\\n\");\n    }\n}",
    "description": "This program prints a triangle pattern using asterisks ('*'). The number of rows for the triangle is entered by the user, and the program prints a left-aligned triangle with the number of rows specified."
  },
  {
    "id": 502,
    "input": "Write a program in C to print a pyramid pattern based on the number of rows entered by the user.",
    "output": "#include <stdio.h>\n\nvoid printPyramid(int rows);\n\nint main() {\n    int rows;\n\n    printf(\"Enter the number of rows for the pyramid: \");\n    scanf(\"%d\", &rows);\n\n    if (rows <= 0) {\n        printf(\"Invalid number of rows. Please enter a positive integer.\\n\");\n        return 1;\n    }\n\n    printPyramid(rows);\n\n    return 0;\n}\n\nvoid printPyramid(int rows) {\n    for (int i = 1; i <= rows; i++) {\n        for (int j = 1; j <= rows - i; j++) {\n            printf(\" \");\n        }\n        for (int j = 1; j <= (2 * i - 1); j++) {\n            printf(\"*\");\n        }\n        printf(\"\\n\");\n    }\n}",
    "description": "This program prints a pyramid pattern using asterisks ('*'). The number of rows for the pyramid is entered by the user, and the program prints a centered pyramid where the number of stars in each row increases as the rows progress."
  },
  {
    "id": 503,
    "input": "Write a program in C to print a reverse pyramid pattern based on the number of rows entered by the user.",
    "output": "#include <stdio.h>\n\nvoid printReversePyramid(int rows);\n\nint main() {\n    int rows;\n\n    printf(\"Enter the number of rows for the reverse pyramid: \");\n    scanf(\"%d\", &rows);\n\n    if (rows <= 0) {\n        printf(\"Invalid number of rows. Please enter a positive integer.\\n\");\n        return 1;\n    }\n\n    printReversePyramid(rows);\n\n    return 0;\n}\n\nvoid printReversePyramid(int rows) {\n    for (int i = rows; i >= 1; i--) {\n        for (int j = 1; j <= rows - i; j++) {\n            printf(\" \");\n        }\n        for (int j = 1; j <= (2 * i - 1); j++) {\n            printf(\"*\");\n        }\n        printf(\"\\n\");\n    }\n}",
    "description": "This program prints a reverse pyramid pattern using asterisks ('*'). The number of rows for the pyramid is entered by the user, and the program prints a centered reverse pyramid where the number of stars in each row decreases as the rows progress."
  },
  {
    "id": 503,
    "input": "Write a program in C to print a reverse pyramid pattern based on the number of rows entered by the user.",
    "output": "#include <stdio.h>\n\nvoid printReversePyramid(int rows);\n\nint main() {\n    int rows;\n\n    printf(\"Enter the number of rows for the reverse pyramid: \");\n    scanf(\"%d\", &rows);\n\n    if (rows <= 0) {\n        printf(\"Invalid number of rows. Please enter a positive integer.\\n\");\n        return 1;\n    }\n\n    printReversePyramid(rows);\n\n    return 0;\n}\n\nvoid printReversePyramid(int rows) {\n    for (int i = rows; i >= 1; i--) {\n        for (int j = 1; j <= rows - i; j++) {\n            printf(\" \");\n        }\n        for (int j = 1; j <= (2 * i - 1); j++) {\n            printf(\"*\");\n        }\n        printf(\"\\n\");\n    }\n}",
    "description": "This program prints a reverse pyramid pattern using asterisks ('*'). The number of rows for the pyramid is entered by the user, and the program prints a centered reverse pyramid where the number of stars in each row decreases as the rows progress."
  },
  {
    "id": 504,
    "input": "Write a program in C to divide two numbers entered by the user with error handling for division by zero.",
    "output": "#include <stdio.h>\n\nint divide(int a, int b);\n\nint main() {\n    int a, b;\n\n    printf(\"Enter two numbers to divide: \");\n    scanf(\"%d %d\", &a, &b);\n\n    if (b == 0) {\n        printf(\"Error: Division by zero is not allowed.\\n\");\n        return 1;\n    }\n\n    printf(\"Result: %d\\n\", divide(a, b));\n    return 0;\n}\n\nint divide(int a, int b) {\n    return a / b;\n}",
    "description": "This program divides two numbers entered by the user. It checks if the denominator is zero and prints an error message if it is, preventing division by zero."
  },
  {
    "id": 505,
    "input": "Write a program in C to open a file and read its contents with error handling for file opening.",
    "output": "#include <stdio.h>\n\nint main() {\n    FILE *file = fopen(\"example.txt\", \"r\");\n\n    if (file == NULL) {\n        perror(\"Error opening file\");\n        return 1;\n    }\n\n    char ch;\n    while ((ch = fgetc(file)) != EOF) {\n        putchar(ch);\n    }\n\n    fclose(file);\n    return 0;\n}",
    "description": "This program attempts to open a file for reading. If the file cannot be opened, it prints an error message using perror, and if the file is successfully opened, it reads and displays its contents."
  },
  {
    "id": 506,
    "input": "Write a program in C to allocate memory dynamically and handle memory allocation failure.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int *ptr = (int *)malloc(sizeof(int) * 10);\n\n    if (ptr == NULL) {\n        printf(\"Memory allocation failed.\\n\");\n        return 1;\n    }\n\n    for (int i = 0; i < 10; i++) {\n        ptr[i] = i + 1;\n    }\n\n    for (int i = 0; i < 10; i++) {\n        printf(\"%d \", ptr[i]);\n    }\n\n    free(ptr);\n    return 0;\n}",
    "description": "This program dynamically allocates memory for an array of 10 integers. It checks if the memory allocation fails and prints an error message if it does."
  },
  {
    "id": 507,
    "input": "Write a program in C to read a number from the user and check if it is positive or negative, with error handling for non-numeric input.",
    "output": "#include <stdio.h>\n\nint main() {\n    int num;\n    printf(\"Enter a number: \");\n\n    if (scanf(\"%d\", &num) != 1) {\n        printf(\"Error: Invalid input. Please enter a number.\\n\");\n        return 1;\n    }\n\n    if (num < 0) {\n        printf(\"The number is negative.\\n\");\n    } else {\n        printf(\"The number is positive.\\n\");\n    }\n\n    return 0;\n}",
    "description": "This program reads a number from the user and checks if it is positive or negative. It also includes error handling for non-numeric input."
  },
  {
    "id": 508,
    "input": "Write a program in C to find the factorial of a number entered by the user with error handling for negative numbers.",
    "output": "#include <stdio.h>\n\nlong long factorial(int n);\n\nint main() {\n    int num;\n\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n\n    if (num < 0) {\n        printf(\"Error: Factorial of a negative number is undefined.\\n\");\n        return 1;\n    }\n\n    printf(\"Factorial of %d is %lld\\n\", num, factorial(num));\n    return 0;\n}\n\nlong long factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}",
    "description": "This program calculates the factorial of a number entered by the user. It checks if the number is negative and prints an error message if it is, as factorials are only defined for non-negative integers."
  },
  {
    "id": 509,
    "input": "Write a program in C to reverse a string entered by the user with error handling for empty input.",
    "output": "#include <stdio.h>\n#include <string.h>\n\nvoid reverseString(char str[]);\n\nint main() {\n    char str[100];\n\n    printf(\"Enter a string: \");\n    fgets(str, sizeof(str), stdin);\n\n    // Remove newline character if present\n    str[strcspn(str, \"\\n\")] = '\\0';\n\n    if (strlen(str) == 0) {\n        printf(\"Error: Empty string entered.\\n\");\n        return 1;\n    }\n\n    reverseString(str);\n    printf(\"Reversed string: %s\\n\", str);\n\n    return 0;\n}\n\nvoid reverseString(char str[]) {\n    int len = strlen(str);\n    for (int i = 0; i < len / 2; i++) {\n        char temp = str[i];\n        str[i] = str[len - i - 1];\n        str[len - i - 1] = temp;\n    }\n}",
    "description": "This program reverses a string entered by the user. It checks if the string is empty and prints an error message if it is, as an empty string cannot be reversed."
  },
  {
    "id": 510,
    "input": "Write a program in C to find the maximum element in an array entered by the user with error handling for empty arrays.",
    "output": "#include <stdio.h>\n\nint findMax(int arr[], int size);\n\nint main() {\n    int size;\n\n    printf(\"Enter the size of the array: \");\n    scanf(\"%d\", &size);\n\n    if (size <= 0) {\n        printf(\"Error: Array size must be a positive integer.\\n\");\n        return 1;\n}\n\n    int arr[size];\n    printf(\"Enter %d elements: \", size);\n    for (int i = 0; i < size; i++) {\n        scanf(\"%d\", &arr[i]);\n    }\n\n    printf(\"The maximum element in the array is: %d\\n\", findMax(arr, size));\n\n    return 0;\n}\n\nint findMax(int arr[], int size) {\n    int max = arr[0];\n    for (int i = 1; i < size; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}",
    "description": "This program finds the maximum element in an array. It handles errors by checking if the user enters a positive integer for the array size. If the array size is invalid (non-positive), the program will print an error message."
  },
  {
    "id": 511,
    "input": "Write a snake game in C where the snake moves and eats food. The game includes error handling, key input for movement, and updates the screen. The snake's growth and speed change as it eats food.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n#include <termios.h>\n#include <unistd.h>\n\n#define WIDTH 15\n#define HEIGHT 10\n#define STARTX (WIDTH / 2)\n#define STARTY (HEIGHT / 2)\n#define MAXLENGTH ((WIDTH - 2) * (HEIGHT - 2))\n#define LENGTH_LEV1 (MAXLENGTH / 3)\n#define LENGTH_LEV2 (LENGTH_LEV1 * 2)\n#define TIME_LEV1 50\n#define TIME_LEV2 30\n#define TIME_LEV3 10\n#define LOOPNUM 10\n\nenum direction {\n    left,\n    up,\n    right,\n    down,\n    non\n};\n\ntypedef struct snakePosition {\n    int x, y;\n    enum direction nextDirection;\n} snake;\n\ntypedef struct snakeFood {\n    int x, y;\n} food;\n\nint field[HEIGHT][WIDTH];\nsnake snake1[MAXLENGTH];\nfood food1;\nint snakeLength = 2;\nint eatFlag = 0;\n\nint init();\nint viewField();\nint countSec();\nenum direction getKey();\nint shiftSnake();\nint moveSnake(enum direction key);\nint makeFood();\nint judge();\nvoid setTerminalMode();\nvoid resetTerminalMode();\nchar getch();\n\nint main() {\n    enum direction key;\n    int loopCount = 0;\n\n    init();\n    viewField();\n\n    while (1) {\n        countSec();\n        key = getKey();\n        if (loopCount == LOOPNUM || key != non) {\n            moveSnake(key);\n            if (judge() < 0) break;\n            viewField();\n            loopCount = 0;\n        }\n        loopCount += 1;\n    }\n\n    resetTerminalMode();\n    return 0;\n}\n\nint init() {\n    for (int i = 0; i < HEIGHT; i++) {\n        for (int j = 0; j < WIDTH; j++) {\n            if (i == 0 || i == (HEIGHT - 1) || j == 0 || j == (WIDTH - 1)) field[i][j] = 1;\n            else field[i][j] = 0;\n        }\n    }\n\n    snakeLength = 2;\n    memset(snake1, 0, sizeof(snake1));\n    snake1[0].x = STARTX;\n    snake1[0].y = STARTY;\n    snake1[0].nextDirection = left;\n\n    snake1[1].x = STARTX + 1;\n    snake1[1].y = STARTY;\n\n    makeFood();\n\n    return 0;\n}\n\nint viewField() {\n    system(\"clear\");\n\n    for (int i = 0; i < HEIGHT; i++) {\n        for (int j = 0; j < WIDTH; j++) {\n            if (i == 0 || i == (HEIGHT - 1) || j == 0 || j == (WIDTH - 1)) field[i][j] = 1;\n            else field[i][j] = 0;\n        }\n    }\n\n    for (int i = 0; i < snakeLength; i++) {\n        field[(HEIGHT - 1) - snake1[i].y][snake1[i].x] = 2;\n    }\n\n    field[(HEIGHT - 1) - food1.y][food1.x] = 3;\n\n    for (int i = 0; i < HEIGHT; i++) {\n        for (int j = 0; j < WIDTH; j++) {\n            if (field[i][j] == 1) printf(\"■\");\n            else if (field[i][j] == 2) printf(\"□\");\n            else if (field[i][j] == 3) printf(\"Food\");\n            else printf(\" \");\n            if (j == (WIDTH - 1)) printf(\"\\n\");\n        }\n    }\n\n    return 0;\n}\n\nint countSec() {\n    double startTime = 0.0;\n    double endTime = 0.0;\n    double totalTime = 0.0;\n\n    int level = 0;\n\n    if (snakeLength < LENGTH_LEV1) level = TIME_LEV1;\n    else if (snakeLength >= LENGTH_LEV1 && snakeLength < LENGTH_LEV2) level = TIME_LEV2;\n    else level = TIME_LEV3;\n\n    startTime = clock();\n    while (1) {\n        endTime = clock();\n        totalTime = endTime - startTime;\n        if (totalTime > TIME_LEV1) break;\n    }\n\n    return 0;\n}\n\nenum direction getKey() {\n    char key = getch();\n\n    if (key == 'a') return left;\n    else if (key == 'w') return up;\n    else if (key == 'd') return right;\n    else if (key == 's') return down;\n    else return non;\n}\n\nint shiftSnake() {\n    if (snakeLength == 1) return -1;\n\n    for (int i = 1; i < snakeLength; i++) {\n        if (snake1[snakeLength - i].x == snake1[snakeLength - (i + 1)].x\n            && snake1[snakeLength - i].y == snake1[snakeLength - (i + 1)].y) {\n            continue;\n        }\n\n        snake1[snakeLength - i].x = snake1[snakeLength - (i + 1)].x;\n        snake1[snakeLength - i].y = snake1[snakeLength - (i + 1)].y;\n    }\n\n    return 0;\n}\n\nint moveSnake(enum direction key) {\n    switch (key) {\n    case left:\n        if (snake1[0].x == (snake1[1].x + 1)) {\n            shiftSnake();\n            snake1[0].nextDirection = key;\n            break;\n        }\n        break;\n    case up:\n        if (snake1[0].y == (snake1[1].y - 1)) {\n            shiftSnake();\n            snake1[0].nextDirection = key;\n            break;\n        }\n        break;\n    case right:\n        if (snake1[0].x == (snake1[1].x - 1)) {\n            shiftSnake();\n            snake1[0].nextDirection = key;\n            break;\n        }\n        break;\n    case down:\n        if (snake1[0].y == (snake1[1].y + 1)) {\n            shiftSnake();\n            snake1[0].nextDirection = key;\n            break;\n        }\n        break;\n    }\n\n    return 0;\n}\n\nint makeFood() {\n    food1.x = rand() % (WIDTH - 2) + 1;\n    food1.y = rand() % (HEIGHT - 2) + 1;\n    return 0;\n}\n\nint judge() {\n    if (snake1[0].x == food1.x && snake1[0].y == food1.y) {\n        eatFlag = 1;\n        makeFood();\n    }\n\n    return 0;\n}\n\nvoid setTerminalMode() {\n    struct termios newt;\n    tcgetattr(STDIN_FILENO, &newt);\n    newt.c_lflag &= ~ICANON;   // Disable canonical mode\n    newt.c_lflag &= ~ECHO;     // Disable echoing\n    newt.c_cc[VMIN] = 1;       // Minimum number of characters to read\n    newt.c_cc[VTIME] = 0;      // Timeout value\n    tcsetattr(STDIN_FILENO, TCSANOW, &newt);\n}\n\nvoid resetTerminalMode() {\n    struct termios oldt;\n    tcgetattr(STDIN_FILENO, &oldt);\n    oldt.c_lflag |= ICANON;    // Enable canonical mode\n    oldt.c_lflag |= ECHO;      // Enable echoing\n    tcsetattr(STDIN_FILENO, TCSANOW, &oldt);\n}\n\nchar getch() {\n    char buf = 0;\n    setTerminalMode();\n    read(STDIN_FILENO, &buf, 1);\n    resetTerminalMode();\n    return buf;\n}",
    "description": "This program implements a basic snake game in C. The snake moves based on user input (WASD keys), and grows longer when it eats food. The game field is displayed in the terminal, and the snake's movement is controlled by the user. The speed and length of the snake change as it eats food. The game uses the `clock()` function for a time-based mechanism to control the snake's movement. The terminal input is handled using the `termios` library to capture user keys without waiting for the Enter key."
  },
  {
    "id": 512,
    "input": "Write a snake game in C where the snake moves and eats food. The game includes error handling, key input for movement, and updates the screen. The snake's growth and speed change as it eats food.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n#include <termios.h>\n#include <unistd.h>\n\n#define WIDTH 15\n#define HEIGHT 10\n#define STARTX (WIDTH / 2)\n#define STARTY (HEIGHT / 2)\n#define MAXLENGTH ((WIDTH - 2) * (HEIGHT - 2))\n#define LENGTH_LEV1 (MAXLENGTH / 3)\n#define LENGTH_LEV2 (LENGTH_LEV1 * 2)\n#define TIME_LEV1 50\n#define TIME_LEV2 30\n#define TIME_LEV3 10\n#define LOOPNUM 10\n\nenum direction {\n    left,\n    up,\n    right,\n    down,\n    non\n};\n\ntypedef struct snakePosition {\n    int x, y;\n    enum direction nextDirection;\n} snake;\n\ntypedef struct snakeFood {\n    int x, y;\n} food;\n\nint field[HEIGHT][WIDTH];\nsnake snake1[MAXLENGTH];\nfood food1;\nint snakeLength = 2;\nint eatFlag = 0;\n\nint init();\nint viewField();\nint countSec();\nenum direction getKey();\nint shiftSnake();\nint moveSnake(enum direction key);\nint makeFood();\nint judge();\nvoid setTerminalMode();\nvoid resetTerminalMode();\nchar getch();\n\nint main() {\n    enum direction key;\n    int loopCount = 0;\n\n    init();\n    viewField();\n\n    while (1) {\n        countSec();\n        key = getKey();\n        if (loopCount == LOOPNUM || key != non) {\n            moveSnake(key);\n            if (judge() < 0) break;\n            viewField();\n            loopCount = 0;\n        }\n        loopCount += 1;\n    }\n\n    resetTerminalMode();\n    return 0;\n}\n\nint init() {\n    for (int i = 0; i < HEIGHT; i++) {\n        for (int j = 0; j < WIDTH; j++) {\n            if (i == 0 || i == (HEIGHT - 1) || j == 0 || j == (WIDTH - 1)) field[i][j] = 1;\n            else field[i][j] = 0;\n        }\n    }\n\n    snakeLength = 2;\n    memset(snake1, 0, sizeof(snake1));\n    snake1[0].x = STARTX;\n    snake1[0].y = STARTY;\n    snake1[0].nextDirection = left;\n\n    snake1[1].x = STARTX + 1;\n    snake1[1].y = STARTY;\n\n    makeFood();\n\n    return 0;\n}\n\nint viewField() {\n    system(\"clear\");\n\n    for (int i = 0; i < HEIGHT; i++) {\n        for (int j = 0; j < WIDTH; j++) {\n            if (i == 0 || i == (HEIGHT - 1) || j == 0 || j == (WIDTH - 1)) field[i][j] = 1;\n            else field[i][j] = 0;\n        }\n    }\n\n    for (int i = 0; i < snakeLength; i++) {\n        field[(HEIGHT - 1) - snake1[i].y][snake1[i].x] = 2;\n    }\n\n    field[(HEIGHT - 1) - food1.y][food1.x] = 3;\n\n    for (int i = 0; i < HEIGHT; i++) {\n        for (int j = 0; j < WIDTH; j++) {\n            if (field[i][j] == 1) printf(\"■\");\n            else if (field[i][j] == 2) printf(\"□\");\n            else if (field[i][j] == 3) printf(\"Food\");\n            else printf(\" \");\n            if (j == (WIDTH - 1)) printf(\"\\n\");\n        }\n    }\n\n    return 0;\n}\n\nint countSec() {\n    double startTime = 0.0;\n    double endTime = 0.0;\n    double totalTime = 0.0;\n\n    int level = 0;\n\n    if (snakeLength < LENGTH_LEV1) level = TIME_LEV1;\n    else if (snakeLength >= LENGTH_LEV1 && snakeLength < LENGTH_LEV2) level = TIME_LEV2;\n    else level = TIME_LEV3;\n\n    startTime = clock();\n    while (1) {\n        endTime = clock();\n        totalTime = endTime - startTime;\n        if (totalTime > TIME_LEV1) break;\n    }\n\n    return 0;\n}\n\nenum direction getKey() {\n    char key = getch();\n\n    if (key == 'a') return left;\n    else if (key == 'w') return up;\n    else if (key == 'd') return right;\n    else if (key == 's') return down;\n    else return non;\n}\n\nint shiftSnake() {\n    if (snakeLength == 1) return -1;\n\n    for (int i = 1; i < snakeLength; i++) {\n        if (snake1[snakeLength - i].x == snake1[snakeLength - (i + 1)].x\n            && snake1[snakeLength - i].y == snake1[snakeLength - (i + 1)].y) {\n            continue;\n        }\n\n        snake1[snakeLength - i].x = snake1[snakeLength - (i + 1)].x;\n        snake1[snakeLength - i].y = snake1[snakeLength - (i + 1)].y;\n    }\n\n    return 0;\n}\n\nint moveSnake(enum direction key) {\n    switch (key) {\n    case left:\n        if (snake1[0].x == (snake1[1].x + 1)) {\n            shiftSnake();\n            snake1[0].nextDirection = key;\n            break;\n        }\n        break;\n    case up:\n        if (snake1[0].y == (snake1[1].y - 1)) {\n            shiftSnake();\n            snake1[0].nextDirection = key;\n            break;\n        }\n        break;\n    case right:\n        if (snake1[0].x == (snake1[1].x - 1)) {\n            shiftSnake();\n            snake1[0].nextDirection = key;\n            break;\n        }\n        break;\n    case down:\n        if (snake1[0].y == (snake1[1].y + 1)) {\n            shiftSnake();\n            snake1[0].nextDirection = key;\n            break;\n        }\n        break;\n    }\n\n    return 0;\n}\n\nint makeFood() {\n    food1.x = rand() % (WIDTH - 2) + 1;\n    food1.y = rand() % (HEIGHT - 2) + 1;\n    return 0;\n}\n\nint judge() {\n    if (snake1[0].x == food1.x && snake1[0].y == food1.y) {\n        eatFlag = 1;\n        makeFood();\n    }\n\n    return 0;\n}\n\nvoid setTerminalMode() {\n    struct termios newt;\n    tcgetattr(STDIN_FILENO, &newt);\n    newt.c_lflag &= ~ICANON;   // Disable canonical mode\n    newt.c_lflag &= ~ECHO;     // Disable echoing\n    newt.c_cc[VMIN] = 1;       // Minimum number of characters to read\n    newt.c_cc[VTIME] = 0;      // Timeout value\n    tcsetattr(STDIN_FILENO, TCSANOW, &newt);\n}\n\nvoid resetTerminalMode() {\n    struct termios oldt;\n    tcgetattr(STDIN_FILENO, &oldt);\n    oldt.c_lflag |= ICANON;    // Enable canonical mode\n    oldt.c_lflag |= ECHO;      // Enable echoing\n    tcsetattr(STDIN_FILENO, TCSANOW, &oldt);\n}\n\nchar getch() {\n    char buf = 0;\n    setTerminalMode();\n    read(STDIN_FILENO, &buf, 1);\n    resetTerminalMode();\n    return buf;\n}",
    "description": "This program implements a basic snake game in C. The snake moves based on user input (WASD keys), and grows longer when it eats food. The game field is displayed in the terminal, and the snake's movement is controlled by the user. The speed and length of the snake change as it eats food. The game uses the `clock()` function for a time-based mechanism to control the snake's movement. The terminal input is handled using the `termios` library to capture user keys without waiting for the Enter key."
  },
  {
    "id": 512,
    "input": "Write a basic Tic-Tac-Toe game in C where two players can play. The game checks for a winner and displays the board after each move.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nchar board[3][3];\n\nvoid printBoard() {\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            printf(\"%c \", board[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint checkWinner() {\n    for (int i = 0; i < 3; i++) {\n        if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ') return 1;\n        if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ') return 1;\n    }\n    if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ') return 1;\n    if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != ' ') return 1;\n    return 0;\n}\n\nint main() {\n    int row, col;\n    int player = 1;\n    int moveCount = 0;\n\n    // Initialize the board\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            board[i][j] = ' ';\n        }\n    }\n\n    while (1) {\n        printBoard();\n        printf(\"Player %d, enter row and column: \", player);\n        scanf(\"%d %d\", &row, &col);\n\n        if (board[row][col] == ' ') {\n            board[row][col] = (player == 1) ? 'X' : 'O';\n            moveCount++;\n            if (checkWinner()) {\n                printBoard();\n                printf(\"Player %d wins!\\n\", player);\n                break;\n            }\n            if (moveCount == 9) {\n                printBoard();\n                printf(\"It's a draw!\\n\");\n                break;\n            }\n            player = 3 - player; // Switch player\n        } else {\n            printf(\"Cell already taken, try again.\\n\");\n        }\n    }\n    return 0;\n}",
    "description": "This is a basic Tic-Tac-Toe game in C. Two players can play by entering row and column numbers. The program checks for a winner after every move and announces the winner or a draw when appropriate."
  },
  {
    "id": 513,
    "input": "Write a simple text-based Rock, Paper, Scissors game in C where the user plays against the computer. The game will display the winner after each round.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    int userChoice, computerChoice;\n    srand(time(0)); // Seed for random number generator\n\n    printf(\"Rock, Paper, Scissors game!\\n\");\n    printf(\"Enter 1 for Rock, 2 for Paper, 3 for Scissors: \");\n    scanf(\"%d\", &userChoice);\n\n    computerChoice = rand() % 3 + 1; // Generate random number between 1 and 3\n\n    printf(\"Computer chose: \");\n    switch (computerChoice) {\n        case 1: printf(\"Rock\\n\"); break;\n        case 2: printf(\"Paper\\n\"); break;\n        case 3: printf(\"Scissors\\n\"); break;\n    }\n\n    if (userChoice == computerChoice) {\n        printf(\"It's a draw!\\n\");\n    } else if ((userChoice == 1 && computerChoice == 3) || (userChoice == 2 && computerChoice == 1) || (userChoice == 3 && computerChoice == 2)) {\n        printf(\"You win!\\n\");\n    } else {\n        printf(\"You lose!\\n\");\n    }\n    return 0;\n}",
    "description": "This is a simple text-based Rock, Paper, Scissors game where the user chooses one of the three options, and the computer randomly selects its choice. The winner is then displayed after the round."
  },
  {
    "id": 514,
    "input": "Write a guessing game in C where the computer randomly selects a number between 1 and 100, and the player tries to guess it. The game provides feedback on whether the guess is too high, too low, or correct.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    int number, guess, attempts = 0;\n    srand(time(0));\n\n    number = rand() % 100 + 1; // Random number between 1 and 100\n\n    printf(\"Guess the number between 1 and 100: \");\n\n    do {\n        scanf(\"%d\", &guess);\n        attempts++;\n        if (guess > number) {\n            printf(\"Too high! Try again: \");\n        } else if (guess < number) {\n            printf(\"Too low! Try again: \");\n        } else {\n            printf(\"Correct! You guessed the number in %d attempts.\\n\", attempts);\n        }\n    } while (guess != number);\n\n    return 0;\n}",
    "description": "In this guessing game, the computer randomly selects a number between 1 and 100, and the player tries to guess it. The program gives feedback on whether the guess is too high, too low, or correct and counts the number of attempts."
  },
  {
    "id": 515,
    "input": "Write a simple text-based Hangman game in C. The player guesses letters to reveal a hidden word. The game ends when the player guesses the word or runs out of attempts.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_ATTEMPTS 6\n\nvoid displayWord(char word[], char guessed[]) {\n    for (int i = 0; i < strlen(word); i++) {\n        if (guessed[i] == 1) {\n            printf(\"%c \", word[i]);\n        } else {\n            printf(\"_ \");\n        }\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    char word[] = \"programming\";\n    char guessed[strlen(word)];\n    int attempts = 0;\n    int correctGuess = 0;\n    char guess;\n\n    for (int i = 0; i < strlen(word); i++) {\n        guessed[i] = 0;\n    }\n\n    printf(\"Welcome to Hangman!\\n\");\n\n    while (attempts < MAX_ATTEMPTS && correctGuess < strlen(word)) {\n        displayWord(word, guessed);\n        printf(\"Enter a guess: \");\n        scanf(\" %c\", &guess);\n\n        int found = 0;\n        for (int i = 0; i < strlen(word); i++) {\n            if (word[i] == guess && !guessed[i]) {\n                guessed[i] = 1;\n                correctGuess++;\n                found = 1;\n            }\n        }\n\n        if (!found) {\n            attempts++;\n            printf(\"Wrong guess. You have %d attempts left.\\n\", MAX_ATTEMPTS - attempts);\n        }\n\n        if (correctGuess == strlen(word)) {\n            printf(\"Congratulations! You've guessed the word: %s\\n\", word);\n            break;\n        }\n    }\n\n    if (attempts == MAX_ATTEMPTS) {\n        printf(\"You've lost. The word was: %s\\n\", word);\n    }\n\n    return 0;\n}",
    "description": "This is a simple Hangman game where the player guesses letters to reveal a hidden word. The game provides feedback on the number of incorrect guesses and ends when the player guesses the word or runs out of attempts."
  },
  {
    "id": 516,
    "input": "Write a C program to simulate a simple text-based dice game where the player rolls a dice and tries to match a target number.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    int target, roll, attempts = 0;\n    srand(time(0));\n\n    printf(\"Enter target number (between 1 and 6): \");\n    scanf(\"%d\", &target);\n\n    while (1) {\n        roll = rand() % 6 + 1;\n        attempts++;\n        printf(\"You rolled: %d\\n\", roll);\n        if (roll == target) {\n            printf(\"You matched the target number %d in %d attempts!\\n\", target, attempts);\n            break;\n        }\n    }\n\n    return 0;\n}",
    "description": "This dice game allows the player to roll a dice and tries to match a target number. The program counts the number of attempts until the player matches the target number."
  },
  {
    "id": 517,
    "input": "Write a C program to simulate a simple coin flip game where the player guesses heads or tails and the program randomly selects a result.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    int guess, flip;\n    srand(time(0));\n\n    printf(\"Enter 1 for Heads or 2 for Tails: \");\n    scanf(\"%d\", &guess);\n\n    flip = rand() % 2 + 1;\n    if (guess == flip) {\n        printf(\"You guessed correctly!\\n\");\n    } else {\n        printf(\"You guessed wrong.\\n\");\n    }\n\n    return 0;\n}",
    "description": "This coin flip game lets the player guess whether the flip will be heads or tails. The program randomly selects a result and announces whether the player's guess was correct."
  },
  {
    "id": 518,
    "input": "Write a simple text-based memory game in C where the player needs to remember the sequence of numbers displayed by the program.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\n#define SEQUENCE_LENGTH 5\n\nvoid displaySequence(int sequence[], int length) {\n    for (int i = 0; i < length; i++) {\n        printf(\"%d \", sequence[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int sequence[SEQUENCE_LENGTH];\n    int guess[SEQUENCE_LENGTH];\n    int correct = 0;\n\n    srand(time(0));\n\n    // Generate random sequence\n    for (int i = 0; i < SEQUENCE_LENGTH; i++) {\n        sequence[i] = rand() % 10 + 1;\n    }\n\n    printf(\"Remember the sequence: \");\n    displaySequence(sequence, SEQUENCE_LENGTH);\n\n    printf(\"Enter the sequence: \");\n    for (int i = 0; i < SEQUENCE_LENGTH; i++) {\n        scanf(\"%d\", &guess[i]);\n    }\n\n    // Check if the guess is correct\n    for (int i = 0; i < SEQUENCE_LENGTH; i++) {\n        if (guess[i] == sequence[i]) {\n            correct++;\n        }\n    }\n\n    if (correct == SEQUENCE_LENGTH) {\n        printf(\"You guessed correctly!\\n\");\n    } else {\n        printf(\"You guessed %d out of %d correctly.\\n\", correct, SEQUENCE_LENGTH);\n    }\n\n    return 0;\n}",
    "description": "In this memory game, the program generates a random sequence of numbers, which the player must memorize and enter correctly. The game compares the player's guess with the sequence and announces the result."
  },
  {
    "id": 519,
    "input": "Write a simple guessing game in C where the computer picks a random number between 1 and 100, and the player has to guess it.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    int number, guess, attempts = 0;\n    srand(time(0));\n    number = rand() % 100 + 1;\n\n    printf(\"Guess the number between 1 and 100: \");\n\n    do {\n        scanf(\"%d\", &guess);\n        attempts++;\n\n        if (guess > number) {\n            printf(\"Too high! Try again: \");\n        } else if (guess < number) {\n            printf(\"Too low! Try again: \");\n        } else {\n            printf(\"Congratulations! You've guessed the number in %d attempts.\", attempts);\n        }\n    } while (guess != number);\n\n    return 0;\n}",
    "description": "This is a number guessing game where the computer picks a random number between 1 and 100, and the player must guess it. The program provides feedback if the guess is too high or too low."
  },
  {
    "id": 520,
    "input": "Write a simple tic-tac-toe game in C where two players can play by inputting their moves on a 3x3 grid.",
    "output": "#include <stdio.h>\n\nchar board[3][3];\n\nvoid initializeBoard() {\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            board[i][j] = ' ';\n        }\n    }\n}\n\nvoid printBoard() {\n    printf(\"\\n\");\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            printf(\"%c\", board[i][j]);\n            if (j < 2) printf(\"|\");\n        }\n        printf(\"\\n\");\n        if (i < 2) printf(\"-----\\n\");\n    }\n    printf(\"\\n\");\n}\n\nint checkWin() {\n    for (int i = 0; i < 3; i++) {\n        if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ') return 1;\n        if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ') return 1;\n    }\n    if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ') return 1;\n    if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != ' ') return 1;\n    return 0;\n}\n\nint main() {\n    int row, col, player = 1, moves = 0;\n    initializeBoard();\n\n    while (1) {\n        printBoard();\n        printf(\"Player %d's turn. Enter row and column (0-2): \", player);\n        scanf(\"%d %d\", &row, &col);\n\n        if (row < 0 || row > 2 || col < 0 || col > 2 || board[row][col] != ' ') {\n            printf(\"Invalid move. Try again.\\n\");\n            continue;\n        }\n\n        board[row][col] = (player == 1) ? 'X' : 'O';\n        moves++;\n\n        if (checkWin()) {\n            printBoard();\n            printf(\"Player %d wins!\\n\", player);\n            break;\n        } else if (moves == 9) {\n            printBoard();\n            printf(\"It's a draw!\\n\");\n            break;\n        }\n\n        player = (player == 1) ? 2 : 1;\n    }\n\n    return 0;\n}",
    "description": "This is a simple Tic-Tac-Toe game where two players take turns to place 'X' and 'O' on a 3x3 grid. The game checks for a winner or a draw after each move."
  },
  {
    "id": 519,
    "input": "Write a simple guessing game in C where the computer picks a random number between 1 and 100, and the player has to guess it.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    int number, guess, attempts = 0;\n    srand(time(0));\n    number = rand() % 100 + 1;\n\n    printf(\"Guess the number between 1 and 100: \");\n\n    do {\n        scanf(\"%d\", &guess);\n        attempts++;\n\n        if (guess > number) {\n            printf(\"Too high! Try again: \");\n        } else if (guess < number) {\n            printf(\"Too low! Try again: \");\n        } else {\n            printf(\"Congratulations! You've guessed the number in %d attempts.\", attempts);\n        }\n    } while (guess != number);\n\n    return 0;\n}",
    "description": "This is a number guessing game where the computer picks a random number between 1 and 100, and the player must guess it. The program provides feedback if the guess is too high or too low."
  },
  {
    "id": 520,
    "input": "Write a simple tic-tac-toe game in C where two players can play by inputting their moves on a 3x3 grid.",
    "output": "#include <stdio.h>\n\nchar board[3][3];\n\nvoid initializeBoard() {\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            board[i][j] = ' ';\n        }\n    }\n}\n\nvoid printBoard() {\n    printf(\"\\n\");\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            printf(\"%c\", board[i][j]);\n            if (j < 2) printf(\"|\");\n        }\n        printf(\"\\n\");\n        if (i < 2) printf(\"-----\\n\");\n    }\n    printf(\"\\n\");\n}\n\nint checkWin() {\n    for (int i = 0; i < 3; i++) {\n        if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ') return 1;\n        if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ') return 1;\n    }\n    if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ') return 1;\n    if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != ' ') return 1;\n    return 0;\n}\n\nint main() {\n    int row, col, player = 1, moves = 0;\n    initializeBoard();\n\n    while (1) {\n        printBoard();\n        printf(\"Player %d's turn. Enter row and column (0-2): \", player);\n        scanf(\"%d %d\", &row, &col);\n\n        if (row < 0 || row > 2 || col < 0 || col > 2 || board[row][col] != ' ') {\n            printf(\"Invalid move. Try again.\\n\");\n            continue;\n        }\n\n        board[row][col] = (player == 1) ? 'X' : 'O';\n        moves++;\n\n        if (checkWin()) {\n            printBoard();\n            printf(\"Player %d wins!\\n\", player);\n            break;\n        } else if (moves == 9) {\n            printBoard();\n            printf(\"It's a draw!\\n\");\n            break;\n        }\n\n        player = (player == 1) ? 2 : 1;\n    }\n\n    return 0;\n}",
    "description": "This is a simple Tic-Tac-Toe game where two players take turns to place 'X' and 'O' on a 3x3 grid. The game checks for a winner or a draw after each move."
  },
  {
    "id": 521,
    "input": "Write a C program that prints numbers from 1 to 5 using a for loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    for (int i = 1; i <= 5; i++) {\n        printf(\"%d\\n\", i);\n    }\n    return 0;\n}",
    "description": "This program uses a for loop to print numbers from 1 to 5."
  },
  {
    "id": 522,
    "input": "Write a C program that prints numbers from 1 to 5 using a while loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int i = 1;\n    while (i <= 5) {\n        printf(\"%d\\n\", i);\n        i++;\n    }\n    return 0;\n}",
    "description": "This program uses a while loop to print numbers from 1 to 5."
  },
  {
    "id": 523,
    "input": "Write a C program that prints numbers from 1 to 5 using a do-while loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int i = 1;\n    do {\n        printf(\"%d\\n\", i);\n        i++;\n    } while (i <= 5);\n    return 0;\n}",
    "description": "This program uses a do-while loop to print numbers from 1 to 5."
  },
  {
    "id": 524,
    "input": "Write a C program that calculates the sum of numbers from 1 to 5 using a for loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int sum = 0;\n    for (int i = 1; i <= 5; i++) {\n        sum += i;\n    }\n    printf(\"Sum: %d\\n\", sum);\n    return 0;\n}",
    "description": "This program uses a for loop to calculate the sum of numbers from 1 to 5."
  },
  {
    "id": 525,
    "input": "Write a C program that calculates the sum of numbers from 1 to 5 using a while loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int sum = 0, i = 1;\n    while (i <= 5) {\n        sum += i;\n        i++;\n    }\n    printf(\"Sum: %d\\n\", sum);\n    return 0;\n}",
    "description": "This program uses a while loop to calculate the sum of numbers from 1 to 5."
  },
  {
    "id": 526,
    "input": "Write a C program that calculates the sum of numbers from 1 to 5 using a do-while loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int sum = 0, i = 1;\n    do {\n        sum += i;\n        i++;\n    } while (i <= 5);\n    printf(\"Sum: %d\\n\", sum);\n    return 0;\n}",
    "description": "This program uses a do-while loop to calculate the sum of numbers from 1 to 5."
  },
  {
    "id": 527,
    "input": "Write a C program that prints the odd numbers from 1 to 5 using a for loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    for (int i = 1; i <= 5; i += 2) {\n        printf(\"%d\\n\", i);\n    }\n    return 0;\n}",
    "description": "This program uses a for loop to print odd numbers from 1 to 5."
  },
  {
    "id": 528,
    "input": "Write a C program that prints the odd numbers from 1 to 5 using a while loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int i = 1;\n    while (i <= 5) {\n        printf(\"%d\\n\", i);\n        i += 2;\n    }\n    return 0;\n}",
    "description": "This program uses a while loop to print odd numbers from 1 to 5."
  },
  {
    "id": 529,
    "input": "Write a C program that prints the odd numbers from 1 to 5 using a do-while loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int i = 1;\n    do {\n        printf(\"%d\\n\", i);\n        i += 2;\n    } while (i <= 5);\n    return 0;\n}",
    "description": "This program uses a do-while loop to print odd numbers from 1 to 5."
  },
  {
    "id": 530,
    "input": "Write a C program that prints a countdown from 5 to 1 using a for loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    for (int i = 5; i >= 1; i--) {\n        printf(\"%d\\n\", i);\n    }\n    return 0;\n}",
    "description": "This program uses a for loop to print a countdown from 5 to 1."
  },
  {
    "id": 531,
    "input": "Write a C program that prints numbers from 1 to 10 using a for loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    for (int i = 1; i <= 10; i++) {\n        printf(\"%d\\n\", i);\n    }\n    return 0;\n}",
    "description": "This program uses a for loop to print numbers from 1 to 10."
  },
  {
    "id": 532,
    "input": "Write a C program that prints numbers from 1 to 10 using a while loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int i = 1;\n    while (i <= 10) {\n        printf(\"%d\\n\", i);\n        i++;\n    }\n    return 0;\n}",
    "description": "This program uses a while loop to print numbers from 1 to 10."
  },
  {
    "id": 533,
    "input": "Write a C program that prints numbers from 1 to 10 using a do-while loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int i = 1;\n    do {\n        printf(\"%d\\n\", i);\n        i++;\n    } while (i <= 10);\n    return 0;\n}",
    "description": "This program uses a do-while loop to print numbers from 1 to 10."
  },
  {
    "id": 534,
    "input": "Write a C program that calculates the sum of numbers from 1 to 10 using a for loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int sum = 0;\n    for (int i = 1; i <= 10; i++) {\n        sum += i;\n    }\n    printf(\"Sum: %d\\n\", sum);\n    return 0;\n}",
    "description": "This program uses a for loop to calculate the sum of numbers from 1 to 10."
  },
  {
    "id": 535,
    "input": "Write a C program that calculates the sum of numbers from 1 to 10 using a while loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int sum = 0, i = 1;\n    while (i <= 10) {\n        sum += i;\n        i++;\n    }\n    printf(\"Sum: %d\\n\", sum);\n    return 0;\n}",
    "description": "This program uses a while loop to calculate the sum of numbers from 1 to 10."
  },
  {
    "id": 536,
    "input": "Write a C program that calculates the sum of numbers from 1 to 10 using a do-while loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int sum = 0, i = 1;\n    do {\n        sum += i;\n        i++;\n    } while (i <= 10);\n    printf(\"Sum: %d\\n\", sum);\n    return 0;\n}",
    "description": "This program uses a do-while loop to calculate the sum of numbers from 1 to 10."
  },
  {
    "id": 537,
    "input": "Write a C program that prints the even numbers from 1 to 10 using a for loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    for (int i = 2; i <= 10; i += 2) {\n        printf(\"%d\\n\", i);\n    }\n    return 0;\n}",
    "description": "This program uses a for loop to print even numbers from 1 to 10."
  },
  {
    "id": 538,
    "input": "Write a C program that prints the even numbers from 1 to 10 using a while loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int i = 2;\n    while (i <= 10) {\n        printf(\"%d\\n\", i);\n        i += 2;\n    }\n    return 0;\n}",
    "description": "This program uses a while loop to print even numbers from 1 to 10."
  },
  {
    "id": 539,
    "input": "Write a C program that prints the even numbers from 1 to 10 using a do-while loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int i = 2;\n    do {\n        printf(\"%d\\n\", i);\n        i += 2;\n    } while (i <= 10);\n    return 0;\n}",
    "description": "This program uses a do-while loop to print even numbers from 1 to 10."
  },
  {
    "id": 540,
    "input": "Write a C program that prints a countdown from 10 to 1 using a for loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    for (int i = 10; i >= 1; i--) {\n        printf(\"%d\\n\", i);\n    }\n    return 0;\n}",
    "description": "This program uses a for loop to print a countdown from 10 to 1."
  },
  {
    "id": 541,
    "input": "Write a C program that checks if a number is greater than or equal to 10 but less than 20 using if-else statement.",
    "output": "#include <stdio.h>\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    if (number >= 10 && number < 20) {\n        printf(\"The number is between 10 and 20.\\n\");\n    } else {\n        printf(\"The number is not between 10 and 20.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks if the entered number is between 10 and 20 using an if-else statement."
  },
  {
    "id": 542,
    "input": "Write a C program that checks if a number is divisible by 5 using an if statement.",
    "output": "#include <stdio.h>\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    if (number % 5 == 0) {\n        printf(\"The number is divisible by 5.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks if the entered number is divisible by 5 using an if statement."
  },
  {
    "id": 543,
    "input": "Write a C program that checks if a number is a perfect square using an if-else statement.",
    "output": "#include <stdio.h>\n#include <math.h>\n\nint main() {\n    int number, sqrt_num;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    sqrt_num = sqrt(number);\n    if (sqrt_num * sqrt_num == number) {\n        printf(\"The number is a perfect square.\\n\");\n    } else {\n        printf(\"The number is not a perfect square.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks if the entered number is a perfect square using an if-else statement."
  },
  {
    "id": 544,
    "input": "Write a C program that checks if a number is positive, zero, or negative using if-else if-else statement.",
    "output": "#include <stdio.h>\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    if (number > 0) {\n        printf(\"The number is positive.\\n\");\n    } else if (number == 0) {\n        printf(\"The number is zero.\\n\");\n    } else {\n        printf(\"The number is negative.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks if the entered number is positive, zero, or negative using an if-else if-else statement."
  },
  {
    "id": 545,
    "input": "Write a C program that checks if a number is divisible by both 4 and 6 using an if statement.",
    "output": "#include <stdio.h>\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    if (number % 4 == 0 && number % 6 == 0) {\n        printf(\"The number is divisible by both 4 and 6.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks if the entered number is divisible by both 4 and 6 using an if statement."
  },
  {
    "id": 546,
    "input": "Write a C program that uses a switch statement to check for a specific grade (A, B, C, D, F) based on a letter input.",
    "output": "#include <stdio.h>\n\nint main() {\n    char grade;\n    printf(\"Enter the grade (A, B, C, D, F): \");\n    scanf(\"%c\", &grade);\n    switch (grade) {\n        case 'A':\n            printf(\"Excellent!\\n\");\n            break;\n        case 'B':\n            printf(\"Good!\\n\");\n            break;\n        case 'C':\n            printf(\"Fair.\\n\");\n            break;\n        case 'D':\n            printf(\"Poor.\\n\");\n            break;\n        case 'F':\n            printf(\"Fail.\\n\");\n            break;\n        default:\n            printf(\"Invalid grade.\\n\");\n            break;\n    }\n    return 0;\n}",
    "description": "This program uses a switch statement to output a message based on the letter grade (A, B, C, D, or F)."
  },
  {
    "id": 547,
    "input": "Write a C program that checks if a number is divisible by either 2 or 3 using an if statement.",
    "output": "#include <stdio.h>\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    if (number % 2 == 0 || number % 3 == 0) {\n        printf(\"The number is divisible by 2 or 3.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks if the entered number is divisible by either 2 or 3 using an if statement."
  },
  {
    "id": 548,
    "input": "Write a C program that checks if a number is a multiple of both 5 and 7 using an if-else statement.",
    "output": "#include <stdio.h>\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    if (number % 5 == 0 && number % 7 == 0) {\n        printf(\"The number is a multiple of both 5 and 7.\\n\");\n    } else {\n        printf(\"The number is not a multiple of both 5 and 7.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks if the entered number is a multiple of both 5 and 7 using an if-else statement."
  },
  {
    "id": 549,
    "input": "Write a C program that checks if a given number is within a certain range (between 50 and 100) using a switch statement.",
    "output": "#include <stdio.h>\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    switch (number) {\n        case 50 ... 100:\n            printf(\"The number is between 50 and 100.\\n\");\n            break;\n        default:\n            printf(\"The number is not between 50 and 100.\\n\");\n            break;\n    }\n    return 0;\n}",
    "description": "This program uses a switch statement to check if the number entered is within the range of 50 to 100."
  },
  {
    "id": 550,
    "input": "Write a C program that checks if a number is within a given interval (from 1 to 10) using an if-else statement.",
    "output": "#include <stdio.h>\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    if (number >= 1 && number <= 10) {\n        printf(\"The number is between 1 and 10.\\n\");\n    } else {\n        printf(\"The number is not between 1 and 10.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks if the entered number is between 1 and 10 using an if-else statement."
  },
  {
    "id": 551,
    "input": "Write a C program that checks if a number is even or odd and prints the result.",
    "output": "#include <stdio.h>\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    if (number % 2 == 0) {\n        printf(\"The number is even.\\n\");\n    } else {\n        printf(\"The number is odd.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks if the entered number is even or odd using an if-else statement."
  },
  {
    "id": 552,
    "input": "Write a C program that prints the first 10 natural numbers using a for loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    for (int i = 1; i <= 10; i++) {\n        printf(\"%d\\n\", i);\n    }\n    return 0;\n}",
    "description": "This program prints the first 10 natural numbers using a for loop."
  },
  {
    "id": 553,
    "input": "Write a C program that sums all the even numbers between 1 and 100 using a for loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int sum = 0;\n    for (int i = 2; i <= 100; i += 2) {\n        sum += i;\n    }\n    printf(\"The sum of even numbers between 1 and 100 is: %d\\n\", sum);\n    return 0;\n}",
    "description": "This program calculates the sum of even numbers between 1 and 100 using a for loop."
  },
  {
    "id": 554,
    "input": "Write a C program that checks if a number is divisible by both 2 and 3 using an if statement.",
    "output": "#include <stdio.h>\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    if (number % 2 == 0 && number % 3 == 0) {\n        printf(\"The number is divisible by both 2 and 3.\\n\");\n    } else {\n        printf(\"The number is not divisible by both 2 and 3.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks if the entered number is divisible by both 2 and 3 using an if statement."
  },
  {
    "id": 555,
    "input": "Write a C program that uses a while loop to find the factorial of a number.",
    "output": "#include <stdio.h>\n\nint main() {\n    int number, factorial = 1;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    while (number > 0) {\n        factorial *= number;\n        number--;\n    }\n    printf(\"The factorial is: %d\\n\", factorial);\n    return 0;\n}",
    "description": "This program calculates the factorial of a number using a while loop."
  },
  {
    "id": 556,
    "input": "Write a C program that prints the Fibonacci sequence up to the 10th term using a for loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int a = 0, b = 1, next;\n    printf(\"Fibonacci Sequence up to 10 terms: \\n\");\n    for (int i = 0; i < 10; i++) {\n        printf(\"%d \\n\", a);\n        next = a + b;\n        a = b;\n        b = next;\n    }\n    return 0;\n}",
    "description": "This program prints the Fibonacci sequence up to the 10th term using a for loop."
  },
  {
    "id": 557,
    "input": "Write a C program that checks if a number is within the range of 1 to 100 using if-else statement.",
    "output": "#include <stdio.h>\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    if (number >= 1 && number <= 100) {\n        printf(\"The number is within the range of 1 to 100.\\n\");\n    } else {\n        printf(\"The number is not within the range of 1 to 100.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks if the entered number is within the range of 1 to 100 using an if-else statement."
  },
  {
    "id": 558,
    "input": "Write a C program that uses a do-while loop to print the numbers from 1 to 5.",
    "output": "#include <stdio.h>\n\nint main() {\n    int i = 1;\n    do {\n        printf(\"%d\\n\", i);\n        i++;\n    } while (i <= 5);\n    return 0;\n}",
    "description": "This program uses a do-while loop to print the numbers from 1 to 5."
  },
  {
    "id": 559,
    "input": "Write a C program that sums all the odd numbers between 1 and 100 using a while loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int sum = 0, i = 1;\n    while (i <= 100) {\n        if (i % 2 != 0) {\n            sum += i;\n        }\n        i++;\n    }\n    printf(\"The sum of odd numbers between 1 and 100 is: %d\\n\", sum);\n    return 0;\n}",
    "description": "This program calculates the sum of odd numbers between 1 and 100 using a while loop."
  },
  {
    "id": 560,
    "input": "Write a C program that checks if a number is divisible by 3 or 5 using an if-else statement.",
    "output": "#include <stdio.h>\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    if (number % 3 == 0 || number % 5 == 0) {\n        printf(\"The number is divisible by 3 or 5.\\n\");\n    } else {\n        printf(\"The number is not divisible by 3 or 5.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks if the entered number is divisible by 3 or 5 using an if-else statement."
  },
  {
    "id": 561,
    "input": "Write a C program that prints all the prime numbers between 1 and 50 using a for loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int i, j, isPrime;\n    for (i = 2; i <= 50; i++) {\n        isPrime = 1;\n        for (j = 2; j <= i / 2; j++) {\n            if (i % j == 0) {\n                isPrime = 0;\n                break;\n            }\n        }\n        if (isPrime) {\n            printf(\"%d \\n\", i);\n        }\n    }\n    return 0;\n}",
    "description": "This program prints all prime numbers between 1 and 50 using nested for loops."
  },
  {
    "id": 562,
    "input": "Write a C program that calculates the sum of numbers from 1 to 10 using a while loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int sum = 0, i = 1;\n    while (i <= 10) {\n        sum += i;\n        i++;\n    }\n    printf(\"The sum of numbers from 1 to 10 is: %d\\n\", sum);\n    return 0;\n}",
    "description": "This program calculates the sum of numbers from 1 to 10 using a while loop."
  },
  {
    "id": 563,
    "input": "Write a C program that prints the multiplication table of 5 using a for loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int i;\n    for (i = 1; i <= 10; i++) {\n        printf(\"5 x %d = %d\\n\", i, 5 * i);\n    }\n    return 0;\n}",
    "description": "This program prints the multiplication table of 5 using a for loop."
  },
  {
    "id": 564,
    "input": "Write a C program that calculates the sum of even numbers from 1 to 50 using a for loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int sum = 0;\n    for (int i = 2; i <= 50; i += 2) {\n        sum += i;\n    }\n    printf(\"The sum of even numbers from 1 to 50 is: %d\\n\", sum);\n    return 0;\n}",
    "description": "This program calculates the sum of even numbers from 1 to 50 using a for loop."
  },
  {
    "id": 565,
    "input": "Write a C program that checks if a number is positive, negative, or zero using an if-else statement.",
    "output": "#include <stdio.h>\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    if (number > 0) {\n        printf(\"The number is positive.\\n\");\n    } else if (number < 0) {\n        printf(\"The number is negative.\\n\");\n    } else {\n        printf(\"The number is zero.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks if the entered number is positive, negative, or zero using if-else statements."
  },
  {
    "id": 566,
    "input": "Write a C program that uses a do-while loop to print the numbers from 10 to 1.",
    "output": "#include <stdio.h>\n\nint main() {\n    int i = 10;\n    do {\n        printf(\"%d\\n\", i);\n        i--;\n    } while (i >= 1);\n    return 0;\n}",
    "description": "This program uses a do-while loop to print the numbers from 10 to 1."
  },
  {
    "id": 567,
    "input": "Write a C program that counts the number of digits in a number using a while loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int number, count = 0;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    while (number != 0) {\n        count++;\n        number /= 10;\n    }\n    printf(\"The number of digits is: %d\\n\", count);\n    return 0;\n}",
    "description": "This program counts the number of digits in a given number using a while loop."
  },
  {
    "id": 568,
    "input": "Write a C program that prints the first 10 terms of the Fibonacci sequence using a while loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int a = 0, b = 1, next, i = 0;\n    while (i < 10) {\n        printf(\"%d\\n\", a);\n        next = a + b;\n        a = b;\n        b = next;\n        i++;\n    }\n    return 0;\n}",
    "description": "This program prints the first 10 terms of the Fibonacci sequence using a while loop."
  },
  {
    "id": 569,
    "input": "Write a C program that checks if a number is divisible by both 3 and 5 using an if statement.",
    "output": "#include <stdio.h>\n\nint main() {\n    int number;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    if (number % 3 == 0 && number % 5 == 0) {\n        printf(\"The number is divisible by both 3 and 5.\\n\");\n    } else {\n        printf(\"The number is not divisible by both 3 and 5.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks if the entered number is divisible by both 3 and 5 using an if statement."
  },
  {
    "id": 570,
    "input": "Write a C program that calculates the factorial of a number using a for loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int number, factorial = 1;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &number);\n    for (int i = 1; i <= number; i++) {\n        factorial *= i;\n    }\n    printf(\"The factorial is: %d\\n\", factorial);\n    return 0;\n}",
    "description": "This program calculates the factorial of a given number using a for loop."
  },
  {
    "id": 571,
    "input": "Write a C program that prints 'Hello, World!' to the console.",
    "output": "#include <stdio.h>\n\nint main() {\n    printf(\"Hello, World!\\n\");\n    return 0;\n}",
    "description": "This program prints 'Hello, World!' to the console."
  },
  {
    "id": 572,
    "input": "Write a C program that takes two integers as input and prints their sum.",
    "output": "#include <stdio.h>\n\nint main() {\n    int num1, num2;\n    printf(\"Enter two numbers: \");\n    scanf(\"%d %d\", &num1, &num2);\n    printf(\"The sum is: %d\\n\", num1 + num2);\n    return 0;\n}",
    "description": "This program takes two integers as input and prints their sum."
  },
  {
    "id": 573,
    "input": "Write a C program that takes a number as input and prints if it is even or odd.",
    "output": "#include <stdio.h>\n\nint main() {\n    int num;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n    if (num % 2 == 0) {\n        printf(\"The number is even.\\n\");\n    } else {\n        printf(\"The number is odd.\\n\");\n    }\n    return 0;\n}",
    "description": "This program takes a number as input and prints whether it is even or odd."
  },
  {
    "id": 574,
    "input": "Write a C program that takes an integer input and prints its absolute value.",
    "output": "#include <stdio.h>\n\nint main() {\n    int num;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n    if (num < 0) {\n        num = -num;\n    }\n    printf(\"The absolute value is: %d\\n\", num);\n    return 0;\n}",
    "description": "This program takes an integer as input and prints its absolute value."
  },
  {
    "id": 575,
    "input": "Write a C program that calculates the area of a rectangle given its length and width.",
    "output": "#include <stdio.h>\n\nint main() {\n    float length, width, area;\n    printf(\"Enter length and width of the rectangle: \");\n    scanf(\"%f %f\", &length, &width);\n    area = length * width;\n    printf(\"The area of the rectangle is: %.2f\\n\", area);\n    return 0;\n}",
    "description": "This program calculates the area of a rectangle given its length and width."
  },
  {
    "id": 576,
    "input": "Write a C program that checks if a number is positive, negative, or zero.",
    "output": "#include <stdio.h>\n\nint main() {\n    int num;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n    if (num > 0) {\n        printf(\"The number is positive.\\n\");\n    } else if (num < 0) {\n        printf(\"The number is negative.\\n\");\n    } else {\n        printf(\"The number is zero.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks if a number is positive, negative, or zero."
  },
  {
    "id": 577,
    "input": "Write a C program that swaps the values of two variables using a temporary variable.",
    "output": "#include <stdio.h>\n\nint main() {\n    int a, b, temp;\n    printf(\"Enter two numbers: \");\n    scanf(\"%d %d\", &a, &b);\n    temp = a;\n    a = b;\n    b = temp;\n    printf(\"After swapping: a = %d, b = %d\\n\", a, b);\n    return 0;\n}",
    "description": "This program swaps the values of two variables using a temporary variable."
  },
  {
    "id": 578,
    "input": "Write a C program that calculates the factorial of a number using a recursive function.",
    "output": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nint main() {\n    int num;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n    printf(\"The factorial of %d is: %d\\n\", num, factorial(num));\n    return 0;\n}",
    "description": "This program calculates the factorial of a number using a recursive function."
  },
  {
    "id": 579,
    "input": "Write a C program that checks if a given year is a leap year.",
    "output": "#include <stdio.h>\n\nint main() {\n    int year;\n    printf(\"Enter a year: \");\n    scanf(\"%d\", &year);\n    if ((year % 400 == 0) || ((year % 4 == 0) && (year % 100 != 0))) {\n        printf(\"The year is a leap year.\\n\");\n    } else {\n        printf(\"The year is not a leap year.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks if a given year is a leap year."
  },
  {
    "id": 580,
    "input": "Write a C program that prints the multiplication table of a number entered by the user.",
    "output": "#include <stdio.h>\n\nint main() {\n    int num;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n    for (int i = 1; i <= 10; i++) {\n        printf(\"%d x %d = %d\\n\", num, i, num * i);\n    }\n    return 0;\n}",
    "description": "This program prints the multiplication table of a number entered by the user."
  },
  {
    "id": 581,
    "input": "Write a C program that calculates the sum of digits of a number.",
    "output": "#include <stdio.h>\n\nint main() {\n    int num, sum = 0;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n    while (num != 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    printf(\"The sum of digits is: %d\\n\", sum);\n    return 0;\n}",
    "description": "This program calculates the sum of digits of a given number."
  },
  {
    "id": 582,
    "input": "Write a C program that reverses the digits of a number.",
    "output": "#include <stdio.h>\n\nint main() {\n    int num, reversed = 0;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n    while (num != 0) {\n        reversed = reversed * 10 + num % 10;\n        num /= 10;\n    }\n    printf(\"The reversed number is: %d\\n\", reversed);\n    return 0;\n}",
    "description": "This program reverses the digits of a given number."
  },
  {
    "id": 583,
    "input": "Write a C program that checks if a number is prime.",
    "output": "#include <stdio.h>\n\nint main() {\n    int num, isPrime = 1;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n    for (int i = 2; i <= num / 2; i++) {\n        if (num % i == 0) {\n            isPrime = 0;\n            break;\n        }\n    }\n    if (isPrime) {\n        printf(\"The number is prime.\\n\");\n    } else {\n        printf(\"The number is not prime.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks if a given number is prime."
  },
  {
    "id": 584,
    "input": "Write a C program that calculates the Fibonacci sequence up to a given number.",
    "output": "#include <stdio.h>\n\nint main() {\n    int n, t1 = 0, t2 = 1, nextTerm;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &n);\n    printf(\"Fibonacci sequence: \");\n    for (int i = 1; i <= n; ++i) {\n        if (i == 1) {\n            printf(\"%d, \", t1);\n} else if (i == 2) {\n            printf(\"%d, \", t2);\n} else {\n            nextTerm = t1 + t2;\n            t1 = t2;\n            t2 = nextTerm;\n            printf(\"%d, \", nextTerm);\n        }\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "description": "This program calculates the Fibonacci sequence up to the given number."
  },
  {
    "id": 585,
    "input": "Write a C program that finds the greatest common divisor (GCD) of two numbers.",
    "output": "#include <stdio.h>\n\nint main() {\n    int a, b;\n    printf(\"Enter two numbers: \");\n    scanf(\"%d %d\", &a, &b);\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    printf(\"The GCD is: %d\\n\", a);\n    return 0;\n}",
    "description": "This program calculates the greatest common divisor (GCD) of two numbers."
  },
  {
    "id": 586,
    "input": "Write a C program that calculates the LCM (Least Common Multiple) of two numbers.",
    "output": "#include <stdio.h>\n\nint main() {\n    int a, b;\n    printf(\"Enter two numbers: \");\n    scanf(\"%d %d\", &a, &b);\n    int lcm = (a * b) / gcd(a, b);\n    printf(\"The LCM is: %d\\n\", lcm);\n    return 0;\n}\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}",
    "description": "This program calculates the least common multiple (LCM) of two numbers using GCD."
  },
  {
    "id": 587,
    "input": "Write a C program that prints the multiplication table of a number using a while loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int num, i = 1;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n    while (i <= 10) {\n        printf(\"%d x %d = %d\\n\", num, i, num * i);\n        i++;\n    }\n    return 0;\n}",
    "description": "This program prints the multiplication table of a number using a while loop."
  },
  {
    "id": 588,
    "input": "Write a C program that finds the factorial of a number using a for loop.",
    "output": "#include <stdio.h>\n\nint main() {\n    int num, factorial = 1;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n    for (int i = 1; i <= num; i++) {\n        factorial *= i;\n    }\n    printf(\"The factorial is: %d\\n\", factorial);\n    return 0;\n}",
    "description": "This program calculates the factorial of a number using a for loop."
  },
  {
    "id": 589,
    "input": "Write a C program that prints a pyramid of stars based on the number of rows entered by the user.",
    "output": "#include <stdio.h>\n\nint main() {\n    int rows;\n    printf(\"Enter the number of rows: \");\n    scanf(\"%d\", &rows);\n    for (int i = 1; i <= rows; i++) {\n        for (int j = 1; j <= rows - i; j++) {\n            printf(\" \");\n        }\n        for (int k = 1; k <= 2 * i - 1; k++) {\n            printf(\"*\");\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "description": "This program prints a pyramid of stars based on the number of rows entered by the user."
  },
  {
    "id": 590,
    "input": "Write a C program that takes a string as input and counts the number of vowels.",
    "output": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str[100];\n    int count = 0;\n    printf(\"Enter a string: \");\n    fgets(str, sizeof(str), stdin);\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == 'a' || str[i] == 'e' || str[i] == 'i' || str[i] == 'o' || str[i] == 'u' ||\n            str[i] == 'A' || str[i] == 'E' || str[i] == 'I' || str[i] == 'O' || str[i] == 'U') {\n            count++;\n        }\n    }\n    printf(\"The number of vowels is: %d\\n\", count);\n    return 0;\n}",
    "description": "This program takes a string as input and counts the number of vowels."
  },
  {
    "id": 591,
    "input": "Write a C program that counts the number of words in a sentence.",
    "output": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str[100];\n    int count = 0;\n    printf(\"Enter a sentence: \");\n    fgets(str, sizeof(str), stdin);\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == ' ' || str[i] == '\\n') {\n            count++;\n        }\n    }\n    printf(\"The number of words is: %d\\n\", count + 1);\n    return 0;\n}",
    "description": "This program counts the number of words in a sentence entered by the user."
  },
  {
    "id": 592,
    "input": "Write a C program that replaces all occurrences of a character in a string with another character.",
    "output": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str[100], oldChar, newChar;\n    printf(\"Enter a string: \");\n    fgets(str, sizeof(str), stdin);\n    printf(\"Enter the character to replace: \");\n    scanf(\"%c\", &oldChar);\n    getchar();\n    printf(\"Enter the new character: \");\n    scanf(\"%c\", &newChar);\n    for (int i = 0; i < strlen(str); i++) {\n        if (str[i] == oldChar) {\n            str[i] = newChar;\n        }\n    }\n    printf(\"The modified string is: %s\\n\", str);\n    return 0;\n}",
    "description": "This program replaces all occurrences of a character in a string with another character."
  },
  {
    "id": 593,
    "input": "Write a C program that checks if a number is a palindrome.",
    "output": "#include <stdio.h>\n\nint main() {\n    int num, reversed = 0, original, remainder;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &num);\n    original = num;\n    while (num != 0) {\n        remainder = num % 10;\n        reversed = reversed * 10 + remainder;\n        num /= 10;\n    }\n    if (original == reversed) {\n        printf(\"The number is a palindrome.\\n\");\n    } else {\n        printf(\"The number is not a palindrome.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks if a number is a palindrome."
  },
  {
    "id": 594,
    "input": "Write a C program that finds the largest of three numbers.",
    "output": "#include <stdio.h>\n\nint main() {\n    int a, b, c;\n    printf(\"Enter three numbers: \");\n    scanf(\"%d %d %d\", &a, &b, &c);\n    if (a >= b && a >= c) {\n        printf(\"The largest number is: %d\\n\", a);\n    } else if (b >= a && b >= c) {\n        printf(\"The largest number is: %d\\n\", b);\n    } else {\n        printf(\"The largest number is: %d\\n\", c);\n    }\n    return 0;\n}",
    "description": "This program finds the largest of three numbers."
  },
  {
    "id": 595,
    "input": "Write a C program that finds the smallest of three numbers.",
    "output": "#include <stdio.h>\n\nint main() {\n    int a, b, c;\n    printf(\"Enter three numbers: \");\n    scanf(\"%d %d %d\", &a, &b, &c);\n    if (a <= b && a <= c) {\n        printf(\"The smallest number is: %d\\n\", a);\n    } else if (b <= a && b <= c) {\n        printf(\"The smallest number is: %d\\n\", b);\n    } else {\n        printf(\"The smallest number is: %d\\n\", c);\n    }\n    return 0;\n}",
    "description": "This program finds the smallest of three numbers."
  },
  {
    "id": 596,
    "input": "Write a C program that converts a decimal number to binary.",
    "output": "#include <stdio.h>\n\nint main() {\n    int num, binary[32], i = 0;\n    printf(\"Enter a decimal number: \");\n    scanf(\"%d\", &num);\n    while (num > 0) {\n        binary[i] = num % 2;\n        num = num / 2;\n        i++; \n    }\n    printf(\"Binary representation: \");\n    for (int j = i - 1; j >= 0; j--) {\n        printf(\"%d\", binary[j]);\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "description": "This program converts a decimal number to binary."
  },
  {
    "id": 597,
    "input": "Write a C program that finds the length of a string without using the strlen() function.",
    "output": "#include <stdio.h>\n\nint main() {\n    char str[100];\n    int length = 0;\n    printf(\"Enter a string: \");\n    fgets(str, sizeof(str), stdin);\n    while (str[length] != '\\0') {\n        length++;\n    }\n    printf(\"The length of the string is: %d\\n\", length);\n    return 0;\n}",
    "description": "This program finds the length of a string without using the strlen() function."
  },
  {
    "id": 598,
    "input": "Write a C program that prints a triangle of numbers.",
    "output": "#include <stdio.h>\n\nint main() {\n    int rows;\n    printf(\"Enter the number of rows: \");\n    scanf(\"%d\", &rows);\n    for (int i = 1; i <= rows; i++) {\n        for (int j = 1; j <= i; j++) {\n            printf(\"%d \", j);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "description": "This program prints a triangle of numbers based on the number of rows entered by the user."
  },
  {
    "id": 599,
    "input": "Write a C program that checks if a string is a palindrome.",
    "output": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char str[100];\n    int length, flag = 0;\n    printf(\"Enter a string: \");\n    fgets(str, sizeof(str), stdin);\n    length = strlen(str) - 1;  // Exclude the newline character\n    for (int i = 0; i < length / 2; i++) {\n        if (str[i] != str[length - i - 1]) {\n            flag = 1;\n            break;\n        }\n    }\n    if (flag) {\n        printf(\"The string is not a palindrome.\\n\");\n    } else {\n        printf(\"The string is a palindrome.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks if a given string is a palindrome."
  },
  {
    "id": 600,
    "input": "Write a C program that finds the sum of even numbers from 1 to n.",
    "output": "#include <stdio.h>\n\nint main() {\n    int n, sum = 0;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &n);\n    for (int i = 2; i <= n; i += 2) {\n        sum += i;\n    }\n    printf(\"The sum of even numbers from 1 to %d is: %d\\n\", n, sum);\n    return 0;\n}",
    "description": "This program finds the sum of all even numbers from 1 to a given number n."
  }
]