[
  {
    "id": 201,
    "input": "Write a function in C that calculates the sum of two integers passed as arguments.",
    "output": "#include <stdio.h>\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint main(void) {\n    int num1, num2;\n    printf(\"Enter two integers: \");\n    scanf(\"%d %d\", &num1, &num2);\n    printf(\"%d + %d = %d\\n\", num1, num2, add(num1, num2));\n    return 0;\n}",
    "description": "Defines an `add` function that takes two integers as arguments and returns their sum. In the `main` function, it prompts the user to input two integers and displays the result."
  },
  {
    "id": 202,
    "input": "Write a recursive function in C to calculate the factorial of an integer passed as an argument.",
    "output": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nint main(void) {\n    int num;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"%d! = %d\\n\", num, factorial(num));\n    return 0;\n}",
    "description": "Uses a recursive function `factorial` to calculate the factorial of an integer `n`. If `n == 0`, it returns 1; otherwise, it recursively calculates `n * factorial(n - 1)`."
  },
  {
    "id": 203,
    "input": "Write a function in C to find the maximum value in an array.",
    "output": "#include <stdio.h>\n\nint findMax(int arr[], int size) {\n    int max = arr[0];\n    for (int i = 1; i < size; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}\n\nint main(void) {\n    int arr[] = {3, 5, 7, 2, 8, 1};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    printf(\"Maximum value is: %d\\n\", findMax(arr, size));\n    return 0;\n}",
    "description": "Defines a function `findMax` to find the maximum value in an array. It iterates through each element in the array, updating the maximum value."
  },
  {
    "id": 204,
    "input": "Write a recursive function in C to calculate the Fibonacci sequence.",
    "output": "#include <stdio.h>\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}\n\nint main(void) {\n    int n;\n    printf(\"Which term in the Fibonacci sequence do you want to calculate?: \");\n    scanf(\"%d\", &n);\n    printf(\"The %dth Fibonacci number is: %d\\n\", n, fibonacci(n));\n    return 0;\n}",
    "description": "Defines a recursive function `fibonacci` to calculate the `n`th Fibonacci number. It returns `n` when `n <= 1` and recursively calculates the value otherwise."
  },
  {
    "id": 205,
    "input": "Write a recursive function in C to calculate the greatest common divisor (GCD) of two integers.",
    "output": "#include <stdio.h>\n\nint gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}\n\nint main(void) {\n    int num1, num2;\n    printf(\"Enter two integers: \");\n    scanf(\"%d %d\", &num1, &num2);\n    printf(\"The greatest common divisor is: %d\\n\", gcd(num1, num2));\n    return 0;\n}",
    "description": "Defines a recursive function `gcd` to calculate the greatest common divisor using Euclid's algorithm. If `b == 0`, it returns `a`; otherwise, it recursively calculates `gcd(b, a % b)`."
  },
  {
    "id": 206,
    "input": "Write a function in C that accepts a list of integers as an argument and calculates their sum.",
    "output": "#include <stdio.h>\n\nint sum(int arr[], int size) {\n    int total = 0;\n    for (int i = 0; i < size; i++) {\n        total += arr[i];\n    }\n    return total;\n}\n\nint main(void) {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    printf(\"The sum of the array is: %d\\n\", sum(arr, size));\n    return 0;\n}",
    "description": "Defines a function `sum` that calculates the sum of all integers in an array. It iterates through each element, adding it to the total sum."
  },
  {
    "id": 207,
    "input": "Write a recursive function in C that displays a message a specified number of times.",
    "output": "#include <stdio.h>\n\nvoid printMessage(int n) {\n    if (n <= 0) {\n        return;\n    }\n    printf(\"Displaying the message.\\n\");\n    printMessage(n - 1);\n}\n\nint main(void) {\n    int num;\n    printf(\"How many times do you want to display the message?: \");\n    scanf(\"%d\", &num);\n    printMessage(num);\n    return 0;\n}",
    "description": "Defines a recursive function `printMessage` that displays a message a specified number of times. It recurses until `n` becomes 0 or less."
  },
  {
    "id": 208,
    "input": "Write a function in C that accepts two integers as arguments and calculates their least common multiple (LCM).",
    "output": "#include <stdio.h>\n\nint gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}\n\nint lcm(int a, int b) {\n    return (a * b) / gcd(a, b);\n}\n\nint main(void) {\n    int num1, num2;\n    printf(\"Enter two integers: \");\n    scanf(\"%d %d\", &num1, &num2);\n    printf(\"The least common multiple is: %d\\n\", lcm(num1, num2));\n    return 0;\n}",
    "description": "Defines a function `lcm` to calculate the least common multiple using the formula `lcm(a, b) = (a * b) / gcd(a, b)`, reusing the `gcd` function."
  },
  {
    "id": 209,
    "input": "Write a recursive function in C to find the minimum value in a list of integers.",
    "output": "#include <stdio.h>\n\nint findMin(int arr[], int size) {\n    if (size == 1) {\n        return arr[0];\n    }\n    int min = findMin(arr + 1, size - 1);\n    return (arr[0] < min) ? arr[0] : min;\n}\n\nint main(void) {\n    int arr[] = {7, 2, 9, 3, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    printf(\"The minimum value is: %d\\n\", findMin(arr, size));\n    return 0;\n}",
    "description": "Defines a recursive function `findMin` to find the minimum value in an array. It compares the first element with the recursively found minimum value and returns the smaller one."
  },
  {
    "id": 210,
    "input": "Write a function in C that accepts an array of integers and counts how many are even and how many are odd.",
    "output": "#include <stdio.h>\n\nvoid countEvenOdd(int arr[], int size, int *evenCount, int *oddCount) {\n    *evenCount = 0;\n    *oddCount = 0;\n    for (int i = 0; i < size; i++) {\n        if (arr[i] % 2 == 0) {\n            (*evenCount)++;\n        } else {\n            (*oddCount)++;\n        }\n    }\n}\n\nint main(void) {\n    int arr[] = {1, 2, 3, 4, 5, 6};\n    int evenCount, oddCount;\n    int size = sizeof(arr) / sizeof(arr[0]);\n    countEvenOdd(arr, size, &evenCount, &oddCount);\n    printf(\"Even count: %d, Odd count: %d\\n\", evenCount, oddCount);\n    return 0;\n}",
    "description": "Defines a function `countEvenOdd` that counts the number of even and odd integers in an array. It uses pointers to return the counts of even and odd numbers."
  },
  {
    "id": 211,
    "input": "In C language, write a function that calculates the sum of two integers passed as arguments, including the function prototype declaration.",
    "output": "#include <stdio.h>\n\nint add(int, int);  // Function prototype declaration\n\nint main(void) {\n    int num1, num2;\n    printf(\"Please enter two integers: \");\n    scanf(\"%d %d\", &num1, &num2);\n    printf(\"%d + %d = %d\\n\", num1, num2, add(num1, num2));\n    return 0;\n}\n\nint add(int a, int b) {\n    return a + b;\n}",
    "description": "This function `add` takes two integers as arguments and returns their sum. The function prototype declaration is made above the `main` function before the `add` function is called."
  },
  {
    "id": 212,
    "input": "In C language, write a recursive function that calculates the factorial of an integer passed as an argument, including the function prototype declaration.",
    "output": "#include <stdio.h>\n\nint factorial(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Please enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"%d! = %d\\n\", num, factorial(num));\n    return 0;\n}\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}",
    "description": "This is a recursive function `factorial` that calculates the factorial of an integer. The function prototype declaration is placed above the `main` function."
  },
  {
    "id": 213,
    "input": "In C language, write a function that finds the maximum value in an array, including the function prototype declaration.",
    "output": "#include <stdio.h>\n\nint findMax(int[], int);  // Function prototype declaration\n\nint main(void) {\n    int arr[] = {3, 5, 7, 2, 8, 1};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    printf(\"The maximum value is: %d\\n\", findMax(arr, size));\n    return 0;\n}\n\nint findMax(int arr[], int size) {\n    int max = arr[0];\n    for (int i = 1; i < size; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}",
    "description": "This function `findMax` finds the maximum value in an array. The function prototype declaration is made above the `main` function."
  },
  {
    "id": 214,
    "input": "In C language, write a recursive function that calculates the Fibonacci sequence, including the function prototype declaration.",
    "output": "#include <stdio.h>\n\nint fibonacci(int);  // Function prototype declaration\n\nint main(void) {\n    int n;\n    printf(\"Which term of the Fibonacci sequence would you like to find?: \");\n    scanf(\"%d\", &n);\n    printf(\"The %dth Fibonacci number is: %d\\n\", n, fibonacci(n));\n    return 0;\n}\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}",
    "description": "This program uses a recursive function `fibonacci` to calculate the Fibonacci sequence. The function prototype declaration is written above the `main` function."
  },
  {
    "id": 215,
    "input": "In C language, write a function that finds the greatest common divisor (GCD) of two integers, including the function prototype declaration.",
    "output": "#include <stdio.h>\n\nint gcd(int, int);  // Function prototype declaration\n\nint main(void) {\n    int num1, num2;\n    printf(\"Please enter two integers: \");\n    scanf(\"%d %d\", &num1, &num2);\n    printf(\"The greatest common divisor of %d and %d is: %d\\n\", num1, num2, gcd(num1, num2));\n    return 0;\n}\n\nint gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    } else {\n        return gcd(b, a % b);\n    }\n}",
    "description": "This function `gcd` uses recursion to find the greatest common divisor of two integers. The function prototype declaration is placed above the `main` function."
  },
  {
    "id": 216,
    "input": "In C language, write a function that compares two strings to check if they are the same, including the function prototype declaration.",
    "output": "#include <stdio.h>\n\nint compareStrings(char[], char[]);  // Function prototype declaration\n\nint main(void) {\n    char str1[100], str2[100];\n    printf(\"Please enter two strings: \");\n    scanf(\"%s %s\", str1, str2);\n    if (compareStrings(str1, str2) == 0) {\n        printf(\"The strings are the same.\\n\");\n    } else {\n        printf(\"The strings are different.\\n\");\n    }\n    return 0;\n}\n\nint compareStrings(char str1[], char str2[]) {\n    int i = 0;\n    while (str1[i] != '\\0' && str2[i] != '\\0') {\n        if (str1[i] != str2[i]) {\n            return 1;\n        }\n        i++;\n    }\n    return (str1[i] == str2[i]) ? 0 : 1;\n}",
    "description": "This function `compareStrings` compares two strings and checks if they are the same or different. The function prototype declaration is placed above the `main` function."
  },
  {
    "id": 217,
    "input": "In C language, write a function that reverses a string, including the function prototype declaration.",
    "output": "#include <stdio.h>\n\nvoid reverseString(char[]);  // Function prototype declaration\n\nint main(void) {\n    char str[100];\n    printf(\"Please enter a string: \");\n    scanf(\"%s\", str);\n    reverseString(str);\n    printf(\"The reversed string is: %s\\n\", str);\n    return 0;\n}\n\nvoid reverseString(char str[]) {\n    int len = 0, i;\n    while (str[len] != '\\0') {\n        len++;\n    }\n    for (i = 0; i < len / 2; i++) {\n        char temp = str[i];\n        str[i] = str[len - 1 - i];\n        str[len - 1 - i] = temp;\n    }\n}",
    "description": "This function `reverseString` reverses a given string. The function prototype declaration is placed above the `main` function."
  },
  {
    "id": 218,
    "input": "In C language, write a function that reverses the elements of an array, including the function prototype declaration.",
    "output": "#include <stdio.h>\n\nvoid reverseArray(int[], int);  // Function prototype declaration\n\nint main(void) {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    reverseArray(arr, size);\n    printf(\"Reversed array: \");\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n\nvoid reverseArray(int arr[], int size) {\n    for (int i = 0; i < size / 2; i++) {\n        int temp = arr[i];\n        arr[i] = arr[size - 1 - i];\n        arr[size - 1 - i] = temp;\n    }\n}",
    "description": "This function `reverseArray` reverses the elements of an array. The function prototype declaration is placed above the `main` function."
  },
  {
    "id": 219,
    "input": "In C language, write a function that swaps two integers, including the function prototype declaration.",
    "output": "#include <stdio.h>\n\nvoid swap(int*, int*);  // Function prototype declaration\n\nint main(void) {\n    int num1 = 5, num2 = 10;\n    printf(\"Before swapping: num1 = %d, num2 = %d\\n\", num1, num2);\n    swap(&num1, &num2);\n    printf(\"After swapping: num1 = %d, num2 = %d\\n\", num1, num2);\n    return 0;\n}\n\nvoid swap(int* a, int* b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}",
    "description": "This function `swap` swaps two integers using pointers. The function prototype declaration is placed above the `main` function."
  },
  {
    "id": 220,
    "input": "In C language, write a function that checks whether a given number is prime, including the function prototype declaration.",
    "output": "#include <stdio.h>\n\nint isPrime(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Please enter an integer: \");\n    scanf(\"%d\", &num);\n    if (isPrime(num)) {\n        printf(\"%d is a prime number.\\n\", num);\n    } else {\n        printf(\"%d is not a prime number.\\n\", num);\n    }\n    return 0;\n}\n\nint isPrime(int n) {\n    if (n <= 1) {\n        return 0;\n    }\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "description": "This function `isPrime` checks whether a given integer is a prime number or not. The function prototype declaration is placed above the `main` function."
  },
  {
    "id": 221,
    "input": "Create a function in C language that calculates the sum of two integers passed as arguments.",
    "output": "#include <stdio.h>\n\nint add(int, int);  // Function prototype declaration\n\nint main(void) {\n    int num1, num2;\n    printf(\"Please enter two integers: \");\n    scanf(\"%d %d\", &num1, &num2);\n    printf(\"%d + %d = %d\\n\", num1, num2, add(num1, num2));\n    return 0;\n}\n\nint add(int a, int b) {\n    return a + b;\n}",
    "description": "Creates an `add` function that adds two integers and outputs the result."
  },
  {
    "id": 222,
    "input": "Create a function in C language that calculates the product of two integers passed as arguments.",
    "output": "#include <stdio.h>\n\nint multiply(int, int);  // Function prototype declaration\n\nint main(void) {\n    int num1, num2;\n    printf(\"Please enter two integers: \");\n    scanf(\"%d %d\", &num1, &num2);\n    printf(\"%d * %d = %d\\n\", num1, num2, multiply(num1, num2));\n    return 0;\n}\n\nint multiply(int a, int b) {\n    return a * b;\n}",
    "description": "Creates a `multiply` function that multiplies two integers and outputs the result."
  },
  {
    "id": 223,
    "input": "Create a function in C language that recursively calculates the factorial of an integer passed as an argument.",
    "output": "#include <stdio.h>\n\nint factorial(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Please enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"%d! = %d\\n\", num, factorial(num));\n    return 0;\n}\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}",
    "description": "Creates a `factorial` function that calculates the factorial of an integer using recursion."
  },
  {
    "id": 224,
    "input": "Create a function in C language that recursively determines whether an integer passed as an argument is a prime number.",
    "output": "#include <stdio.h>\n\nint isPrime(int, int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Please enter an integer: \");\n    scanf(\"%d\", &num);\n    if (isPrime(num, 2)) {\n        printf(\"%d is a prime number.\\n\", num);\n    } else {\n        printf(\"%d is not a prime number.\\n\", num);\n    }\n    return 0;\n}\n\nint isPrime(int n, int i) {\n    if (i * i > n) {\n        return 1;\n    } else if (n % i == 0) {\n        return 0;\n    } else {\n        return isPrime(n, i + 1);\n    }\n}",
    "description": "Creates a `isPrime` function that recursively checks whether an integer is a prime number."
  },
  {
    "id": 225,
    "input": "Create a function in C language that recursively calculates the Fibonacci sequence up to a specified integer.",
    "output": "#include <stdio.h>\n\nint fibonacci(int);  // Function prototype declaration\n\nint main(void) {\n    int n;\n    printf(\"Which term of the Fibonacci sequence would you like to calculate?: \");\n    scanf(\"%d\", &n);\n    printf(\"The %d-th Fibonacci number is: %d\\n\", n, fibonacci(n));\n    return 0;\n}\n\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}",
    "description": "Creates a `fibonacci` function that calculates the Fibonacci sequence using recursion."
  },
  {
    "id": 226,
    "input": "Create a function in C language that returns the maximum value from an array.",
    "output": "#include <stdio.h>\n\nint findMax(int[], int);  // Function prototype declaration\n\nint main(void) {\n    int arr[] = {3, 5, 7, 2, 8, 1};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    printf(\"The maximum value in the array is: %d\\n\", findMax(arr, size));\n    return 0;\n}\n\nint findMax(int arr[], int size) {\n    int max = arr[0];\n    for (int i = 1; i < size; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}",
    "description": "Creates a `findMax` function that finds the maximum value in an array."
  },
  {
    "id": 227,
    "input": "Create a function in C language that reverses a string.",
    "output": "#include <stdio.h>\n\nvoid reverseString(char[]);  // Function prototype declaration\n\nint main(void) {\n    char str[100];\n    printf(\"Please enter a string: \");\n    scanf(\"%s\", str);\n    reverseString(str);\n    printf(\"The reversed string is: %s\\n\", str);\n    return 0;\n}\n\nvoid reverseString(char str[]) {\n    int len = 0, i;\n    while (str[len] != '\\0') {\n        len++;\n    }\n    for (i = 0; i < len / 2; i++) {\n        char temp = str[i];\n        str[i] = str[len - 1 - i];\n        str[len - 1 - i] = temp;\n    }\n}",
    "description": "Creates a `reverseString` function that reverses a given string."
  },
  {
    "id": 228,
    "input": "Create a function in C language that finds the divisors of a given integer.",
    "output": "#include <stdio.h>\n\nvoid findDivisors(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Please enter an integer: \");\n    scanf(\"%d\", &num);\n    findDivisors(num);\n    return 0;\n}\n\nvoid findDivisors(int n) {\n    printf(\"The divisors of %d are: \", n);\n    for (int i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            printf(\"%d \", i);\n        }\n    }\n    printf(\"\\n\");\n}",
    "description": "Creates a `findDivisors` function that finds the divisors of a given integer."
  },
  {
    "id": 229,
    "input": "Create a function in C language that checks whether a string is a palindrome.",
    "output": "#include <stdio.h>\n\nint isPalindrome(char[]);  // Function prototype declaration\n\nint main(void) {\n    char str[100];\n    printf(\"Please enter a string: \");\n    scanf(\"%s\", str);\n    if (isPalindrome(str)) {\n        printf(\"'%s' is a palindrome.\\n\", str);\n    } else {\n        printf(\"'%s' is not a palindrome.\\n\", str);\n    }\n    return 0;\n}\n\nint isPalindrome(char str[]) {\n    int len = 0;\n    while (str[len] != '\\0') {\n        len++;\n    }\n    for (int i = 0; i < len / 2; i++) {\n        if (str[i] != str[len - 1 - i]) {\n            return 0;\n        }\n    }\n    return 1;\n}",
    "description": "Creates an `isPalindrome` function that checks if a string is a palindrome."
  },
  {
    "id": 230,
    "input": "Create a function in C language that recursively calculates the sum of integers from 1 to a specified integer.",
    "output": "#include <stdio.h>\n\nint sum(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Please enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"The sum from 1 to %d is: %d\\n\", num, sum(num));\n    return 0;\n}\n\nint sum(int n) {\n    if (n == 1) {\n        return 1;\n    } else {\n        return n + sum(n - 1);\n    }\n}",
    "description": "Creates a `sum` function that recursively calculates the sum of integers from 1 to a specified integer."
  },
  {
    "id": 231,
    "input": "In C language, create a function that prints the reverse order of a given number using recursion.",
    "output": "#include <stdio.h>\n\nvoid printReverse(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    printReverse(num);\n    printf(\"\\n\");\n    return 0;\n}\n\nvoid printReverse(int n) {\n    if (n == 0) {\n        return;\n    }\n    printf(\"%d \", n % 10);\n    printReverse(n / 10);\n}",
    "description": "Creates a function `printReverse` that uses recursion to print the reverse order of a given integer."
  },
  {
    "id": 232,
    "input": "In C language, create a function that calculates the number of digits of a given number using recursion.",
    "output": "#include <stdio.h>\n\nint countDigits(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"%d has %d digits.\\n\", num, countDigits(num));\n    return 0;\n}\n\nint countDigits(int n) {\n    if (n == 0) {\n        return 0;\n    }\n    return 1 + countDigits(n / 10);\n}",
    "description": "Creates a function `countDigits` that uses recursion to calculate the number of digits of a given integer."
  },
  {
    "id": 233,
    "input": "In C language, create a function that recursively adds the digits of a given number in reverse order.",
    "output": "#include <stdio.h>\n\nint reverseAdd(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"The sum in reverse order is: %d\\n\", reverseAdd(num));\n    return 0;\n}\n\nint reverseAdd(int n) {\n    if (n == 0) {\n        return 0;\n    }\n    return (n % 10) + reverseAdd(n / 10);\n}",
    "description": "Creates a function `reverseAdd` that recursively adds the digits of a given integer in reverse order."
  },
  {
    "id": 234,
    "input": "In C language, create a function that calculates the least common multiple (LCM) of two integers using recursion.",
    "output": "#include <stdio.h>\n\nint lcm(int, int);  // Function prototype declaration\n\nint main(void) {\n    int a, b;\n    printf(\"Enter two integers: \");\n    scanf(\"%d %d\", &a, &b);\n    printf(\"The least common multiple of %d and %d is: %d\\n\", a, b, lcm(a, b));\n    return 0;\n}\n\nint lcm(int a, int b) {\n    static int multiple = 1;\n    if (multiple % a == 0 && multiple % b == 0) {\n        return multiple;\n    }\n    return lcm(a, b, multiple + 1);\n}",
    "description": "Creates a function `lcm` that calculates the least common multiple (LCM) of two integers using recursion."
  },
  {
    "id": 235,
    "input": "In C language, create a function that calculates the sum of even numbers up to a given integer using recursion.",
    "output": "#include <stdio.h>\n\nint sumEven(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"The sum of even numbers from 1 to %d is: %d\\n\", num, sumEven(num));\n    return 0;\n}\n\nint sumEven(int n) {\n    if (n == 0) {\n        return 0;\n    } else if (n % 2 == 0) {\n        return n + sumEven(n - 2);\n    } else {\n        return sumEven(n - 1);\n    }\n}",
    "description": "Creates a function `sumEven` that recursively calculates the sum of even numbers up to a given integer."
  },
  {
    "id": 236,
    "input": "In C language, create a function that calculates the factorial of a given integer using recursion.",
    "output": "#include <stdio.h>\n\nint factorial(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"The factorial of %d is: %d\\n\", num, factorial(num));\n    return 0;\n}\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}",
    "description": "Creates a function `factorial` that recursively calculates the factorial of a given integer."
  },
  {
    "id": 237,
    "input": "In C language, create a function that recursively prints integers in reverse order within a specified range.",
    "output": "#include <stdio.h>\n\nvoid printReverseRange(int, int);  // Function prototype declaration\n\nint main(void) {\n    int start, end;\n    printf(\"Enter the start and end integers: \");\n    scanf(\"%d %d\", &start, &end);\n    printReverseRange(start, end);\n    printf(\"\\n\");\n    return 0;\n}\n\nvoid printReverseRange(int start, int end) {\n    if (start > end) {\n        return;\n    }\n    printReverseRange(start + 1, end);\n    printf(\"%d \", start);\n}",
    "description": "Creates a function `printReverseRange` that recursively prints integers in reverse order within a specified range."
  },
  {
    "id": 238,
    "input": "In C language, create a function that determines whether the sum of the digits of a given number is even or odd using recursion.",
    "output": "#include <stdio.h>\n\nint isEven(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    if (isEven(num)) {\n        printf(\"%d is even.\\n\", num);\n    } else {\n        printf(\"%d is odd.\\n\", num);\n    }\n    return 0;\n}\n\nint isEven(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    if (n == 1) {\n        return 0;\n    }\n    return isEven(n - 2);\n}",
    "description": "Creates a function `isEven` that recursively determines whether the sum of the digits of a given integer is even or odd."
  },
  {
    "id": 239,
    "input": "In C language, create a function that calculates the sum of the digits of a given number using recursion.",
    "output": "#include <stdio.h>\n\nint digitSum(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"The sum of the digits of %d is: %d\\n\", num, digitSum(num));\n    return 0;\n}\n\nint digitSum(int n) {\n    if (n == 0) {\n        return 0;\n    }\n    return n % 10 + digitSum(n / 10);\n}",
    "description": "Creates a function `digitSum` that recursively calculates the sum of the digits of a given integer."
  },
  {
    "id": 240,
    "input": "In C language, create a function that recursively extracts the digits of a given number in reverse order.",
    "output": "#include <stdio.h>\n\nvoid reverseDigits(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    reverseDigits(num);\n    printf(\"\\n\");\n    return 0;\n}\n\nvoid reverseDigits(int n) {\n    if (n == 0) {\n        return;\n    }\n    printf(\"%d \", n % 10);\n    reverseDigits(n / 10);\n}",
    "description": "Creates a function `reverseDigits` that recursively extracts the digits of a given integer in reverse order."
  },
  {
    "id": 241,
    "input": "In C language, create a function that uses recursion to display prime numbers within a specified range.",
    "output": "#include <stdio.h>\n\nint isPrime(int, int);  // Function prototype declaration\n\nvoid printPrimes(int, int);  // Function prototype declaration\n\nint main(void) {\n    int start, end;\n    printf(\"Enter the start and end integers: \");\n    scanf(\"%d %d\", &start, &end);\n    printPrimes(start, end);\n    return 0;\n}\n\nint isPrime(int num, int div) {\n    if (num <= 1) {\n        return 0;\n    }\n    if (div == num) {\n        return 1;\n    }\n    if (num % div == 0) {\n        return 0;\n    }\n    return isPrime(num, div + 1);\n}\n\nvoid printPrimes(int start, int end) {\n    if (start > end) {\n        return;\n    }\n    if (isPrime(start, 2)) {\n        printf(\"%d \", start);\n    }\n    printPrimes(start + 1, end);\n}",
    "description": "Create a function `printPrimes` that uses recursion to display prime numbers within a specified range."
  },
  {
    "id": 242,
    "input": "In C language, create a function that uses recursion to calculate the average of a specified number.",
    "output": "#include <stdio.h>\n\ndouble calculateAverage(int, int);  // Function prototype declaration\n\nint main(void) {\n    int num, sum;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    sum = calculateAverage(num, 0);\n    printf(\"The average is: %.2f\\n\", sum / (double)num);\n    return 0;\n}\n\ndouble calculateAverage(int n, int sum) {\n    if (n == 0) {\n        return sum;\n    }\n    return calculateAverage(n - 1, sum + n);\n}",
    "description": "Create a function `calculateAverage` that uses recursion to calculate the average of a specified number."
  },
  {
    "id": 243,
    "input": "In C language, create a function that uses recursion to double each digit of a given integer and sum them up.",
    "output": "#include <stdio.h>\n\nint doubleDigitsSum(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"The sum of doubled digits is: %d\\n\", doubleDigitsSum(num));\n    return 0;\n}\n\nint doubleDigitsSum(int n) {\n    if (n == 0) {\n        return 0;\n    }\n    return (n % 10) * 2 + doubleDigitsSum(n / 10);\n}",
    "description": "Create a function `doubleDigitsSum` that uses recursion to double each digit of an integer and sum them up."
  },
  {
    "id": 244,
    "input": "In C language, create a function that uses recursion to sum up each digit of a given integer.",
    "output": "#include <stdio.h>\n\nint addDigits(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"The sum of digits is: %d\\n\", addDigits(num));\n    return 0;\n}\n\nint addDigits(int n) {\n    if (n == 0) {\n        return 0;\n    }\n    return (n % 10) + addDigits(n / 10);\n}",
    "description": "Create a function `addDigits` that uses recursion to sum up each digit of an integer."
  },
  {
    "id": 245,
    "input": "In C language, create a function that uses recursion to print a given string in reverse order.",
    "output": "#include <stdio.h>\n\nvoid reverseString(char[], int);  // Function prototype declaration\n\nint main(void) {\n    char str[100];\n    printf(\"Enter a string: \");\n    scanf(\"%s\", str);\n    reverseString(str, 0);\n    printf(\"\\n\");\n    return 0;\n}\n\nvoid reverseString(char str[], int i) {\n    if (str[i] == '\\0') {\n        return;\n    }\n    reverseString(str, i + 1);\n    printf(\"%c\", str[i]);\n}",
    "description": "Create a function `reverseString` that uses recursion to print a given string in reverse order."
  },
  {
    "id": 246,
    "input": "In C language, create a function that uses recursion to calculate the power of 2 for a given number.",
    "output": "#include <stdio.h>\n\nint powerOfTwo(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"2 raised to the power of %d is: %d\\n\", num, powerOfTwo(num));\n    return 0;\n}\n\nint powerOfTwo(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return 2 * powerOfTwo(n - 1);\n}",
    "description": "Create a function `powerOfTwo` that uses recursion to calculate the power of 2 for a given number."
  },
  {
    "id": 247,
    "input": "In C language, create a function that uses recursion to check whether a given number is a perfect number.",
    "output": "#include <stdio.h>\n\nint sumDivisors(int, int);  // Function prototype declaration\n\nint isPerfectNumber(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    if (isPerfectNumber(num)) {\n        printf(\"%d is a perfect number.\\n\", num);\n    } else {\n        printf(\"%d is not a perfect number.\\n\", num);\n    }\n    return 0;\n}\n\nint sumDivisors(int n, int div) {\n    if (div >= n) {\n        return 0;\n    }\n    if (n % div == 0) {\n        return div + sumDivisors(n, div + 1);\n    }\n    return sumDivisors(n, div + 1);\n}\n\nint isPerfectNumber(int num) {\n    return sumDivisors(num, 1) == num;\n}",
    "description": "Create a function `isPerfectNumber` that uses recursion to check whether a given number is a perfect number."
  },
  {
    "id": 248,
    "input": "In C language, create a function that uses recursion to check whether a given number is a prime number.",
    "output": "#include <stdio.h>\n\nint isPrime(int, int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    if (isPrime(num, 2)) {\n        printf(\"%d is a prime number.\\n\", num);\n    } else {\n        printf(\"%d is not a prime number.\\n\", num);\n    }\n    return 0;\n}\n\nint isPrime(int num, int div) {\n    if (num <= 1) {\n        return 0;\n    }\n    if (div == num) {\n        return 1;\n    }\n    if (num % div == 0) {\n        return 0;\n    }\n    return isPrime(num, div + 1);\n}",
    "description": "Create a function `isPrime` that uses recursion to check whether a given number is a prime number."
  },
  {
    "id": 249,
    "input": "In C language, create a function that uses recursion to print all divisors of a given integer.",
    "output": "#include <stdio.h>\n\nvoid printDivisors(int, int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    printDivisors(num, 1);\n    return 0;\n}\n\nvoid printDivisors(int n, int div) {\n    if (div == n) {\n        return;\n    }\n    if (n % div == 0) {\n        printf(\"%d \", div);\n    }\n    printDivisors(n, div + 1);\n}",
    "description": "Create a function `printDivisors` that uses recursion to print all divisors of a given integer."
  },
  {
    "id": 250,
    "input": "In C language, create a function that uses recursion to check whether a given number is a Fibonacci number.",
    "output": "#include <stdio.h>\n\nint isFibonacci(int, int, int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    if (isFibonacci(num, 0, 1)) {\n        printf(\"%d is a Fibonacci number.\\n\", num);\n} else {\n        printf(\"%d is not a Fibonacci number.\\n\", num);\n}\n    return 0;\n}\n\nint isFibonacci(int num, int a, int b) {\n    if (a == num) {\n        return 1;\n    }\n    if (a > num) {\n        return 0;\n    }\n    return isFibonacci(num, b, a + b);\n}",
    "description": "Create a function `isFibonacci` that uses recursion to check whether a given number is a Fibonacci number."
  },
  {
    "id": 251,
    "input": "In C language, create a function that uses recursion to multiply each digit of a given number by 3 and return their sum.",
    "output": "#include <stdio.h>\n\nint tripleDigitsSum(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Please enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"The sum of each digit multiplied by 3 is: %d\\n\", tripleDigitsSum(num));\n    return 0;\n}\n\nint tripleDigitsSum(int n) {\n    if (n == 0) {\n        return 0;\n    }\n    return (n % 10) * 3 + tripleDigitsSum(n / 10);\n}",
    "description": "Create a function `tripleDigitsSum` using recursion that multiplies each digit of an integer by 3 and returns the sum."
  },
  {
    "id": 252,
    "input": "In C language, create a function that uses recursion to calculate the factorial of a given number.",
    "output": "#include <stdio.h>\n\nint factorial(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Please enter an integer: \");\n    scanf(\"%d\", &num);\n\n    printf(\"The factorial of %d is: %d\\n\", num, factorial(num));\n    return 0;\n}\n\nint factorial(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}",
    "description": "Create a function `factorial` using recursion to calculate the factorial of an integer."
  },
  {
    "id": 253,
    "input": "In C language, create a function that uses recursion to calculate the number of digits of a given number.",
    "output": "#include <stdio.h>\n\nint countDigits(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Please enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"The number of digits is: %d\\n\", countDigits(num));\n    return 0;\n}\n\nint countDigits(int n) {\n    if (n == 0) {\n        return 0;\n    }\n    return 1 + countDigits(n / 10);\n}",
    "description": "Create a function `countDigits` using recursion to calculate the number of digits of an integer."
  },
  {
    "id": 254,
    "input": "In C language, create a function that uses recursion to calculate the reciprocal of a given integer.",
    "output": "#include <stdio.h>\n\nfloat reciprocal(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Please enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"The reciprocal is: %.2f\\n\", reciprocal(num));\n    return 0;\n}\n\nfloat reciprocal(int n) {\n    if (n == 1) {\n        return 1.0;\n    }\n    return 1.0 / n;\n}",
    "description": "Create a function `reciprocal` using recursion to calculate the reciprocal of a given integer."
  },
  {
    "id": 255,
    "input": "In C language, create a function that uses recursion to calculate the sum of the digits of a given number.",
    "output": "#include <stdio.h>\n\nint sumOfDigits(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Please enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"The sum of the digits is: %d\\n\", sumOfDigits(num));\n    return 0;\n}\n\nint sumOfDigits(int n) {\n    if (n == 0) {\n        return 0;\n    }\n    return (n % 10) + sumOfDigits(n / 10);\n}",
    "description": "Create a function `sumOfDigits` using recursion to calculate the sum of the digits of a given integer."
  },
  {
    "id": 256,
    "input": "In C language, create a function that uses recursion to calculate the product of the digits of a given number.",
    "output": "#include <stdio.h>\n\nint productOfDigits(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Please enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"The product of the digits is: %d\\n\", productOfDigits(num));\n    return 0;\n}\n\nint productOfDigits(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    return (n % 10) * productOfDigits(n / 10);\n}",
    "description": "Create a function `productOfDigits` using recursion to calculate the product of the digits of a given integer."
  },
  {
    "id": 257,
    "input": "In C language, create a function that uses recursion to separate and display the even and odd digits of a given number.",
    "output": "#include <stdio.h>\n\nvoid separateEvenOdd(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Please enter an integer: \");\n    scanf(\"%d\", &num);\n    separateEvenOdd(num);\n    printf(\"\\n\");\n    return 0;\n}\n\nvoid separateEvenOdd(int n) {\n    if (n == 0) {\n        return;\n    }\n    int digit = n % 10;\n    if (digit % 2 == 0) {\n        printf(\"Even: %d \", digit);\n    } else {\n        printf(\"Odd: %d \", digit);\n    }\n    separateEvenOdd(n / 10);\n}",
    "description": "Create a function `separateEvenOdd` using recursion to separate and display the even and odd digits of a given integer."
  },
  {
    "id": 258,
    "input": "In C language, create a function that uses recursion to display the digits of a given number in reverse order.",
    "output": "#include <stdio.h>\n\nvoid reverseDigits(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Please enter an integer: \");\n    scanf(\"%d\", &num);\n    reverseDigits(num);\n    printf(\"\\n\");\n    return 0;\n}\n\nvoid reverseDigits(int n) {\n    if (n == 0) {\n        return;\n    }\n    printf(\"%d\", n % 10);\n    reverseDigits(n / 10);\n}",
    "description": "Create a function `reverseDigits` using recursion to display the digits of a given integer in reverse order."
  },
  {
    "id": 259,
    "input": "In C language, create a function that uses recursion to determine whether a given number is a perfect square.",
    "output": "#include <stdio.h>\n\nint isPerfectSquare(int, int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Please enter an integer: \");\n    scanf(\"%d\", &num);\n    if (isPerfectSquare(num, 1)) {\n        printf(\"%d is a perfect square.\\n\", num);\n    } else {\n        printf(\"%d is not a perfect square.\\n\", num);\n    }\n    return 0;\n}\n\nint isPerfectSquare(int num, int i) {\n    if (i * i > num) {\n        return 0;\n    }\n    if (i * i == num) {\n        return 1;\n    }\n    return isPerfectSquare(num, i + 1);\n}",
    "description": "Create a function `isPerfectSquare` using recursion to determine whether a given number is a perfect square."
  },
  {
    "id": 260,
    "input": "In C language, create a function that uses recursion to check whether a given string is a palindrome.",
    "output": "#include <stdio.h>\n\nint isPalindrome(char[], int, int);  // Function prototype declaration\n\nint main(void) {\n    char str[100];\n    printf(\"Please enter a string: \");\n    scanf(\"%s\", str);\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    if (isPalindrome(str, 0, length - 1)) {\n        printf(\"%s is a palindrome.\\n\", str);\n    } else {\n        printf(\"%s is not a palindrome.\\n\", str);\n    }\n    return 0;\n}\n\nint isPalindrome(char str[], int start, int end) {\n    if (start >= end) {\n        return 1;\n    }\n    if (str[start] != str[end]) {\n        return 0;\n    }\n    return isPalindrome(str, start + 1, end - 1);\n}",
    "description": "Create a function `isPalindrome` using recursion to check whether a given string is a palindrome."
  },
  {
    "id": 261,
    "input": "In C language, create a function using recursion to find all divisors of a given number.",
    "output": "#include <stdio.h>\n\nvoid findDivisors(int, int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"Divisors of %d: \", num);\n    findDivisors(num, 1);\n    printf(\"\\n\");\n    return 0;\n}\n\nvoid findDivisors(int n, int i) {\n    if (i == n) {\n        return;\n    }\n    if (n % i == 0) {\n        printf(\"%d \", i);\n    }\n    findDivisors(n, i + 1);\n}",
    "description": "A function `findDivisors` is created using recursion to find all divisors of the specified integer. It recursively checks from 1 to the number and outputs the divisors."
  },
  {
    "id": 262,
    "input": "In C language, create a function using recursion to calculate the sum of all numbers up to the given number.",
    "output": "#include <stdio.h>\n\nint sumUpTo(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"Sum of numbers from 1 to %d: %d\\n\", num, sumUpTo(num));\n    return 0;\n}\n\nint sumUpTo(int n) {\n    if (n == 0) {\n        return 0;\n    }\n    return n + sumUpTo(n - 1);\n}",
    "description": "A function `sumUpTo` is created using recursion to calculate the sum of all numbers from 1 to the specified number. It recursively adds numbers from 1 to n."
  },
  {
    "id": 263,
    "input": "In C language, create a function using recursion to count the number of characters in a given string.",
    "output": "#include <stdio.h>\n\nint countCharacters(char[]);  // Function prototype declaration\n\nint main(void) {\n    char str[100];\n    printf(\"Enter a string: \");\n    scanf(\"%s\", str);\n    printf(\"Number of characters: %d\\n\", countCharacters(str));\n    return 0;\n}\n\nint countCharacters(char str[]) {\n    if (str[0] == '\\0') {\n        return 0;\n    }\n    return 1 + countCharacters(str + 1);\n}",
    "description": "A function `countCharacters` is created using recursion to count the number of characters in the given string. It recursively counts characters starting from the first character."
  },
  {
    "id": 264,
    "input": "In C language, create a function using recursion to reverse the given string.",
    "output": "#include <stdio.h>\n\nvoid reverseString(char[], int, int);  // Function prototype declaration\n\nint main(void) {\n    char str[100];\n    printf(\"Enter a string: \");\n    scanf(\"%s\", str);\n    int length = 0;\n    while (str[length] != '\\0') {\n        length++;\n    }\n    reverseString(str, 0, length - 1);\n    printf(\"Reversed string: %s\\n\", str);\n    return 0;\n}\n\nvoid reverseString(char str[], int start, int end) {\n    if (start >= end) {\n        return;\n    }\n    char temp = str[start];\n    str[start] = str[end];\n    str[end] = temp;\n    reverseString(str, start + 1, end - 1);\n}",
    "description": "A function `reverseString` is created using recursion to reverse the given string. It swaps the first and last characters while recursively processing the string."
  },
  {
    "id": 265,
    "input": "In C language, implement binary search using recursion. Assume the array is pre-sorted.",
    "output": "#include <stdio.h>\n\nint binarySearch(int[], int, int, int);  // Function prototype declaration\n\nint main(void) {\n    int arr[] = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19};\n    int target, result;\n    printf(\"Enter a number to search: \");\n    scanf(\"%d\", &target);\n    result = binarySearch(arr, 0, 9, target);\n    if (result != -1) {\n        printf(\"%d is at index %d in the array.\\n\", target, result);\n    } else {\n        printf(\"%d is not in the array.\\n\", target);\n    }\n    return 0;\n}\n\nint binarySearch(int arr[], int low, int high, int target) {\n    if (low > high) {\n        return -1;\n    }\n    int mid = (low + high) / 2;\n    if (arr[mid] == target) {\n        return mid;\n    } else if (arr[mid] > target) {\n        return binarySearch(arr, low, mid - 1, target);\n    } else {\n        return binarySearch(arr, mid + 1, high, target);\n    }\n}",
    "description": "This implementation uses recursion to perform binary search. Given a pre-sorted array, the search range is narrowed recursively to find the target value."
  },
  {
    "id": 266,
    "input": "Write a function in C using recursion to find the greatest common divisor (GCD) of two given integers.",
    "output": "#include <stdio.h>\n\nint gcd(int, int);  // Function prototype declaration\n\nint main(void) {\n    int num1, num2;\n    printf(\"Enter two integers: \");\n    scanf(\"%d %d\", &num1, &num2);\n    printf(\"The greatest common divisor of %d and %d is: %d\\n\", num1, num2, gcd(num1, num2));\n    return 0;\n}\n\nint gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    }\n    return gcd(b, a % b);\n}",
    "description": "A function `gcd` is created using recursion to find the greatest common divisor (GCD) based on Euclid's algorithm, which uses the remainder of a and b for recursive processing."
  },
  {
    "id": 267,
    "input": "Write a function in C using recursion to calculate the sum of all integers between two given integers.",
    "output": "#include <stdio.h>\n\nint sumBetween(int, int);  // Function prototype declaration\n\nint main(void) {\n    int num1, num2;\n    printf(\"Enter two integers: \");\n    scanf(\"%d %d\", &num1, &num2);\n    printf(\"The sum of integers between %d and %d is: %d\\n\", num1, num2, sumBetween(num1, num2));\n    return 0;\n}\n\nint sumBetween(int a, int b) {\n    if (a > b) {\n        return 0;\n    }\n    return a + sumBetween(a + 1, b);\n}",
    "description": "A function `sumBetween` is created using recursion to calculate the sum of all integers between two given integers, adding integers from a to b recursively."
  },
  {
    "id": 268,
    "input": "Write a function in C using recursion to find the maximum value in an array.",
    "output": "#include <stdio.h>\n\nint findMax(int[], int, int);  // Function prototype declaration\n\nint main(void) {\n    int arr[] = {12, 4, 7, 9, 15, 3, 8};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    printf(\"The maximum value in the array is: %d\\n\", findMax(arr, 0, n - 1));\n    return 0;\n}\n\nint findMax(int arr[], int low, int high) {\n    if (low == high) {\n        return arr[low];\n    }\n    int mid = (low + high) / 2;\n    int leftMax = findMax(arr, low, mid);\n    int rightMax = findMax(arr, mid + 1, high);\n    return (leftMax > rightMax) ? leftMax : rightMax;\n}",
    "description": "A function `findMax` is created using recursion to find the maximum value in an array. The array is split in half, and the maximum values of each half are compared recursively."
  },
  {
    "id": 269,
    "input": "Write a function in C using recursion to calculate the factorial of a given integer. Improve the program to display intermediate results.",
    "output": "#include <stdio.h>\n\nint factorial(int);  // Function prototype declaration\n\nint main(void) {\n    int num;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &num);\n    printf(\"The factorial of %d is: %d\\n\", num, factorial(num));\n    return 0;\n}\n\nint factorial(int n) {\n    if (n == 0) {\n        return 1;\n    }\n    int result = n * factorial(n - 1);\n    printf(\"%d! = %d\\n\", n, result);  // Display intermediate results\n    return result;\n}",
    "description": "A function `factorial` is created using recursion to calculate the factorial of an integer, displaying intermediate results during the calculation process."
  },
  {
    "id": 270,
    "input": "Write a program in C to manage a list of integers. Create functions to add, remove, search, and display integers in the list, and combine them into a complete program.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid addItem(int[], int*, int);  // Add item function\nvoid removeItem(int[], int*, int);  // Remove item function\nint searchItem(int[], int, int);  // Search item function\nvoid displayList(int[], int);  // Display list function\n\nint main(void) {\n    int list[10];  // List array\n    int size = 0;  // Current list size\n    int choice, value;\n\n    while (1) {\n        printf(\"1. Add item 2. Remove item 3. Search item 4. Display list 5. Exit\\n\");\n        printf(\"Enter your choice: \");\n        scanf(\"%d\", &choice);\n\n        switch (choice) {\n            case 1:\n                printf(\"Enter value to add: \");\n                scanf(\"%d\", &value);\n                addItem(list, &size, value);\n                break;\n            case 2:\n                printf(\"Enter value to remove: \");\n                scanf(\"%d\", &value);\n                removeItem(list, &size, value);\n                break;\n            case 3:\n                printf(\"Enter value to search: \");\n                scanf(\"%d\", &value);\n                if (searchItem(list, size, value) != -1) {\n                    printf(\"Value %d exists in the list.\\n\", value);\n                } else {\n                    printf(\"Value %d does not exist in the list.\\n\", value);\n                }\n                break;\n            case 4:\n                displayList(list, size);\n                break;\n            case 5:\n                printf(\"Exiting program.\\n\");\n                return 0;\n            default:\n                printf(\"Invalid choice.\\n\");\n        }\n    }\n}\n\nvoid addItem(int list[], int* size, int value) {\n    if (*size < 10) {\n        list[*size] = value;\n        (*size)++;\n        printf(\"Value %d added to the list.\\n\", value);\n    } else {\n        printf(\"List is full.\\n\");\n    }\n}\n\nvoid removeItem(int list[], int* size, int value) {\n    int i, found = 0;\n    for (i = 0; i < *size; i++) {\n        if (list[i] == value) {\n            found = 1;\n            break;\n        }\n    }\n    if (found) {\n        for (int j = i; j < *size - 1; j++) {\n            list[j] = list[j + 1];\n        }\n        (*size)--;\n        printf(\"Value %d removed from the list.\\n\", value);\n    } else {\n        printf(\"Value %d not found in the list.\\n\", value);\n    }\n}\n\nint searchItem(int list[], int size, int value) {\n    for (int i = 0; i < size; i++) {\n        if (list[i] == value) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nvoid displayList(int list[], int size) {\n    if (size == 0) {\n        printf(\"The list is empty.\\n\");\n    } else {\n        printf(\"List contents:\\n\");\n        for (int i = 0; i < size; i++) {\n            printf(\"%d \", list[i]);\n        }\n        printf(\"\\n\");\n    }\n}",
    "description": "This program creates several functions for managing a list of integers, combining them to perform actual list operations. It uses the following four main functions:\n1. `addItem`: Adds an item to the list\n2. `removeItem`: Removes an item from the list\n3. `searchItem`: Searches for an item in the list\n4. `displayList`: Displays the current contents of the list\n\nEach function handles basic list operations such as adding, removing, searching, and displaying items. The list can manage up to 10 items and performs operations based on user input."
  },
  {
    "id": 271,
    "input": "Create a program that manages a common counter value between functions using a global variable.",
    "output": "#include <stdio.h>\n\nint counter = 0;  // Global variable\n\nvoid incrementCounter() {\n    counter++;\n    printf(\"Counter value incremented: %d\\n\", counter);\n}\n\nvoid resetCounter() {\n    counter = 0;\n    printf(\"Counter reset: %d\\n\", counter);\n}\n\nint main(void) {\n    printf(\"Current counter: %d\\n\", counter);\n    incrementCounter();\n    incrementCounter();\n    resetCounter();\n    incrementCounter();\n    return 0;\n}",
    "description": "This program defines a global variable `counter`. The `incrementCounter` function increments the counter, while the `resetCounter` function resets it. By using a global variable, the counter value is shared between functions."
  },
  {
    "id": 272,
    "input": "Create a program that manages an independent counter for each function using local variables.",
    "output": "#include <stdio.h>\n\nvoid incrementLocalCounter() {\n    int counter = 0;  // Local variable\n    counter++;\n    printf(\"This function's counter: %d\\n\", counter);\n}\n\nint main(void) {\n    incrementLocalCounter();\n    incrementLocalCounter();\n    incrementLocalCounter();\n    return 0;\n}",
    "description": "In this program, the variable `counter` is defined within the `incrementLocalCounter` function, making it local. Each time the function is called, the counter is reinitialized, keeping the counters independent between function calls."
  },
  {
    "id": 273,
    "input": "Create a program that uses block scope to define a variable with a limited scope within a conditional statement.",
    "output": "#include <stdio.h>\n\nint main(void) {\n    int x = 10;\n    printf(\"External x: %d\\n\", x);\n\n    if (x > 5) {\n        int x = 20;  // Block scope\n        printf(\"Block x: %d\\n\", x);\n    }\n\n    printf(\"External x (unchanged): %d\\n\", x);\n    return 0;\n}",
    "description": "This program demonstrates the use of block scope by defining a variable `x` inside an `if` statement. The block-scoped `x` does not affect the `x` variable outside of the block, illustrating the scope limits."
  },
  {
    "id": 274,
    "input": "Create a program that uses `static` inside a function to retain the value of a local variable across function calls.",
    "output": "#include <stdio.h>\n\nvoid staticCounter() {\n    static int counter = 0;  // Static local variable\n    counter++;\n    printf(\"Static counter: %d\\n\", counter);\n}\n\nint main(void) {\n    staticCounter();\n    staticCounter();\n    staticCounter();\n    return 0;\n}",
    "description": "This program uses the `static` keyword to define a local variable `counter` that retains its value between function calls. Static local variables maintain their value across calls."
  },
  {
    "id": 275,
    "input": "Create a program that modifies a global variable inside a function.",
    "output": "#include <stdio.h>\n\nint value = 100;  // Global variable\n\nvoid modifyGlobalValue() {\n    value += 50;\n    printf(\"Modified global variable inside function: %d\\n\", value);\n}\n\nint main(void) {\n    printf(\"Initial global variable: %d\\n\", value);\n    modifyGlobalValue();\n    printf(\"Global variable after function call: %d\\n\", value);\n    return 0;\n}",
    "description": "This program demonstrates modifying a global variable `value` inside the `modifyGlobalValue` function. Global variables can be directly modified from within any function."
  },
  {
    "id": 276,
    "input": "Create a program that compares the behavior of global and local variables with the same name.",
    "output": "#include <stdio.h>\n\nint value = 100;  // Global variable\n\nvoid compareScope() {\n    int value = 50;  // Local variable\n    printf(\"Local variable in function: %d\\n\", value);\n    printf(\"Accessing global variable: %d\\n\", ::value);\n}\n\nint main(void) {\n    printf(\"Global variable in main: %d\\n\", value);\n    compareScope();\n    return 0;\n}",
    "description": "This program shows that when a local variable and a global variable have the same name, the local variable takes precedence within the function. It also demonstrates how to access the global variable using the scope resolution operator `::`."
  },
  {
    "id": 277,
    "input": "Create a program that tests the effect of using the same static local variable in multiple functions.",
    "output": "#include <stdio.h>\n\nvoid functionA() {\n    static int counter = 0;  // Static local variable\n    counter++;\n    printf(\"functionA's counter: %d\\n\", counter);\n}\n\nvoid functionB() {\n    static int counter = 0;  // Static local variable\n    counter += 2;\n    printf(\"functionB's counter: %d\\n\", counter);\n}\n\nint main(void) {\n    functionA();\n    functionA();\n    functionB();\n    functionB();\n    return 0;\n}",
    "description": "This program demonstrates that each function has its own static local variable when declared with `static`. The counters in `functionA` and `functionB` are independent of each other."
  },
  {
    "id": 278,
    "input": "Create a program that uses block scope to hold temporary calculation results.",
    "output": "#include <stdio.h>\n\nint main(void) {\n    int total = 0;\n\n    for (int i = 1; i <= 5; i++) {\n        {\n            int temp = i * i;  // Block-scoped variable\n            printf(\"%d squared: %d\\n\", i, temp);\n            total += temp;\n        }\n        // printf(\"Temp: %d\\n\", temp);  // Error: temp is out of scope\n    }\n\n    printf(\"Total: %d\\n\", total);\n    return 0;\n}",
    "description": "In this program, the `temp` variable is defined inside a block scope within a `for` loop. The variable holds temporary calculation results and is inaccessible outside the block, showing the scope limits."
  },
  {
    "id": 279,
    "input": "Create a program that demonstrates an error when attempting to return a pointer to a local variable.",
    "output": "#include <stdio.h>\n\nint* returnLocalPointer() {\n    int localVar = 10;  // Local variable\n    return &localVar;  // Returning address of local variable\n}\n\nint main(void) {\n    int* ptr = returnLocalPointer();\n    printf(\"Pointer points to value: %d (undefined behavior likely)\\n\", *ptr);  // Undefined behavior\n    return 0;\n}",
    "description": "This program demonstrates the error that occurs when trying to return a pointer to a local variable `localVar`. Since local variables are destroyed when the function returns, accessing their address results in undefined behavior."
  },
  {
    "id": 280,
    "input": "Create a program that uses a global variable to share a counter state between multiple functions.",
    "output": "#include <stdio.h>\n\nint counter = 0;  // Global variable\n\nvoid increment() {\n    counter++;\n    printf(\"Counter incremented: %d\\n\", counter);\n}\n\nvoid decrement() {\n    counter--;\n    printf(\"Counter decremented: %d\\n\", counter);\n}\n\nint main(void) {\n    printf(\"Initial counter: %d\\n\", counter);\n    increment();\n    increment();\n    decrement();\n    return 0;\n}",
    "description": "This program demonstrates the use of a global variable `counter` to share the counter state between the `increment` and `decrement` functions. The global counter value is managed across multiple functions."
  },
  {
    "id": 281,
    "input": "Create a program that declares a global variable and changes its value in the main function.",
    "output": "#include <stdio.h>\n\nint globalVar = 100;  // Global variable\n\nint main(void) {\n    printf(\"Initial value: %d\\n\", globalVar);\n    globalVar = 200;  // Change global variable\n    printf(\"Changed value: %d\\n\", globalVar);\n    return 0;\n}",
    "description": "This program declares a global variable `globalVar` and changes its value inside the `main` function. Global variables are accessible throughout the entire program."
  },
  {
    "id": 282,
    "input": "Create a program to check the scope of local variables by using the same variable name in different functions.",
    "output": "#include <stdio.h>\n\nvoid functionA() {\n    int localVar = 10;  // Local variable\n    printf(\"functionA's localVar: %d\\n\", localVar);\n}\n\nvoid functionB() {\n    int localVar = 20;  // Local variable with the same name\n    printf(\"functionB's localVar: %d\\n\", localVar);\n}\n\nint main(void) {\n    functionA();\n    functionB();\n    return 0;\n}",
    "description": "This program declares the same local variable `localVar` in both `functionA` and `functionB`. They are independent within their scopes and do not conflict."
  },
  {
    "id": 283,
    "input": "Create a program using the same name for a local variable inside a block scope.",
    "output": "#include <stdio.h>\n\nint main(void) {\n    int x = 5;  // Local variable\n    printf(\"Outer x: %d\\n\", x);\n\n    {\n        int x = 10;  // Block-scoped variable\n        printf(\"Inner x: %d\\n\", x);\n    }\n\n    printf(\"Outer x (back to original): %d\\n\", x);\n    return 0;\n}",
    "description": "This program declares a local variable `x` in the outer scope and a block-scoped variable `x` in the inner block. The inner block variable shadows the outer variable, but the outer variable is restored after exiting the block."
  },
  {
    "id": 284,
    "input": "Create a program that hides a global variable with a local variable of the same name.",
    "output": "#include <stdio.h>\n\nint globalVar = 50;  // Global variable\n\nint main(void) {\n    printf(\"Global variable value: %d\\n\", globalVar);\n    int globalVar = 100;  // Local variable hiding the global one\n    printf(\"Local variable value: %d\\n\", globalVar);\n    return 0;\n}",
    "description": "This program declares a local variable `globalVar` with the same name as a global variable. The local variable takes precedence within the local scope, hiding the global variable."
  },
  {
    "id": 285,
    "input": "Create a program using a static variable to count the number of function calls.",
    "output": "#include <stdio.h>\n\nvoid countCalls() {\n    static int callCount = 0;  // Static variable\n    callCount++;\n    printf(\"This function has been called %d times.\\n\", callCount);\n}\n\nint main(void) {\n    countCalls();\n    countCalls();\n    countCalls();\n    return 0;\n}",
    "description": "This program uses a static variable `callCount` inside the `countCalls` function to count how many times the function is called. Static variables retain their values between function calls."
  },
  {
    "id": 286,
    "input": "Create a program that modifies a global variable inside a function.",
    "output": "#include <stdio.h>\n\nint globalVar = 5;  // Global variable\n\nvoid modifyGlobal() {\n    globalVar *= 10;  // Modify global variable\n}\n\nint main(void) {\n    printf(\"Value before modification: %d\\n\", globalVar);\n    modifyGlobal();\n    printf(\"Value after modification: %d\\n\", globalVar);\n    return 0;\n}",
    "description": "This program modifies the global variable `globalVar` inside the function `modifyGlobal`. Global variables can be accessed and modified by any function."
  },
  {
    "id": 287,
    "input": "Create a program to distinguish between a local variable and a global variable with the same name.",
    "output": "#include <stdio.h>\n\nint value = 10;  // Global variable\n\nint main(void) {\n    int value = 20;  // Local variable\n    printf(\"Local variable: %d\\n\", value);\n    printf(\"Global variable: %d\\n\", ::value);  // Referencing global variable\n    return 0;\n}",
    "description": "This program demonstrates how to distinguish between a local variable and a global variable with the same name. The global variable is referenced using `::value`."
  },
  {
    "id": 288,
    "input": "Create a program that temporarily modifies a global variable inside a function and restores it after the function ends.",
    "output": "#include <stdio.h>\n\nint globalVar = 5;  // Global variable\n\nvoid temporaryChange() {\n    int original = globalVar;\n    globalVar = 100;  // Temporarily change\n    printf(\"Value inside function: %d\\n\", globalVar);\n    globalVar = original;  // Restore original value\n}\n\nint main(void) {\n    printf(\"Initial value: %d\\n\", globalVar);\n    temporaryChange();\n    printf(\"Restored value: %d\\n\", globalVar);\n    return 0;\n}",
    "description": "This program modifies the global variable `globalVar` temporarily inside the function `temporaryChange` and restores its original value when the function ends."
  },
  {
    "id": 289,
    "input": "Create a program that generates a sequence using a static variable.",
    "output": "#include <stdio.h>\n\nvoid generateSequence() {\n    static int num = 1;  // Static variable\n    printf(\"%d\\n\", num);\n    num += 2;  // Generate odd numbers\n}\n\nint main(void) {\n    for (int i = 0; i < 5; i++) {\n        generateSequence();\n    }\n    return 0;\n}",
    "description": "This program uses a static variable `num` to generate a sequence of odd numbers. Static variables retain their values between function calls."
  },
  {
    "id": 290,
    "input": "Create a program that demonstrates the difference between initialized and uninitialized global variables.",
    "output": "#include <stdio.h>\n\nint globalInit = 10;  // Initialized global variable\nint globalUninit;     // Uninitialized global variable\n\nint main(void) {\n    printf(\"Initialized: %d\\n\", globalInit);\n    printf(\"Uninitialized: %d\\n\", globalUninit);  // Defaults to 0\n    return 0;\n}",
    "description": "This program demonstrates the difference between an initialized global variable `globalInit` and an uninitialized global variable `globalUninit`. Uninitialized global variables default to 0."
  },
  {
    "id": 291,
    "input": "Create a basic program that uses a static variable within a function to record the number of calls.",
    "output": "#include <stdio.h>\n\nvoid countCalls() {\n    static int count = 0; // Static variable\n    count++;\n    printf(\"The function has been called %d times.\\n\", count);\n}\n\nint main(void) {\n    countCalls();\n    countCalls();\n    countCalls();\n    return 0;\n}",
    "description": "In this program, a static variable `count` inside the `countCalls` function is used to record the number of calls. The static variable retains its value even after the function exits, so the count accumulates with each call."
  },
  {
    "id": 292,
    "input": "Create a program that uses local and global variables to demonstrate the difference in their scopes.",
    "output": "#include <stdio.h>\n\nint globalVar = 10; // Global variable\n\nint main(void) {\n    int localVar = 20; // Local variable\n    printf(\"Global variable: %d\\n\", globalVar);\n    printf(\"Local variable: %d\\n\", localVar);\n    return 0;\n}",
    "description": "This program uses a global variable `globalVar` and a local variable `localVar`. The global variable is accessible throughout the program, while the local variable is only accessible within the function where it is declared."
  },
  {
    "id": 293,
    "input": "Create a program that uses both a local variable and a global variable with the same name inside a function.",
    "output": "#include <stdio.h>\n\nint value = 50; // Global variable\n\nint main(void) {\n    int value = 100; // Local variable\n    printf(\"Local variable: %d\\n\", value);\n    printf(\"Global variable: %d\\n\", ::value); // Access the global variable\n    return 0;\n}",
    "description": "In this program, both a local variable and a global variable with the same name `value` are used. The local variable takes precedence within its scope, but the global variable can be explicitly accessed using the scope resolution operator `::`."
  },
  {
    "id": 294,
    "input": "Create a program to demonstrate the difference between local scope and block scope.",
    "output": "#include <stdio.h>\n\nint main(void) {\n    int x = 10; // Local scope\n    printf(\"Outer x: %d\\n\", x);\n\n    {\n        int x = 20; // Block scope\n        printf(\"Inner x: %d\\n\", x);\n    }\n\n    printf(\"Outer x (restored): %d\\n\", x);\n    return 0;\n}",
    "description": "This program demonstrates the difference between local scope and block scope by declaring a variable `x` in both an outer local scope and an inner block scope. The inner block scope hides the outer variable, but once the block scope is exited, the outer variable is restored."
  },
  {
    "id": 295,
    "input": "Create a program that uses a static variable to initialize a value only once within a function.",
    "output": "#include <stdio.h>\n\nvoid initializeOnce() {\n    static int initialized = 0; // Static variable\n    if (initialized == 0) {\n        printf(\"Performing initial initialization.\\n\");\n        initialized = 1;\n    } else {\n        printf(\"Already initialized.\\n\");\n    }\n}\n\nint main(void) {\n    initializeOnce();\n    initializeOnce();\n    initializeOnce();\n    return 0;\n}",
    "description": "This program uses a static variable `initialized` to ensure that the initialization is performed only once in the function. The static variable retains its value across function calls, so subsequent calls skip the initialization step."
  },
  {
    "id": 296,
    "input": "Create a basic program that uses multiple functions to manipulate variables in different scopes.",
    "output": "#include <stdio.h>\n\nint globalVar = 0; // Global variable\n\nvoid increment() {\n    globalVar++;\n}\n\nvoid display() {\n    printf(\"Global variable value: %d\\n\", globalVar);\n}\n\nint main(void) {\n    display();\n    increment();\n    display();\n    return 0;\n}",
    "description": "This program demonstrates how multiple functions can share and modify a global variable `globalVar`. The `increment` function modifies the global variable, and the `display` function shows its current value."
  },
  {
    "id": 297,
    "input": "Create a program that temporarily modifies a global variable and then restores it.",
    "output": "#include <stdio.h>\n\nint globalVar = 5; // Global variable\n\nvoid temporaryChange() {\n    int original = globalVar;\n    globalVar = 100;\n    printf(\"Value inside function: %d\\n\", globalVar);\n    globalVar = original;\n}\n\nint main(void) {\n    printf(\"Original value: %d\\n\", globalVar);\n    temporaryChange();\n    printf(\"Restored value: %d\\n\", globalVar);\n    return 0;\n}",
    "description": "This program demonstrates how a global variable can be temporarily modified within a function. The original value is saved, modified, and then restored after the function completes."
  },
  {
    "id": 298,
    "input": "Create a program that shares a global variable between multiple files.",
    "output": "// File 1: main.c\n#include <stdio.h>\n#include \"other.h\"\n\nint globalVar = 10; // Global variable definition\n\nint main(void) {\n    printf(\"Value in main.c: %d\\n\", globalVar);\n    modifyGlobal();\n    printf(\"Value after modification in main.c: %d\\n\", globalVar);\n    return 0;\n}\n\n// File 2: other.c\n#include \"other.h\"\n\nvoid modifyGlobal() {\n    extern int globalVar; // Global variable declaration\n    globalVar += 20;\n}\n\n// File 3: other.h\n#ifndef OTHER_H\n#define OTHER_H\n\nextern void modifyGlobal();\n\n#endif",
    "description": "This program demonstrates how a global variable `globalVar` can be shared between multiple files. The `extern` keyword is used to declare the global variable in another file."
  },
  {
    "id": 299,
    "input": "Create a program that uses a local static variable to retain a value between function calls.",
    "output": "#include <stdio.h>\n\nvoid counter() {\n    static int count = 0;\n    count++;\n    printf(\"Call count: %d\\n\", count);\n}\n\nint main(void) {\n    counter();\n    counter();\n    counter();\n    return 0;\n}",
    "description": "This program uses a static local variable `count` to retain its value between function calls, allowing it to keep track of how many times the function has been called."
  },
  {
    "id": 300,
    "input": "Create an advanced program that combines recursion and scope.",
    "output": "#include <stdio.h>\n\nint sumToN(int n) {\n    static int sum = 0; // Static variable\n    if (n > 0) {\n        sum += n;\n        return sumToN(n - 1);\n    }\n    return sum;\n}\n\nint main(void) {\n    int result = sumToN(5);\n    printf(\"Sum from 1 to 5: %d\\n\", result);\n    return 0;\n}",
    "description": "This program combines recursion and static variables to calculate the sum of numbers from 1 to `n`. The static variable `sum` retains its value across recursive calls."
  }
]