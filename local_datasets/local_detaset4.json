[
  {
    "id": 601,
    "input": "Write a C program that handles division by zero error.",
    "output": "#include <stdio.h>\n\nint main() {\n    int a, b;\n    printf(\"Enter two integers: \");\n    scanf(\"%d %d\", &a, &b);\n    if (b == 0) {\n        printf(\"Error: Division by zero is not allowed.\\n\");\n    } else {\n        printf(\"Result: %d\\n\", a / b);\n    }\n    return 0;\n}",
    "description": "This program handles division by zero error."
  },
  {
    "id": 602,
    "input": "Write a C program that checks for invalid input when reading an integer.",
    "output": "#include <stdio.h>\n\nint main() {\n    int num;\n    printf(\"Enter an integer: \");\n    if (scanf(\"%d\", &num) != 1) {\n        printf(\"Error: Invalid input. Please enter a valid integer.\\n\");\n    } else {\n        printf(\"You entered: %d\\n\", num);\n    }\n    return 0;\n}",
    "description": "This program checks for invalid input when reading an integer."
  },
  {
    "id": 603,
    "input": "Write a C program that checks if a file exists before opening it.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    FILE *file;\n    char filename[100];\n    printf(\"Enter the filename to open: \");\n    scanf(\"%s\", filename);\n    file = fopen(filename, \"r\");\n    if (file == NULL) {\n        printf(\"Error: File does not exist.\\n\");\n    } else {\n        printf(\"File opened successfully.\\n\");\n        fclose(file);\n    }\n    return 0;\n}",
    "description": "This program checks if a file exists before opening it."
  },
  {
    "id": 604,
    "input": "Write a C program that handles memory allocation failure.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int *arr;\n    arr = (int *)malloc(10 * sizeof(int));\n    if (arr == NULL) {\n        printf(\"Error: Memory allocation failed.\\n\");\n        return 1;\n    }\n    printf(\"Memory allocation successful.\\n\");\n    free(arr);\n    return 0;\n}",
    "description": "This program handles memory allocation failure."
  },
  {
    "id": 605,
    "input": "Write a C program that checks if an array index is out of bounds.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int index;\n    printf(\"Enter an index: \");\n    scanf(\"%d\", &index);\n    if (index < 0 || index >= 5) {\n        printf(\"Error: Index out of bounds.\\n\");\n    } else {\n        printf(\"Array element at index %d: %d\\n\", index, arr[index]);\n    }\n    return 0;\n}",
    "description": "This program checks if an array index is out of bounds."
  },
  {
    "id": 606,
    "input": "Write a C program that checks for file read errors.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    FILE *file;\n    char ch;\n    file = fopen(\"example.txt\", \"r\");\n    if (file == NULL) {\n        printf(\"Error: File could not be opened.\\n\");\n        return 1;\n    }\n    if (fgetc(file) == EOF) {\n        printf(\"Error: Could not read from file.\\n\");\n    } else {\n        printf(\"File read successfully.\\n\");\n    }\n    fclose(file);\n    return 0;\n}",
    "description": "This program checks for file read errors."
  },
  {
    "id": 607,
    "input": "Write a C program that handles invalid input when reading a float.",
    "output": "#include <stdio.h>\n\nint main() {\n    float num;\n    printf(\"Enter a float number: \");\n    if (scanf(\"%f\", &num) != 1) {\n        printf(\"Error: Invalid input. Please enter a valid float number.\\n\");\n    } else {\n        printf(\"You entered: %.2f\\n\", num);\n    }\n    return 0;\n}",
    "description": "This program handles invalid input when reading a float."
  },
  {
    "id": 608,
    "input": "Write a C program that handles invalid memory access.",
    "output": "#include <stdio.h>\n\nint main() {\n    int *ptr = NULL;\n    if (ptr == NULL) {\n        printf(\"Error: Attempt to access null pointer.\\n\");\n    } else {\n        printf(\"Pointer value: %d\\n\", *ptr);\n    }\n    return 0;\n}",
    "description": "This program handles invalid memory access."
  },
  {
    "id": 609,
    "input": "Write a C program that catches a negative number when calculating the square root.",
    "output": "#include <stdio.h>\n    #include <math.h>\n\nint main() {\n    double num, result;\n    printf(\"Enter a number: \");\n    scanf(\"%lf\", &num);\n    if (num < 0) {\n        printf(\"Error: Cannot calculate square root of a negative number.\\n\");\n    } else {\n        result = sqrt(num);\n        printf(\"The square root is: %.2f\\n\", result);\n    }\n    return 0;\n}",
    "description": "This program handles errors when calculating the square root of a negative number."
  },
  {
    "id": 610,
    "input": "Write a C program that handles a file write error.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    FILE *file;\n    file = fopen(\"output.txt\", \"w\");\n    if (file == NULL) {\n        printf(\"Error: Could not open file for writing.\\n\");\n        return 1;\n    }\n    fprintf(file, \"Hello, file!\");\n    if (ferror(file)) {\n        printf(\"Error: Write failed.\\n\");\n    } else {\n        printf(\"Data written successfully.\\n\");\n    }\n    fclose(file);\n    return 0;\n}",
    "description": "This program handles file write errors."
  },
  {
    "id": 611,
    "input": "Write a C program that checks for file close errors.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    FILE *file;\n    file = fopen(\"example.txt\", \"r\");\n    if (file == NULL) {\n        printf(\"Error: File could not be opened.\\n\");\n        return 1;\n    }\n    printf(\"File opened successfully.\\n\");\n    if (fclose(file) != 0) {\n        printf(\"Error: File close failed.\\n\");\n    } else {\n        printf(\"File closed successfully.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks for file close errors."
  },
  {
    "id": 612,
    "input": "Write a C program that handles a negative array size.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int size;\n    printf(\"Enter the size of the array: \");\n    scanf(\"%d\", &size);\n    if (size < 0) {\n        printf(\"Error: Array size cannot be negative.\\n\");\n    } else {\n        int *arr = (int *)malloc(size * sizeof(int));\n        if (arr == NULL) {\n            printf(\"Error: Memory allocation failed.\\n\");\n        } else {\n            printf(\"Array created successfully.\\n\");\n            free(arr);\n        }\n    }\n    return 0;\n}",
    "description": "This program handles a negative array size error."
  },
  {
    "id": 613,
    "input": "Write a C program that handles division by zero in floating-point calculations.",
    "output": "#include <stdio.h>\n\nint main() {\n    float a, b;\n    printf(\"Enter two floating-point numbers: \");\n    scanf(\"%f %f\", &a, &b);\n    if (b == 0.0) {\n        printf(\"Error: Division by zero is not allowed.\\n\");\n    } else {\n        printf(\"Result: %.2f\\n\", a / b);\n    }\n    return 0;\n}",
    "description": "This program handles division by zero in floating-point calculations."
  },
  {
    "id": 614,
    "input": "Write a C program that checks for invalid pointer dereferencing.",
    "output": "#include <stdio.h>\n\nint main() {\n    int *ptr = NULL;\n    if (ptr == NULL) {\n        printf(\"Error: Null pointer dereferencing.\\n\");\n    } else {\n        printf(\"Pointer value: %d\\n\", *ptr);\n    }\n    return 0;\n}",
    "description": "This program checks for invalid pointer dereferencing."
  },
  {
    "id": 615,
    "input": "Write a C program that handles invalid memory freeing.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int *ptr = NULL;\n    free(ptr);\n    printf(\"Memory freed successfully.\\n\");\n    return 0;\n}",
    "description": "This program handles invalid memory freeing (freeing a NULL pointer)."
  },
  {
    "id": 616,
    "input": "Write a C program that checks if a user inputs a negative value when calculating the square root.",
    "output": "#include <stdio.h>\n#include <math.h>\n\nint main() {\n    double num, result;\n    printf(\"Enter a number: \");\n    scanf(\"%lf\", &num);\n    if (num < 0) {\n        printf(\"Error: Cannot calculate square root of a negative number.\\n\");\n    } else {\n        result = sqrt(num);\n        printf(\"The square root is: %.2f\\n\", result);\n    }\n    return 0;\n}",
    "description": "This program checks for negative values when calculating the square root."
  },
  {
    "id": 617,
    "input": "Write a C program that handles invalid file format error when opening a file.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    FILE *file;\n    file = fopen(\"invalid_file.xyz\", \"r\");\n    if (file == NULL) {\n        printf(\"Error: Invalid file format or file does not exist.\\n\");\n    } else {\n        printf(\"File opened successfully.\\n\");\n        fclose(file);\n    }\n    return 0;\n}",
    "description": "This program handles invalid file format errors when opening a file."
  },
  {
    "id": 618,
    "input": "Write a C program that handles memory allocation failure when allocating a large array.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int *arr;\n    arr = (int *)malloc(100000000 * sizeof(int));\n    if (arr == NULL) {\n        printf(\"Error: Memory allocation failed for large array.\\n\");\n    } else {\n        printf(\"Memory allocated successfully for large array.\\n\");\n        free(arr);\n    }\n    return 0;\n}",
    "description": "This program handles memory allocation failure when allocating a large array."
  },
  {
    "id": 619,
    "input": "Write a C program that handles a failed attempt to write to a file.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    FILE *file;\n    file = fopen(\"output.txt\", \"w\");\n    if (file == NULL) {\n        printf(\"Error: Could not open file for writing.\\n\");\n        return 1;\n    }\n    if (fprintf(file, \"This is a test.\") < 0) {\n        printf(\"Error: Failed to write to file.\\n\");\n    } else {\n        printf(\"Data written successfully.\\n\");\n    }\n    fclose(file);\n    return 0;\n}",
    "description": "This program handles a failed attempt to write to a file."
  },
  {
    "id": 620,
    "input": "Write a C program that checks for an out-of-range value when using `scanf`.",
    "output": "#include <stdio.h>\n\nint main() {\n    int num;\n    printf(\"Enter an integer: \");\n    if (scanf(\"%d\", &num) != 1 || num < 0) {\n        printf(\"Error: Invalid or out-of-range input.\\n\");\n    } else {\n        printf(\"You entered: %d\\n\", num);\n    }\n    return 0;\n}",
    "description": "This program checks for out-of-range values when using `scanf`."
  },
  {
    "id": 621,
    "input": "Write a C program that handles multiple file operations (open, read, write, close) with error handling in functions.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint open_file(FILE **file, const char *filename) {\n    *file = fopen(filename, \"r\");\n    if (*file == NULL) {\n        return -1;\n    }\n    return 0;\n}\n\nint read_file(FILE *file) {\n    char ch;\n    while ((ch = fgetc(file)) != EOF) {\n        putchar(ch);\n    }\n    if (ferror(file)) {\n        return -1;\n    }\n    return 0;\n}\n\nint close_file(FILE *file) {\n    if (fclose(file) != 0) {\n        return -1;\n    }\n    return 0;\n}\n\nint main() {\n    FILE *file;\n    if (open_file(&file, \"example.txt\") != 0) {\n        printf(\"Error: Could not open file.\\n\");\n        return 1;\n    }\n    if (read_file(file) != 0) {\n        printf(\"Error: Failed to read file.\\n\");\n        close_file(file);\n        return 1;\n    }\n    if (close_file(file) != 0) {\n        printf(\"Error: Failed to close file.\\n\");\n        return 1;\n    }\n    return 0;\n}",
    "description": "This program uses functions for opening, reading, and closing a file with error handling."
  },
  {
    "id": 622,
    "input": "Write a C program that performs dynamic memory allocation for a 2D array with error handling in functions.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint allocate_array(int ***arr, int rows, int cols) {\n    *arr = (int **)malloc(rows * sizeof(int *));\n    if (*arr == NULL) {\n        return -1;\n    }\n    for (int i = 0; i < rows; i++) {\n        (*arr)[i] = (int *)malloc(cols * sizeof(int));\n        if ((*arr)[i] == NULL) {\n            return -1;\n        }\n    }\n    return 0;\n}\n\nvoid free_array(int **arr, int rows) {\n    for (int i = 0; i < rows; i++) {\n        free(arr[i]);\n    }\n    free(arr);\n}\n\nint main() {\n    int **array;\n    int rows = 3, cols = 4;\n    if (allocate_array(&array, rows, cols) != 0) {\n        printf(\"Error: Memory allocation failed.\\n\");\n        return 1;\n    }\n    printf(\"Memory allocation successful.\\n\");\n    free_array(array, rows);\n    return 0;\n}",
    "description": "This program handles dynamic memory allocation for a 2D array with error handling in functions."
  },
  {
    "id": 623,
    "input": "Write a C program that handles file I/O errors with custom error codes and a separate error-handling function.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\n#define FILE_OPEN_ERROR 1\n#define FILE_READ_ERROR 2\n#define FILE_WRITE_ERROR 3\n#define FILE_CLOSE_ERROR 4\n\nvoid handle_error(int error_code) {\n    switch (error_code) {\n        case FILE_OPEN_ERROR: printf(\"Error: Unable to open file.\\n\"); break;\n        case FILE_READ_ERROR: printf(\"Error: Failed to read from file.\\n\"); break;\n        case FILE_WRITE_ERROR: printf(\"Error: Failed to write to file.\\n\"); break;\n        case FILE_CLOSE_ERROR: printf(\"Error: Failed to close file.\\n\"); break;\n        default: printf(\"Error: Unknown error occurred.\\n\");\n    }\n}\n\nint main() {\n    FILE *file = fopen(\"example.txt\", \"r\");\n    if (file == NULL) {\n        handle_error(FILE_OPEN_ERROR);\n        return 1;\n    }\n    char ch;\n    if (fread(&ch, sizeof(char), 1, file) != 1) {\n        handle_error(FILE_READ_ERROR);\n        fclose(file);\n        return 1;\n    }\n    printf(\"Read character: %c\\n\", ch);\n    if (fclose(file) != 0) {\n        handle_error(FILE_CLOSE_ERROR);\n        return 1;\n    }\n    return 0;\n}",
    "description": "This program uses custom error codes and a separate error-handling function to manage file I/O errors."
  },
  {
    "id": 624,
    "input": "Write a C program that handles invalid input using a function and a return code.",
    "output": "#include <stdio.h>\n\nint get_integer(int *num) {\n    if (scanf(\"%d\", num) != 1) {\n        return -1;\n    }\n    return 0;\n}\n\nint main() {\n    int number;\n    printf(\"Enter an integer: \");\n    if (get_integer(&number) != 0) {\n        printf(\"Error: Invalid input.\\n\");\n        return 1;\n    }\n    printf(\"You entered: %d\\n\", number);\n    return 0;\n}",
    "description": "This program uses a function to handle invalid input with a return code."
  },
  {
    "id": 625,
    "input": "Write a C program that performs array bounds checking inside a function.",
    "output": "#include <stdio.h>\n\nint access_element(int *arr, int index, int size) {\n    if (index < 0 || index >= size) {\n        return -1;\n    }\n    return arr[index];\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int index = 6;\n    int value = access_element(arr, index, size);\n    if (value == -1) {\n        printf(\"Error: Index out of bounds.\\n\");\n        return 1;\n    }\n    printf(\"Element at index %d is %d\\n\", index, value);\n    return 0;\n}",
    "description": "This program performs array bounds checking inside a function."
  },
  {
    "id": 626,
    "input": "Write a C program that checks for invalid memory access using a pointer.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int *ptr = NULL;\n    if (ptr == NULL) {\n        printf(\"Error: Attempted to dereference a NULL pointer.\\n\");\n        return 1;\n    }\n    *ptr = 42;\n    printf(\"Pointer value: %d\\n\", *ptr);\n    return 0;\n}",
    "description": "This program checks for invalid memory access using a NULL pointer."
  },
  {
    "id": 627,
    "input": "Write a C program that handles an invalid division operation using a function.",
    "output": "#include <stdio.h>\n\nint divide(int a, int b, float *result) {\n    if (b == 0) {\n        return -1;\n    }\n    *result = (float)a / b;\n    return 0;\n}\n\nint main() {\n    int a = 10, b = 0;\n    float result;\n    if (divide(a, b, &result) != 0) {\n        printf(\"Error: Division by zero.\\n\");\n        return 1;\n    }\n    printf(\"Result: %.2f\\n\", result);\n    return 0;\n}",
    "description": "This program handles division by zero using a function."
  },
  {
    "id": 628,
    "input": "Write a C program that checks for a failed allocation of a large structure.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct LargeStructure {\n    int data[10000];\n};\n\nint main() {\n    struct LargeStructure *ptr = (struct LargeStructure *)malloc(sizeof(struct LargeStructure));\n    if (ptr == NULL) {\n        printf(\"Error: Memory allocation for structure failed.\\n\");\n        return 1;\n    }\n    printf(\"Memory allocation successful.\\n\");\n    free(ptr);\n    return 0;\n}",
    "description": "This program checks for a failed allocation of a large structure."
  },
  {
    "id": 629,
    "input": "Write a C program that handles file writing with error checking for write failures.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint write_to_file(FILE *file, const char *data) {\n    if (fputs(data, file) == EOF) {\n        return -1;\n    }\n    return 0;\n}\n\nint main() {\n    FILE *file = fopen(\"output.txt\", \"w\");\n    if (file == NULL) {\n        printf(\"Error: Could not open file for writing.\\n\");\n        return 1;\n    }\n    const char *data = \"Hello, world!\";\n    if (write_to_file(file, data) != 0) {\n        printf(\"Error: Failed to write to file.\\n\");\n        fclose(file);\n        return 1;\n    }\n    printf(\"Data written successfully.\\n\");\n    fclose(file);\n    return 0;\n}",
    "description": "This program handles file writing with error checking for write failures."
  },
  {
    "id": 630,
    "input": "Write a C program that uses a function to check for invalid string input (non-numeric input).",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\nint is_valid_integer(const char *str) {\n    while (*str) {\n        if (!isdigit(*str)) {\n            return 0;\n        }\n        str++;\n    }\n    return 1;\n}\n\nint main() {\n    char input[20];\n    printf(\"Enter an integer: \");\n    fgets(input, sizeof(input), stdin);\n    if (!is_valid_integer(input)) {\n        printf(\"Error: Invalid input, please enter a valid integer.\\n\");\n        return 1;\n    }\n    printf(\"You entered: %s\\n\", input);\n    return 0;\n}",
    "description": "This program checks for invalid string input (non-numeric input) using a function."
  },
  {
    "id": 631,
    "input": "Write a C program using <errno.h> to handle file I/O errors with predefined error codes.",
    "output": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n\nint main() {\n    FILE *file = fopen(\"nonexistent.txt\", \"r\");\n    if (file == NULL) {\n        printf(\"Error: %s\\n\", strerror(errno));\n        return 1;\n    }\n    fclose(file);\n    return 0;\n}",
    "description": "This program uses the `errno.h` library to handle file I/O errors and display the corresponding error message using `strerror`."
  },
  {
    "id": 632,
    "input": "Write a C program that handles memory allocation errors using `malloc` and checks the allocated memory with `errno`.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\n#include <string.h>\n\nint main() {\n    int *arr = (int *)malloc(1000000000 * sizeof(int));\n    if (arr == NULL) {\n        printf(\"Memory allocation failed: %s\\n\", strerror(errno));\n        return 1;\n    }\n    free(arr);\n    return 0;\n}",
    "description": "This program handles memory allocation errors using `malloc` and checks for errors with `errno`."
  },
  {
    "id": 633,
    "input": "Write a C program that uses `setjmp` and `longjmp` for error handling and jumps back to the error handler in case of memory allocation failure.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n#include <setjmp.h>\n\njmp_buf env;\n\nvoid allocate_memory() {\n    int *arr = (int *)malloc(1000000000 * sizeof(int));\n    if (arr == NULL) {\n        longjmp(env, 1);\n    }\n    free(arr);\n}\n\nint main() {\n    if (setjmp(env) != 0) {\n        printf(\"Error: Memory allocation failed!\\n\");\n        return 1;\n    }\n    allocate_memory();\n    printf(\"Memory allocation successful.\\n\");\n    return 0;\n}",
    "description": "This program uses `setjmp` and `longjmp` for error handling, where `longjmp` is used to jump back to the error handler on memory allocation failure."
  },
  {
    "id": 634,
    "input": "Write a C program that uses the `assert` macro to handle invalid conditions and stop the execution of the program.",
    "output": "#include <stdio.h>\n#include <assert.h>\n\nint divide(int a, int b) {\n    assert(b != 0);  // Ensure no division by zero\n    return a / b;\n}\n\nint main() {\n    int a = 10, b = 0;\n    printf(\"Result: %d\\n\", divide(a, b));\n    return 0;\n}",
    "description": "This program uses the `assert` macro to handle invalid conditions (e.g., division by zero) and terminates the program with an error message."
  },
  {
    "id": 635,
    "input": "Write a C program using a custom error handling function and logging errors to a file.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid log_error(const char *message) {\n    FILE *log_file = fopen(\"error_log.txt\", \"a\");\n    if (log_file == NULL) {\n        printf(\"Error: Could not open log file.\\n\");\n        return;\n    }\n    fprintf(log_file, \"%s\\n\", message);\n    fclose(log_file);\n}\n\nint main() {\n    FILE *file = fopen(\"nonexistent.txt\", \"r\");\n    if (file == NULL) {\n        log_error(\"Error: Could not open file.\");\n        return 1;\n    }\n    fclose(file);\n    return 0;\n}",
    "description": "This program uses a custom `log_error` function to log errors into a file."
  },
  {
    "id": 636,
    "input": "Write a C program that uses the `perror` function to handle standard library errors.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    FILE *file = fopen(\"nonexistent.txt\", \"r\");\n    if (file == NULL) {\n        perror(\"File open error\");\n        return 1;\n    }\n    fclose(file);\n    return 0;\n}",
    "description": "This program uses the `perror` function to print a descriptive error message based on the most recent library error."
  },
  {
    "id": 637,
    "input": "Write a C program that uses a custom error code system with predefined constants for file and memory errors.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\n#define FILE_ERROR 1\n#define MEMORY_ERROR 2\n\nvoid handle_error(int error_code) {\n    switch (error_code) {\n        case FILE_ERROR: printf(\"File error occurred.\\n\"); break;\n        case MEMORY_ERROR: printf(\"Memory allocation failed.\\n\"); break;\n        default: printf(\"Unknown error occurred.\\n\");\n    }\n}\n\nint main() {\n    FILE *file = fopen(\"nonexistent.txt\", \"r\");\n    if (file == NULL) {\n        handle_error(FILE_ERROR);\n        return 1;\n    }\n    fclose(file);\n    int *arr = (int *)malloc(1000000000 * sizeof(int));\n    if (arr == NULL) {\n        handle_error(MEMORY_ERROR);\n        return 1;\n    }\n    free(arr);\n    return 0;\n}",
    "description": "This program uses a custom error code system to handle file and memory errors."
  },
  {
    "id": 638,
    "input": "Write a C program that uses `ferror` to check if an error occurred during file operations.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    FILE *file = fopen(\"nonexistent.txt\", \"r\");\n    if (file == NULL) {\n        printf(\"Error: Unable to open file.\\n\");\n        return 1;\n    }\n    char buffer[100];\n    if (fread(buffer, sizeof(char), 100, file) != 100 && ferror(file)) {\n        printf(\"Error: File read failed.\\n\");\n        fclose(file);\n        return 1;\n    }\n    fclose(file);\n    return 0;\n}",
    "description": "This program uses `ferror` to check if an error occurred during a file read operation."
  },
  {
    "id": 639,
    "input": "Write a C program that uses `strerror` to handle invalid system calls.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n\nint main() {\n    if (remove(\"nonexistent.txt\") != 0) {\n        printf(\"Error: %s\\n\", strerror(errno));\n        return 1;\n    }\n    return 0;\n}",
    "description": "This program uses `strerror` to handle system call errors like file removal and display the corresponding error message."
  },
  {
    "id": 640,
    "input": "Write a C program using a custom error handling library that logs errors to a file and terminates the program.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// Custom error handling functions\nvoid log_error(const char *message) {\n    FILE *file = fopen(\"error.log\", \"a\");\n    if (file != NULL) {\n        fprintf(file, \"%s\\n\", message);\n        fclose(file);\n    }\n}\n\nvoid terminate_program(const char *message) {\n    log_error(message);\n    printf(\"Error: %s\\n\", message);\n    exit(1);\n}\n\nint main() {\n    FILE *file = fopen(\"nonexistent.txt\", \"r\");\n    if (file == NULL) {\n        terminate_program(\"File could not be opened.\");\n    }\n    fclose(file);\n    return 0;\n}",
    "description": "This program uses a custom error handling library that logs errors to a file and terminates the program."
  },
  {
    "id": 641,
    "input": "Write a C program that handles file read errors using `ferror` and logs the error message.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    FILE *file = fopen(\"nonexistent.txt\", \"r\");\n    if (file == NULL) {\n        printf(\"Error: Unable to open file.\\n\");\n        return 1;\n    }\n    char buffer[100];\n    if (fread(buffer, sizeof(char), 100, file) != 100 && ferror(file)) {\n        printf(\"Error: File read failed.\\n\");\n        fclose(file);\n        return 1;\n    }\n    fclose(file);\n    return 0;\n}",
    "description": "This program handles file read errors using `ferror` and prints an error message if the read operation fails."
  },
  {
    "id": 642,
    "input": "Write a C program that handles file opening and memory allocation errors using a custom error handler.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid handle_error(const char *message) {\n    fprintf(stderr, \"Error: %s\\n\", message);\n    exit(1);\n}\n\nint main() {\n    FILE *file = fopen(\"nonexistent.txt\", \"r\");\n    if (file == NULL) {\n        handle_error(\"Failed to open file.\");\n    }\n    int *arr = malloc(sizeof(int) * 100);  // Simulating memory allocation failure\n    if (arr == NULL) {\n        handle_error(\"Memory allocation failed.\");\n    }\n    fclose(file);\n    free(arr);\n    return 0;\n}",
    "description": "This program uses a custom error handler to deal with file opening and memory allocation failures."
  },
  {
    "id": 643,
    "input": "Write a C program that uses `longjmp` and `setjmp` to handle a division by zero error.",
    "output": "#include <stdio.h>\n#include <setjmp.h>\n\njmp_buf env;\n\nint divide(int a, int b) {\n    if (b == 0) {\n        longjmp(env, 1);  // Jump to error handler\n    }\n    return a / b;\n}\n\nint main() {\n    if (setjmp(env) != 0) {\n        printf(\"Error: Division by zero.\\n\");\n        return 1;\n    }\n    int result = divide(10, 0);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}",
    "description": "This program uses `setjmp` and `longjmp` to handle division by zero errors, jumping to an error handler."
  },
  {
    "id": 644,
    "input": "Write a C program that handles invalid file access using `perror` and terminates the program.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    FILE *file = fopen(\"nonexistent.txt\", \"r\");\n    if (file == NULL) {\n        perror(\"File open error\");\n        exit(1);\n    }\n    fclose(file);\n    return 0;\n}",
    "description": "This program uses `perror` to print a descriptive error message and terminate the program if file access fails."
  },
  {
    "id": 645,
    "input": "Write a C program that uses `assert` to check array bounds before accessing an element.",
    "output": "#include <stdio.h>\n#include <assert.h>\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int index = 6;\n    assert(index >= 0 && index < 5);  // Ensure index is within bounds\n    printf(\"Element at index %d: %d\\n\", index, arr[index]);\n    return 0;\n}",
    "description": "This program uses `assert` to ensure that an array index is within bounds before accessing the element."
  },
  {
    "id": 646,
    "input": "Write a C program that uses a custom error handler to manage invalid input from the user.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid handle_error(const char *message) {\n    fprintf(stderr, \"Error: %s\\n\", message);\n    exit(1);\n}\n\nint main() {\n    int num;\n    printf(\"Enter an integer: \");\n    if (scanf(\"%d\", &num) != 1) {\n        handle_error(\"Invalid input. Please enter an integer.\");\n    }\n    printf(\"You entered: %d\\n\", num);\n    return 0;\n}",
    "description": "This program uses a custom error handler to manage invalid user input and terminate the program if the input is not an integer."
  },
  {
    "id": 647,
    "input": "Write a C program that uses `ferror` to check if an error occurred during a file operation and logs the error.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    FILE *file = fopen(\"nonexistent.txt\", \"r\");\n    if (file == NULL) {\n        printf(\"Error: Unable to open file.\\n\");\n        return 1;\n    }\n    char buffer[100];\n    if (fread(buffer, sizeof(char), 100, file) != 100) {\n        if (ferror(file)) {\n            printf(\"Error: File read failed.\\n\");\n            fclose(file);\n            return 1;\n        }\n    }\n    fclose(file);\n    return 0;\n}",
    "description": "This program uses `ferror` to check if an error occurred during a file operation and logs the error if necessary."
  },
  {
    "id": 648,
    "input": "Write a C program that uses `malloc` to allocate memory and checks if the allocation was successful using `errno`.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\n#include <string.h>\n\nint main() {\n    int *arr = (int *)malloc(1000000000 * sizeof(int));\n    if (arr == NULL) {\n        printf(\"Error: Memory allocation failed. %s\\n\", strerror(errno));\n        return 1;\n    }\n    free(arr);\n    return 0;\n}",
    "description": "This program uses `malloc` to allocate memory and checks for failure using `errno`."
  },
  {
    "id": 649,
    "input": "Write a C program that handles a custom error by using `longjmp` for non-fatal errors and `exit` for fatal errors.",
    "output": "#include <stdio.h>\n#include <setjmp.h>\n#include <stdlib.h>\n\njmp_buf env;\n\nvoid handle_error(int fatal) {\n    if (fatal) {\n        printf(\"Fatal error: Exiting program.\\n\");\n        exit(1);\n    }\n    longjmp(env, 1);  // Non-fatal error handling\n}\n\nint main() {\n    if (setjmp(env) != 0) {\n        printf(\"Error occurred, but continuing...\\n\");\n        return 1;\n    }\n    int x = 10, y = 0;\n    if (y == 0) {\n        handle_error(0);  // Non-fatal error\n    }\n    printf(\"Result: %d\\n\", x / y);\n    return 0;\n}",
    "description": "This program uses both `longjmp` and `exit` for different error handling strategies, depending on whether the error is fatal or non-fatal."
  },
  {
    "id": 650,
    "input": "Write a C program that uses `fopen` with error handling for various modes (read, write) and checks for errors.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    FILE *file = fopen(\"nonexistent.txt\", \"r\");\n    if (file == NULL) {\n        perror(\"Error opening file for reading\");\n        return 1;\n    }\n    fclose(file);\n\n    file = fopen(\"readonly.txt\", \"w\");\n    if (file == NULL) {\n        perror(\"Error opening file for writing\");\n        return 1;\n    }\n    fclose(file);\n\n    return 0;\n}",
    "description": "This program handles errors for both reading and writing files by checking the file pointer and using `perror` to display descriptive error messages."
  },
  {
    "id": 651,
    "input": "Write a C program that declares an integer array of size 5 and assigns values to each element.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    for (int i = 0; i < 5; i++) {\n        printf(\"arr[%d] = %d\\n\", i, arr[i]);\n    }\n    return 0;\n}",
    "description": "This program declares an integer array of size 5 and prints the values of each element using a loop."
  },
  {
    "id": 652,
    "input": "Write a C program that initializes an array with values input by the user and prints them.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5];\n    printf(\"Enter 5 integers: \");\n    for (int i = 0; i < 5; i++) {\n        scanf(\"%d\", &arr[i]);\n    }\n    printf(\"You entered: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}",
    "description": "This program accepts 5 integers from the user, stores them in an array, and then prints them."
  },
  {
    "id": 653,
    "input": "Write a C program that finds the largest element in an array.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {3, 7, 2, 8, 5};\n    int max = arr[0];\n    for (int i = 1; i < 5; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    printf(\"The largest element is %d\\n\", max);\n    return 0;\n}",
    "description": "This program finds and prints the largest element in a statically initialized array of 5 integers."
  },
  {
    "id": 654,
    "input": "Write a C program that sums all elements of an array.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int sum = 0;\n    for (int i = 0; i < 5; i++) {\n        sum += arr[i];\n    }\n    printf(\"The sum of the array elements is %d\\n\", sum);\n    return 0;\n}",
    "description": "This program calculates and prints the sum of all elements in an array."
  },
  {
    "id": 655,
    "input": "Write a C program that reverses the elements of an array.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int temp;\n    for (int i = 0; i < 2; i++) {\n        temp = arr[i];\n        arr[i] = arr[4 - i];\n        arr[4 - i] = temp;\n    }\n    printf(\"Reversed array: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}",
    "description": "This program reverses the elements of an array in place and prints the reversed array."
  },
  {
    "id": 656,
    "input": "Write a C program that copies elements from one array to another.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr1[5] = {1, 2, 3, 4, 5};\n    int arr2[5];\n    for (int i = 0; i < 5; i++) {\n        arr2[i] = arr1[i];\n    }\n    printf(\"Elements of arr2: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr2[i]);\n    }\n    return 0;\n}",
    "description": "This program copies the elements from one array to another and prints the copied elements."
  },
  {
    "id": 657,
    "input": "Write a C program that searches for a specific value in an array.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {10, 20, 30, 40, 50};\n    int value = 30;\n    int found = 0;\n    for (int i = 0; i < 5; i++) {\n        if (arr[i] == value) {\n            printf(\"Value %d found at index %d\\n\", value, i);\n            found = 1;\n            break;\n        }\n    }\n    if (!found) {\n        printf(\"Value not found in the array.\\n\");\n    }\n    return 0;\n}",
    "description": "This program searches for a specific value in an array and reports its index if found."
  },
  {
    "id": 658,
    "input": "Write a C program that counts the number of even numbers in an array.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int even_count = 0;\n    for (int i = 0; i < 5; i++) {\n        if (arr[i] % 2 == 0) {\n            even_count++;\n        }\n    }\n    printf(\"Number of even numbers: %d\\n\", even_count);\n    return 0;\n}",
    "description": "This program counts and prints the number of even numbers in an array."
  },
  {
    "id": 659,
    "input": "Write a C program that finds the average of elements in an array.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int sum = 0;\n    for (int i = 0; i < 5; i++) {\n        sum += arr[i];\n    }\n    float average = (float)sum / 5;\n    printf(\"The average of the array elements is %.2f\\n\", average);\n    return 0;\n}",
    "description": "This program calculates and prints the average of elements in an array."
  },
  {
    "id": 660,
    "input": "Write a C program that checks if an array is sorted in ascending order.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int sorted = 1;\n    for (int i = 0; i < 4; i++) {\n        if (arr[i] > arr[i + 1]) {\n            sorted = 0;\n            break;\n        }\n    }\n    if (sorted) {\n        printf(\"Array is sorted in ascending order.\\n\");\n    } else {\n        printf(\"Array is not sorted in ascending order.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks if an array is sorted in ascending order and prints the result."
  },
  {
    "id": 661,
    "input": "Write a C program that finds the smallest element in an array.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {10, 3, 7, 2, 8};\n    int min = arr[0];\n    for (int i = 1; i < 5; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    printf(\"The smallest element is %d\\n\", min);\n    return 0;\n}",
    "description": "This program finds and prints the smallest element in a statically initialized array of 5 integers."
  },
  {
    "id": 662,
    "input": "Write a C program that doubles the elements of an array.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    for (int i = 0; i < 5; i++) {\n        arr[i] = arr[i] * 2;\n    }\n    printf(\"Doubled array: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}",
    "description": "This program doubles each element of an array and prints the updated array."
  },
  {
    "id": 663,
    "input": "Write a C program that multiplies each element of an array by a constant value.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int factor = 3;\n    for (int i = 0; i < 5; i++) {\n        arr[i] *= factor;\n    }\n    printf(\"Array after multiplication by %d: \", factor);\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}",
    "description": "This program multiplies each element of an array by a constant factor and prints the result."
  },
  {
    "id": 664,
    "input": "Write a C program that counts the number of odd numbers in an array.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int odd_count = 0;\n    for (int i = 0; i < 5; i++) {\n        if (arr[i] % 2 != 0) {\n            odd_count++;\n        }\n    }\n    printf(\"Number of odd numbers: %d\\n\", odd_count);\n    return 0;\n}",
    "description": "This program counts and prints the number of odd numbers in an array."
  },
  {
    "id": 665,
    "input": "Write a C program that creates a new array by adding the corresponding elements of two arrays.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr1[5] = {1, 2, 3, 4, 5};\n    int arr2[5] = {5, 4, 3, 2, 1};\n    int sum_arr[5];\n    for (int i = 0; i < 5; i++) {\n        sum_arr[i] = arr1[i] + arr2[i];\n    }\n    printf(\"Sum of arrays: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", sum_arr[i]);\n    }\n    return 0;\n}",
    "description": "This program adds the corresponding elements of two arrays and stores the result in a new array."
  },
  {
    "id": 666,
    "input": "Write a C program that finds the second largest element in an array.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {10, 20, 30, 40, 50};\n    int largest = arr[0], second_largest = arr[0];\n    for (int i = 1; i < 5; i++) {\n        if (arr[i] > largest) {\n            second_largest = largest;\n            largest = arr[i];\n        } else if (arr[i] > second_largest) {\n            second_largest = arr[i];\n        }\n    }\n    printf(\"The second largest element is %d\\n\", second_largest);\n    return 0;\n}",
    "description": "This program finds and prints the second largest element in an array."
  },
  {
    "id": 667,
    "input": "Write a C program that checks if two arrays are equal (have the same elements in the same order).",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr1[5] = {1, 2, 3, 4, 5};\n    int arr2[5] = {1, 2, 3, 4, 5};\n    int equal = 1;\n    for (int i = 0; i < 5; i++) {\n        if (arr1[i] != arr2[i]) {\n            equal = 0;\n            break;\n        }\n    }\n    if (equal) {\n        printf(\"Arrays are equal.\\n\");\n    } else {\n        printf(\"Arrays are not equal.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks if two arrays have the same elements in the same order."
  },
  {
    "id": 668,
    "input": "Write a C program that shifts the elements of an array to the right by one position.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int last = arr[4];\n    for (int i = 3; i >= 0; i--) {\n        arr[i + 1] = arr[i];\n    }\n    arr[0] = last;\n    printf(\"Array after right shift: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}",
    "description": "This program shifts the elements of an array to the right by one position."
  },
  {
    "id": 669,
    "input": "Write a C program that removes duplicate elements from an array.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[6] = {1, 2, 3, 2, 4, 1};\n    int new_arr[6];\n    int k = 0;\n    for (int i = 0; i < 6; i++) {\n        int flag = 0;\n        for (int j = 0; j < k; j++) {\n            if (arr[i] == new_arr[j]) {\n                flag = 1;\n                break;\n            }\n        }\n        if (!flag) {\n            new_arr[k++] = arr[i];\n        }\n    }\n    printf(\"Array without duplicates: \");\n    for (int i = 0; i < k; i++) {\n        printf(\"%d \", new_arr[i]);\n    }\n    return 0;\n}",
    "description": "This program removes duplicates from an array and prints the result."
  },
  {
    "id": 670,
    "input": "Write a C program that concatenates two arrays into a third array.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr1[3] = {1, 2, 3};\n    int arr2[3] = {4, 5, 6};\n    int arr3[6];\n    for (int i = 0; i < 3; i++) {\n        arr3[i] = arr1[i];\n    }\n    for (int i = 0; i < 3; i++) {\n        arr3[i + 3] = arr2[i];\n    }\n    printf(\"Concatenated array: \");\n    for (int i = 0; i < 6; i++) {\n        printf(\"%d \", arr3[i]);\n    }\n    return 0;\n}",
    "description": "This program concatenates two arrays into a third array and prints the concatenated array."
  },
  {
    "id": 671,
    "input": "Write a C program that initializes an array with 5 numbers and prints them.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}",
    "description": "This program initializes an array with 5 integers and prints them one by one."
  },
  {
    "id": 672,
    "input": "Write a C program that takes 5 integers from the user and stores them in an array.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5];\n    for (int i = 0; i < 5; i++) {\n        printf(\"Enter number %d: \", i + 1);\n        scanf(\"%d\", &arr[i]);\n    }\n    printf(\"Entered numbers: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}",
    "description": "This program takes 5 integer inputs from the user and stores them in an array."
  },
  {
    "id": 673,
    "input": "Write a C program that calculates the sum of the elements in an array.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int sum = 0;\n    for (int i = 0; i < 5; i++) {\n        sum += arr[i];\n    }\n    printf(\"Sum of array elements: %d\\n\", sum);\n    return 0;\n}",
    "description": "This program calculates the sum of the elements of an array and prints it."
  },
  {
    "id": 674,
    "input": "Write a C program that calculates the average of the elements in an array.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int sum = 0;\n    for (int i = 0; i < 5; i++) {\n        sum += arr[i];\n    }\n    float average = sum / 5.0;\n    printf(\"Average of array elements: %.2f\\n\", average);\n    return 0;\n}",
    "description": "This program calculates the average of the elements of an array and prints it."
  },
  {
    "id": 675,
    "input": "Write a C program that initializes an array with 5 numbers and finds their product.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int product = 1;\n    for (int i = 0; i < 5; i++) {\n        product *= arr[i];\n    }\n    printf(\"Product of array elements: %d\\n\", product);\n    return 0;\n}",
    "description": "This program calculates the product of all elements in an array and prints the result."
  },
  {
    "id": 676,
    "input": "Write a C program that checks if all elements in an array are positive.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int all_positive = 1;\n    for (int i = 0; i < 5; i++) {\n        if (arr[i] <= 0) {\n            all_positive = 0;\n            break;\n        }\n    }\n    if (all_positive) {\n        printf(\"All elements are positive.\\n\");\n    } else {\n        printf(\"Not all elements are positive.\\n\");\n    }\n    return 0;\n}",
    "description": "This program checks if all the elements in an array are positive and prints the result."
  },
  {
    "id": 677,
    "input": "Write a C program that reverses an array of 5 integers.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int temp;\n    for (int i = 0; i < 2; i++) {\n        temp = arr[i];\n        arr[i] = arr[4 - i];\n        arr[4 - i] = temp;\n    }\n    printf(\"Reversed array: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}",
    "description": "This program reverses the elements of an array and prints the reversed array."
  },
  {
    "id": 678,
    "input": "Write a C program that finds the largest element in an array of 5 integers.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int max = arr[0];\n    for (int i = 1; i < 5; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    printf(\"Largest element is %d\\n\", max);\n    return 0;\n}",
    "description": "This program finds the largest element in an array and prints it."
  },
  {
    "id": 679,
    "input": "Write a C program that stores and prints the squares of the first 5 integers.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5];\n    for (int i = 0; i < 5; i++) {\n        arr[i] = (i + 1) * (i + 1);\n    }\n    printf(\"Squares of first 5 integers: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}",
    "description": "This program stores the squares of the first 5 integers in an array and prints them."
  },
  {
    "id": 680,
    "input": "Write a C program that stores and prints the Fibonacci series of 5 numbers.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {0, 1, 1, 2, 3};\n    printf(\"Fibonacci series: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}",
    "description": "This program stores the first 5 Fibonacci numbers in an array and prints them."
  },
  {
    "id": 681,
    "input": "Write a C program that stores 10 numbers in an array and finds the sum of even numbers.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int sum = 0;\n    for (int i = 0; i < 10; i++) {\n        if (arr[i] % 2 == 0) {\n            sum += arr[i];\n        }\n    }\n    printf(\"Sum of even numbers: %d\\n\", sum);\n    return 0;\n}",
    "description": "This program finds the sum of all even numbers in an array and prints the result."
  },
  {
    "id": 682,
    "input": "Write a C program that stores 6 numbers in an array and prints the numbers that are greater than 5.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[6] = {1, 2, 3, 4, 5, 6};\n    printf(\"Numbers greater than 5: \");\n    for (int i = 0; i < 6; i++) {\n        if (arr[i] > 5) {\n            printf(\"%d \", arr[i]);\n        }\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "description": "This program prints the numbers in the array that are greater than 5."
  },
  {
    "id": 683,
    "input": "Write a C program that stores 5 numbers and calculates the product of all the numbers.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int product = 1;\n    for (int i = 0; i < 5; i++) {\n        product *= arr[i];\n    }\n    printf(\"Product of array elements: %d\\n\", product);\n    return 0;\n}",
    "description": "This program calculates and prints the product of all elements in the array."
  },
  {
    "id": 684,
    "input": "Write a C program that stores the ages of 4 people in an array and prints the oldest age.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[4] = {25, 30, 35, 40};\n    int max_age = arr[0];\n    for (int i = 1; i < 4; i++) {\n        if (arr[i] > max_age) {\n            max_age = arr[i];\n        }\n    }\n    printf(\"Oldest age: %d\\n\", max_age);\n    return 0;\n}",
    "description": "This program finds and prints the oldest age from an array of ages."
  },
  {
    "id": 685,
    "input": "Write a C program that stores the names of 3 people in an array and prints each name in reverse order.",
    "output": "#include <stdio.h>\n\nint main() {\n    char* names[3] = {\"Alice\", \"Bob\", \"Charlie\"};\n    printf(\"Names in reverse order: \");\n    for (int i = 2; i >= 0; i--) {\n        printf(\"%s \", names[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "description": "This program prints the names from the array in reverse order."
  },
  {
    "id": 686,
    "input": "Write a C program that stores the first 10 integers in an array and prints whether each number is odd or even.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[10];\n    for (int i = 0; i < 10; i++) {\n        arr[i] = i + 1;\n        if (arr[i] % 2 == 0) {\n            printf(\"%d is even\\n\", arr[i]);\n        } else {\n            printf(\"%d is odd\\n\", arr[i]);\n        }\n    }\n    return 0;\n}",
    "description": "This program prints whether each number in an array of the first 10 integers is odd or even."
  },
  {
    "id": 687,
    "input": "Write a C program that stores 5 random numbers in an array and prints the smallest number.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {15, 9, 22, 8, 7};\n    int min = arr[0];\n    for (int i = 1; i < 5; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    printf(\"Smallest number: %d\\n\", min);\n    return 0;\n}",
    "description": "This program finds and prints the smallest number from an array of 5 numbers."
  },
  {
    "id": 688,
    "input": "Write a C program that stores 4 floating point numbers in an array and prints the average of the numbers.",
    "output": "#include <stdio.h>\n\nint main() {\n    float arr[4] = {1.2, 2.5, 3.7, 4.1};\n    float sum = 0;\n    for (int i = 0; i < 4; i++) {\n        sum += arr[i];\n    }\n    float average = sum / 4;\n    printf(\"Average of the numbers: %.2f\\n\", average);\n    return 0;\n}",
    "description": "This program calculates and prints the average of the elements in an array of floating-point numbers."
  },
  {
    "id": 689,
    "input": "Write a C program that stores 6 numbers in an array and counts how many numbers are greater than 3.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[6] = {1, 2, 3, 4, 5, 6};\n    int count = 0;\n    for (int i = 0; i < 6; i++) {\n        if (arr[i] > 3) {\n            count++;\n        }\n    }\n    printf(\"Count of numbers greater than 3: %d\\n\", count);\n    return 0;\n}",
    "description": "This program counts how many numbers in an array are greater than 3 and prints the count."
  },
  {
    "id": 690,
    "input": "Write a C program that stores 4 integers and finds the second largest number.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[4] = {10, 20, 15, 25};\n    int largest = arr[0], second_largest = arr[0];\n    for (int i = 1; i < 4; i++) {\n        if (arr[i] > largest) {\n            second_largest = largest;\n            largest = arr[i];\n        } else if (arr[i] > second_largest && arr[i] != largest) {\n            second_largest = arr[i];\n        }\n    }\n    printf(\"Second largest number: %d\\n\", second_largest);\n    return 0;\n}",
    "description": "This program finds the second largest number in an array and prints it."
  },
  {
    "id": 691,
    "input": "Write a C program that stores a 2D array and prints its transpose.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[2][3] = {{1, 2, 3}, {4, 5, 6}};\n    int transpose[3][2];\n\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 3; j++) {\n            transpose[j][i] = arr[i][j];\n        }\n    }\n\n    printf(\"Transpose of the matrix: \\n\");\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 2; j++) {\n            printf(\"%d \", transpose[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "description": "This program prints the transpose of a 2D array."
  },
  {
    "id": 692,
    "input": "Write a C program that multiplies two 2D arrays.",
    "output": "#include <stdio.h>\n\nint main() {\n    int a[2][2] = {{1, 2}, {3, 4}};\n    int b[2][2] = {{5, 6}, {7, 8}};\n    int result[2][2] = {{0, 0}, {0, 0}};\n\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            for (int k = 0; k < 2; k++) {\n                result[i][j] += a[i][k] * b[k][j];\n            }\n        }\n    }\n\n    printf(\"Multiplication result: \\n\");\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            printf(\"%d \", result[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "description": "This program multiplies two 2D arrays and prints the result."
  },
  {
    "id": 693,
    "input": "Write a C program that stores a 3D array and prints its elements.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[2][2][2] = {{{1, 2}, {3, 4}}, {{5, 6}, {7, 8}}};\n\n    printf(\"Elements of the 3D array: \\n\");\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            for (int k = 0; k < 2; k++) {\n                printf(\"%d \", arr[i][j][k]);\n            }\n            printf(\"\\n\");\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "description": "This program stores a 3D array and prints its elements."
  },
  {
    "id": 694,
    "input": "Write a C program that stores a 2D array and calculates the sum of all its elements.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    int sum = 0;\n\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            sum += arr[i][j];\n        }\n    }\n\n    printf(\"Sum of all elements: %d\\n\", sum);\n    return 0;\n}",
    "description": "This program calculates and prints the sum of all elements in a 2D array."
  },
  {
    "id": 695,
    "input": "Write a C program that stores a 2D array and finds the row with the maximum sum of elements.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    int row_sum[3] = {0, 0, 0};\n    int max_row = 0;\n\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            row_sum[i] += arr[i][j];\n        }\n    }\n\n    for (int i = 1; i < 3; i++) {\n        if (row_sum[i] > row_sum[max_row]) {\n            max_row = i;\n        }\n    }\n\n    printf(\"Row with the maximum sum: %d\\n\", max_row);\n    return 0;\n}",
    "description": "This program finds the row with the maximum sum of elements in a 2D array."
  },
  {
    "id": 696,
    "input": "Write a C program that multiplies two 3D arrays and prints the result.",
    "output": "#include <stdio.h>\n\nint main() {\n    int a[2][2][2] = {{{1, 2}, {3, 4}}, {{5, 6}, {7, 8}}};\n    int b[2][2][2] = {{{1, 1}, {1, 1}}, {{1, 1}, {1, 1}}};\n    int result[2][2][2] = {{{0, 0}, {0, 0}}, {{0, 0}, {0, 0}}};\n\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            for (int k = 0; k < 2; k++) {\n                for (int l = 0; l < 2; l++) {\n                    result[i][j][k] += a[i][j][l] * b[l][k][j];\n                }\n            }\n        }\n    }\n\n    printf(\"Multiplication result of 3D arrays: \\n\");\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            for (int k = 0; k < 2; k++) {\n                printf(\"%d \", result[i][j][k]);\n            }\n            printf(\"\\n\");\n        }\n    }\n    return 0;\n}",
    "description": "This program multiplies two 3D arrays and prints the result."
  },
  {
    "id": 697,
    "input": "Write a C program that stores a 3D array and finds the largest element.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[2][2][2] = {{{1, 2}, {3, 4}}, {{5, 6}, {7, 8}}};\n    int max = arr[0][0][0];\n\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            for (int k = 0; k < 2; k++) {\n                if (arr[i][j][k] > max) {\n                    max = arr[i][j][k];\n                }\n            }\n        }\n    }\n\n    printf(\"Largest element: %d\\n\", max);\n    return 0;\n}",
    "description": "This program finds and prints the largest element in a 3D array."
  },
  {
    "id": 698,
    "input": "Write a C program that stores a 2D array and rotates it 90 degrees clockwise.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    int rotated[3][3];\n\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            rotated[j][2 - i] = arr[i][j];\n        }\n    }\n\n    printf(\"Rotated 90 degrees: \\n\");\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            printf(\"%d \", rotated[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "description": "This program rotates a 2D array 90 degrees clockwise and prints the result."
  },
  {
    "id": 699,
    "input": "Write a C program that stores a 3D array and sums the elements along each dimension.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[2][2][2] = {{{1, 2}, {3, 4}}, {{5, 6}, {7, 8}}};\n    int sum_i = 0, sum_j = 0, sum_k = 0;\n\n    for (int i = 0; i < 2; i++) {\n        for (int j = 0; j < 2; j++) {\n            for (int k = 0; k < 2; k++) {\n                sum_i += arr[i][j][k];\n                sum_j += arr[i][j][k];\n                sum_k += arr[i][j][k];\n            }\n        }\n    }\n\n    printf(\"Sum along dimension i: %d\\n\", sum_i);\n    printf(\"Sum along dimension j: %d\\n\", sum_j);\n    printf(\"Sum along dimension k: %d\\n\", sum_k);\n    return 0;\n}",
    "description": "This program sums the elements along each dimension in a 3D array."
  },
  {
    "id": 700,
    "input": "Write a C program that stores a 2D array and sorts its elements in ascending order.",
    "output": "#include <stdio.h>\n\nvoid sort(int arr[3][3]) {\n    int temp;\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3 - 1; j++) {\n            for (int k = 0; k < 3 - j - 1; k++) {\n                if (arr[i][k] > arr[i][k + 1]) {\n                    temp = arr[i][k];\n                    arr[i][k] = arr[i][k + 1];\n                    arr[i][k + 1] = temp;\n                }\n            }\n        }\n    }\n}\n\nint main() {\n    int arr[3][3] = {{9, 7, 8}, {6, 5, 4}, {3, 1, 2}};\n    sort(arr);\n\n    printf(\"Sorted array: \\n\");\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            printf(\"%d \", arr[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}",
    "description": "This program sorts the elements of a 2D array in ascending order."
  },
  {
    "id": 701,
    "input": "Write a C program that uses a pointer to calculate the sum of an array.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int *ptr = arr;\n    int sum = 0;\n\n    for (int i = 0; i < 5; i++) {\n        sum += *(ptr + i);\n    }\n\n    printf(\"Sum of array elements: %d\\n\", sum);\n    return 0;\n}",
    "description": "This program uses a pointer to iterate over an array and calculate the sum of its elements."
  },
  {
    "id": 702,
    "input": "Write a C program that uses a pointer to swap two numbers.",
    "output": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 10, y = 20;\n\n    printf(\"Before swap: x = %d, y = %d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x = %d, y = %d\\n\", x, y);\n    return 0;\n}",
    "description": "This program uses pointers to swap two numbers."
  },
  {
    "id": 703,
    "input": "Write a C program that uses a pointer to find the largest element in an array.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int *ptr = arr;\n    int max = *ptr;\n\n    for (int i = 1; i < 5; i++) {\n        if (*(ptr + i) > max) {\n            max = *(ptr + i);\n        }\n    }\n\n    printf(\"Largest element in the array: %d\\n\", max);\n    return 0;\n}",
    "description": "This program uses a pointer to find the largest element in an array."
  },
  {
    "id": 704,
    "input": "Write a C program that uses a pointer to reverse an array.",
    "output": "#include <stdio.h>\n\nvoid reverse(int *arr, int size) {\n    int *start = arr;\n    int *end = arr + size - 1;\n    int temp;\n\n    while (start < end) {\n        temp = *start;\n        *start = *end;\n        *end = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    reverse(arr, size);\n\n    printf(\"Reversed array: \");\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}",
    "description": "This program uses a pointer to reverse the elements of an array."
  },
  {
    "id": 705,
    "input": "Write a C program that uses a pointer to dynamically allocate memory for an array.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int n = 5;\n    int *arr = (int*)malloc(n * sizeof(int));\n\n    if (arr == NULL) {\n        printf(\"Memory allocation failed!\\n\");\n        return 1;\n    }\n\n    for (int i = 0; i < n; i++) {\n        *(arr + i) = i + 1;\n    }\n\n    printf(\"Array elements: \");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", *(arr + i));\n    }\n    printf(\"\\n\");\n\n    free(arr);\n    return 0;\n}",
    "description": "This program uses a pointer to dynamically allocate memory for an array and prints its elements."
  },
  {
    "id": 706,
    "input": "Write a C program that uses a pointer to pass an array to a function.",
    "output": "#include <stdio.h>\n\nvoid display(int *arr, int size) {\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", *(arr + i));\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    printf(\"Array elements: \");\n    display(arr, size);\n    return 0;\n}",
    "description": "This program uses a pointer to pass an array to a function and print its elements."
  },
  {
    "id": 707,
    "input": "Write a C program that uses a pointer to count the number of vowels in a string.",
    "output": "#include <stdio.h>\n\nint count_vowels(char *str) {\n    int count = 0;\n    while (*str) {\n        if (*str == 'a' || *str == 'e' || *str == 'i' || *str == 'o' || *str == 'u' || *str == 'A' || *str == 'E' || *str == 'I' || *str == 'O' || *str == 'U') {\n            count++;\n        }\n        str++;\n    }\n    return count;\n}\n\nint main() {\n    char str[] = \"Hello World\";\n    printf(\"Number of vowels: %d\\n\", count_vowels(str));\n    return 0;\n}",
    "description": "This program uses a pointer to count the number of vowels in a string."
  },
  {
    "id": 708,
    "input": "Write a C program that uses a pointer to concatenate two strings.",
    "output": "#include <stdio.h>\n\nvoid concatenate(char *dest, char *src) {\n    while (*dest) {\n        dest++;\n    }\n    while (*src) {\n        *dest = *src;\n        dest++;\n        src++;\n    }\n    *dest = '\\0';\n}\n\nint main() {\n    char str1[20] = \"Hello \";\n    char str2[] = \"World!\";\n\n    concatenate(str1, str2);\n    printf(\"Concatenated string: %s\\n\", str1);\n    return 0;\n}",
    "description": "This program uses a pointer to concatenate two strings."
  },
  {
    "id": 709,
    "input": "Write a C program that uses a pointer to find the length of a string.",
    "output": "#include <stdio.h>\n\nint length(char *str) {\n    int len = 0;\n    while (*str) {\n        len++;\n        str++;\n    }\n    return len;\n}\n\nint main() {\n    char str[] = \"Hello World\";\n    printf(\"Length of the string: %d\\n\", length(str));\n    return 0;\n}",
    "description": "This program uses a pointer to find the length of a string."
  },
  {
    "id": 710,
    "input": "Write a C program that uses a pointer to compare two strings.",
    "output": "#include <stdio.h>\n\nint compare_strings(char *str1, char *str2) {\n    while (*str1 && *str2) {\n        if (*str1 != *str2) {\n            return 0;\n        }\n        str1++;\n        str2++;\n    }\n    return *str1 == *str2;\n}\n\nint main() {\n    char str1[] = \"Hello\";\n    char str2[] = \"Hello\";\n\n    if (compare_strings(str1, str2)) {\n        printf(\"Strings are equal\\n\");\n    } else {\n        printf(\"Strings are not equal\\n\");\n    }\n    return 0;\n}",
    "description": "This program uses a pointer to compare two strings."
  },
  {
    "id": 711,
    "input": "Write a C program that demonstrates how to use a pointer to change the value of a variable.",
    "output": "#include <stdio.h>\n\nint main() {\n    int num = 10;\n    int *ptr = &num;\n    *ptr = 20;\n\n    printf(\"Value of num after change: %d\\n\", num);\n    return 0;\n}",
    "description": "This program demonstrates how to use a pointer to change the value of a variable."
  },
  {
    "id": 712,
    "input": "Write a C program that uses a pointer to print the address of a variable.",
    "output": "#include <stdio.h>\n\nint main() {\n    int num = 10;\n    int *ptr = &num;\n\n    printf(\"Address of num: %p\\n\", ptr);\n    return 0;\n}",
    "description": "This program demonstrates how to use a pointer to print the address of a variable."
  },
  {
    "id": 713,
    "input": "Write a C program that uses a pointer to iterate through an array.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int *ptr = arr;\n\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", *(ptr + i));\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "description": "This program demonstrates how to use a pointer to iterate through an array."
  },
  {
    "id": 714,
    "input": "Write a C program that uses a pointer to print the value of an array element.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[] = {10, 20, 30, 40, 50};\n    int *ptr = &arr[2];\n\n    printf(\"Element at index 2: %d\\n\", *ptr);\n    return 0;\n}",
    "description": "This program demonstrates how to use a pointer to print the value of an array element."
  },
  {
    "id": 715,
    "input": "Write a C program that uses a pointer to pass an argument to a function.",
    "output": "#include <stdio.h>\n\nvoid square(int *num) {\n    *num = (*num) * (*num);\n}\n\nint main() {\n    int n = 5;\n\n    printf(\"Before squaring: %d\\n\", n);\n    square(&n);\n    printf(\"After squaring: %d\\n\", n);\n    return 0;\n}",
    "description": "This program demonstrates how to use a pointer to pass an argument to a function."
  },
  {
    "id": 716,
    "input": "Write a C program that demonstrates how to use a pointer to point to a character in a string.",
    "output": "#include <stdio.h>\n\nint main() {\n    char str[] = \"Hello\";\n    char *ptr = str;\n\n    printf(\"First character: %c\\n\", *ptr);\n    return 0;\n}",
    "description": "This program demonstrates how to use a pointer to point to a character in a string."
  },
  {
    "id": 717,
    "input": "Write a C program that uses a pointer to traverse a string.",
    "output": "#include <stdio.h>\n\nint main() {\n    char str[] = \"Hello, World!\";\n    char *ptr = str;\n\n    while (*ptr) {\n        printf(\"%c \", *ptr);\n        ptr++;\n    }\n    printf(\"\\n\");\n    return 0;\n}",
    "description": "This program demonstrates how to use a pointer to traverse a string."
  },
  {
    "id": 718,
    "input": "Write a C program that uses a pointer to count the number of characters in a string.",
    "output": "#include <stdio.h>\n\nint count_chars(char *str) {\n    int count = 0;\n    while (*str) {\n        count++;\n        str++;\n    }\n    return count;\n}\n\nint main() {\n    char str[] = \"Hello, World!\";\n    printf(\"Number of characters: %d\\n\", count_chars(str));\n    return 0;\n}",
    "description": "This program uses a pointer to count the number of characters in a string."
  },
  {
    "id": 719,
    "input": "Write a C program that uses a pointer to compare two strings.",
    "output": "#include <stdio.h>\n\nint compare_strings(char *str1, char *str2) {\n    while (*str1 && *str2) {\n        if (*str1 != *str2) {\n            return 0;\n        }\n        str1++;\n        str2++;\n    }\n    return *str1 == *str2;\n}\n\nint main() {\n    char str1[] = \"Hello\";\n    char str2[] = \"Hello\";\n\n    if (compare_strings(str1, str2)) {\n        printf(\"Strings are equal\\n\");\n    } else {\n        printf(\"Strings are not equal\\n\");\n    }\n    return 0;\n}",
    "description": "This program uses a pointer to compare two strings."
  },
  {
    "id": 720,
    "input": "Write a C program that demonstrates how to use a pointer to increment a variable.",
    "output": "#include <stdio.h>\n\nint main() {\n    int num = 10;\n    int *ptr = &num;\n\n    printf(\"Before increment: %d\\n\", num);\n    (*ptr)++;\n    printf(\"After increment: %d\\n\", num);\n    return 0;\n}",
    "description": "This program demonstrates how to use a pointer to increment a variable."
  },
  {
    "id": 721,
    "input": "Write a C program that uses a pointer to swap the values of two variables.",
    "output": "#include <stdio.h>\n\nvoid swap(int *a, int *b) {\n    int temp = *a;\n    *a = *b;\n    *b = temp;\n}\n\nint main() {\n    int x = 5, y = 10;\n    printf(\"Before swap: x = %d, y = %d\\n\", x, y);\n    swap(&x, &y);\n    printf(\"After swap: x = %d, y = %d\\n\", x, y);\n    return 0;\n}",
    "description": "This program uses a pointer to swap the values of two variables."
  },
  {
    "id": 722,
    "input": "Write a C program that demonstrates how to use a pointer to access the last element of an array.",
    "output": "#include <stdio.h>\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int *ptr = &arr[4];\n\n    printf(\"Last element: %d\\n\", *ptr);\n    return 0;\n}",
    "description": "This program demonstrates how to use a pointer to access the last element of an array."
  },
  {
    "id": 723,
    "input": "Write a C program that uses a pointer to copy one string to another.",
    "output": "#include <stdio.h>\n\nvoid copy_string(char *src, char *dest) {\n    while (*src) {\n        *dest = *src;\n        src++;\n        dest++;\n    }\n    *dest = '\\0';\n}\n\nint main() {\n    char src[] = \"Hello, World!\";\n    char dest[50];\n\n    copy_string(src, dest);\n    printf(\"Copied string: %s\\n\", dest);\n    return 0;\n}",
    "description": "This program uses a pointer to copy one string to another."
  },
  {
    "id": 724,
    "input": "Write a C program that uses a pointer to reverse a string.",
    "output": "#include <stdio.h>\n\nvoid reverse_string(char *str) {\n    char *start = str;\n    char *end = str;\n    while (*end) {\n        end++;\n    }\n    end--;\n\n    while (start < end) {\n        char temp = *start;\n        *start = *end;\n        *end = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    char str[] = \"Hello\";\n\n    reverse_string(str);\n    printf(\"Reversed string: %s\\n\", str);\n    return 0;\n}",
    "description": "This program uses a pointer to reverse a string."
  },
  {
    "id": 725,
    "input": "Write a C program that uses a pointer to find the length of a string.",
    "output": "#include <stdio.h>\n\nint string_length(char *str) {\n    int length = 0;\n    while (*str) {\n        length++;\n        str++;\n    }\n    return length;\n}\n\nint main() {\n    char str[] = \"Hello, World!\";\n    printf(\"Length of string: %d\\n\", string_length(str));\n    return 0;\n}",
    "description": "This program uses a pointer to find the length of a string."
  },
  {
    "id": 726,
    "input": "Write a C program that uses a pointer to compare two arrays.",
    "output": "#include <stdio.h>\n\nint compare_arrays(int *arr1, int *arr2, int size) {\n    for (int i = 0; i < size; i++) {\n        if (*(arr1 + i) != *(arr2 + i)) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    int arr1[] = {1, 2, 3, 4, 5};\n    int arr2[] = {1, 2, 3, 4, 5};\n\n    if (compare_arrays(arr1, arr2, 5)) {\n        printf(\"Arrays are equal\\n\");\n    } else {\n        printf(\"Arrays are not equal\\n\");\n    }\n    return 0;\n}",
    "description": "This program uses a pointer to compare two arrays."
  },
  {
    "id": 727,
    "input": "Write a C program that uses a pointer to sum the elements of an array.",
    "output": "#include <stdio.h>\n\nint sum_array(int *arr, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += *(arr + i);\n    }\n    return sum;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    printf(\"Sum of array elements: %d\\n\", sum_array(arr, 5));\n    return 0;\n}",
    "description": "This program uses a pointer to sum the elements of an array."
  },
  {
    "id": 728,
    "input": "Write a C program that uses a pointer to find the maximum element in an array.",
    "output": "#include <stdio.h>\n\nint find_max(int *arr, int size) {\n    int max = *arr;\n    for (int i = 1; i < size; i++) {\n        if (*(arr + i) > max) {\n            max = *(arr + i);\n        }\n    }\n    return max;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    printf(\"Maximum element: %d\\n\", find_max(arr, 5));\n    return 0;\n}",
    "description": "This program uses a pointer to find the maximum element in an array."
  },
  {
    "id": 729,
    "input": "Write a C program that uses a pointer to find the minimum element in an array.",
    "output": "#include <stdio.h>\n\nint find_min(int *arr, int size) {\n    int min = *arr;\n    for (int i = 1; i < size; i++) {\n        if (*(arr + i) < min) {\n            min = *(arr + i);\n        }\n    }\n    return min;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    printf(\"Minimum element: %d\\n\", find_min(arr, 5));\n    return 0;\n}",
    "description": "This program uses a pointer to find the minimum element in an array."
  },
  {
    "id": 730,
    "input": "Write a C program that uses a pointer to check if an element exists in an array.",
    "output": "#include <stdio.h>\n\nint is_element_present(int *arr, int size, int element) {\n    for (int i = 0; i < size; i++) {\n        if (*(arr + i) == element) {\n            return 1;\n        }\n    }\n    return 0;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int element = 3;\n\n    if (is_element_present(arr, 5, element)) {\n        printf(\"Element %d is present in the array.\\n\", element);\n    } else {\n        printf(\"Element %d is not present in the array.\\n\", element);\n    }\n    return 0;\n}",
    "description": "This program uses a pointer to check if an element exists in an array."
  },
  {
    "id": 731,
    "input": "Write a C program that uses a pointer to implement dynamic memory allocation for an array.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int *arr;\n    int n = 5;\n\n    arr = (int *)malloc(n * sizeof(int));\n    if (arr == NULL) {\n        printf(\"Memory allocation failed\\n\");\n        return 1;\n    }\n\n    for (int i = 0; i < n; i++) {\n        arr[i] = i + 1;\n    }\n\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    free(arr);\n    return 0;\n}",
    "description": "This program uses a pointer for dynamic memory allocation and frees the memory after use."
  },
  {
    "id": 732,
    "input": "Write a C program that uses a pointer to implement a linked list.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid print_list(struct Node *head) {\n    struct Node *temp = head;\n    while (temp != NULL) {\n        printf(\"%d -> \", temp->data);\n        temp = temp->next;\n    }\n    printf(\"NULL\\n\");\n}\n\nint main() {\n    struct Node *head = NULL;\n    struct Node *second = NULL;\n    struct Node *third = NULL;\n\n    head = (struct Node *)malloc(sizeof(struct Node));\n    second = (struct Node *)malloc(sizeof(struct Node));\n    third = (struct Node *)malloc(sizeof(struct Node));\n\n    head->data = 1;\n    head->next = second;\n\n    second->data = 2;\n    second->next = third;\n\n    third->data = 3;\n    third->next = NULL;\n\n    print_list(head);\n\n    free(head);\n    free(second);\n    free(third);\n\n    return 0;\n}",
    "description": "This program uses a pointer to implement a simple linked list."
  },
  {
    "id": 733,
    "input": "Write a C program that uses a pointer to implement a function that returns a dynamically allocated array.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint *generate_array(int size) {\n    int *arr = (int *)malloc(size * sizeof(int));\n    for (int i = 0; i < size; i++) {\n        arr[i] = i + 1;\n    }\n    return arr;\n}\n\nint main() {\n    int size = 5;\n    int *arr = generate_array(size);\n\n    for (int i = 0; i < size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n\n    free(arr);\n    return 0;\n}",
    "description": "This program uses a pointer to return a dynamically allocated array from a function."
  },
  {
    "id": 734,
    "input": "Write a C program that uses a pointer to implement a function that swaps two linked list nodes.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid swap_nodes(struct Node *a, struct Node *b) {\n    int temp = a->data;\n    a->data = b->data;\n    b->data = temp;\n}\n\nvoid print_list(struct Node *head) {\n    struct Node *temp = head;\n    while (temp != NULL) {\n        printf(\"%d -> \", temp->data);\n        temp = temp->next;\n    }\n    printf(\"NULL\\n\");\n}\n\nint main() {\n    struct Node *head = NULL;\n    struct Node *first = NULL;\n    struct Node *second = NULL;\n\n    head = (struct Node *)malloc(sizeof(struct Node));\n    first = (struct Node *)malloc(sizeof(struct Node));\n    second = (struct Node *)malloc(sizeof(struct Node));\n\n    head->data = 1;\n    head->next = first;\n\n    first->data = 2;\n    first->next = second;\n\n    second->data = 3;\n    second->next = NULL;\n\n    printf(\"Before swap:\\n\");\n    print_list(head);\n\n    swap_nodes(first, second);\n\n    printf(\"After swap:\\n\");\n    print_list(head);\n\n    free(head);\n    free(first);\n    free(second);\n\n    return 0;\n}",
    "description": "This program demonstrates the use of pointers to swap two linked list nodes."
  },
  {
    "id": 735,
    "input": "Write a C program that uses a pointer to implement a function that deletes a node in a linked list.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid delete_node(struct Node **head, int value) {\n    struct Node *temp = *head, *prev = NULL;\n\n    if (temp != NULL && temp->data == value) {\n        *head = temp->next;\n        free(temp);\n} else {\n    while (temp != NULL && temp->data != value) {\n        prev = temp;\n        temp = temp->next;\n    }\n    if (temp == NULL) return;\n    prev->next = temp->next;\n    free(temp);\n}\n}\n\nvoid print_list(struct Node *head) {\n    struct Node *temp = head;\n    while (temp != NULL) {\n        printf(\"%d -> \", temp->data);\n        temp = temp->next;\n    }\n    printf(\"NULL\\n\");\n}\n\nint main() {\n    struct Node *head = NULL;\n    struct Node *first = NULL;\n    struct Node *second = NULL;\n\n    head = (struct Node *)malloc(sizeof(struct Node));\n    first = (struct Node *)malloc(sizeof(struct Node));\n    second = (struct Node *)malloc(sizeof(struct Node));\n\n    head->data = 1;\n    head->next = first;\n\n    first->data = 2;\n    first->next = second;\n\n    second->data = 3;\n    second->next = NULL;\n\n    printf(\"Before deletion:\\n\");\n    print_list(head);\n\n    delete_node(&head, 2);\n\n    printf(\"After deletion:\\n\");\n    print_list(head);\n\n    free(head);\n    free(second);\n\n    return 0;\n}",
    "description": "This program uses pointers to delete a node from a linked list."
  },
  {
    "id": 736,
    "input": "Write a C program that uses a pointer to find the length of a linked list.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nint list_length(struct Node *head) {\n    int length = 0;\n    struct Node *temp = head;\n    while (temp != NULL) {\n        length++;\n        temp = temp->next;\n    }\n    return length;\n}\n\nint main() {\n    struct Node *head = NULL;\n    struct Node *first = NULL;\n    struct Node *second = NULL;\n\n    head = (struct Node *)malloc(sizeof(struct Node));\n    first = (struct Node *)malloc(sizeof(struct Node));\n    second = (struct Node *)malloc(sizeof(struct Node));\n\n    head->data = 1;\n    head->next = first;\n\n    first->data = 2;\n    first->next = second;\n\n    second->data = 3;\n    second->next = NULL;\n\n    printf(\"Length of the linked list: %d\\n\", list_length(head));\n\n    free(head);\n    free(first);\n    free(second);\n\n    return 0;\n}",
    "description": "This program uses pointers to calculate the length of a linked list."
  },
  {
    "id": 737,
    "input": "Write a C program that uses a pointer to implement a stack using linked list.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid push(struct Node **top, int value) {\n    struct Node *new_node = (struct Node *)malloc(sizeof(struct Node));\n    new_node->data = value;\n    new_node->next = *top;\n    *top = new_node;\n}\n\nint pop(struct Node **top) {\n    if (*top == NULL) {\n        printf(\"Stack underflow\\n\");\n        return -1;\n    }\n    struct Node *temp = *top;\n    int value = temp->data;\n    *top = temp->next;\n    free(temp);\n    return value;\n}\n\nvoid print_stack(struct Node *top) {\n    struct Node *temp = top;\n    while (temp != NULL) {\n        printf(\"%d -> \", temp->data);\n        temp = temp->next;\n    }\n    printf(\"NULL\\n\");\n}\n\nint main() {\n    struct Node *stack = NULL;\n    push(&stack, 10);\n    push(&stack, 20);\n    push(&stack, 30);\n\n    printf(\"Stack after pushes:\\n\");\n    print_stack(stack);\n\n    printf(\"Popped value: %d\\n\", pop(&stack));\n\n    printf(\"Stack after pop:\\n\");\n    print_stack(stack);\n\n    return 0;\n}",
    "description": "This program uses pointers to implement a stack data structure using a linked list."
  },
  {
    "id": 738,
    "input": "Write a C program that uses a pointer to implement a queue using a linked list.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid enqueue(struct Node **front, struct Node **rear, int value) {\n    struct Node *new_node = (struct Node *)malloc(sizeof(struct Node));\n    new_node->data = value;\n    new_node->next = NULL;\n    if (*rear == NULL) {\n        *front = *rear = new_node;\n        return;\n    }\n    (*rear)->next = new_node;\n    *rear = new_node;\n}\n\nint dequeue(struct Node **front) {\n    if (*front == NULL) {\n        printf(\"Queue underflow\\n\");\n        return -1;\n    }\n    struct Node *temp = *front;\n    int value = temp->data;\n    *front = temp->next;\n    if (*front == NULL) {\n        *rear = NULL;\n    }\n    free(temp);\n    return value;\n}\n\nvoid print_queue(struct Node *front) {\n    struct Node *temp = front;\n    while (temp != NULL) {\n        printf(\"%d -> \", temp->data);\n        temp = temp->next;\n    }\n    printf(\"NULL\\n\");\n}\n\nint main() {\n    struct Node *front = NULL, *rear = NULL;\n    enqueue(&front, &rear, 10);\n    enqueue(&front, &rear, 20);\n    enqueue(&front, &rear, 30);\n\n    printf(\"Queue after enqueue operations:\\n\");\n    print_queue(front);\n\n    printf(\"Dequeued value: %d\\n\", dequeue(&front));\n\n    printf(\"Queue after dequeue:\\n\");\n    print_queue(front);\n\n    return 0;\n}",
    "description": "This program uses pointers to implement a queue using a linked list."
  },
  {
    "id": 739,
    "input": "Write a C program that uses a pointer to implement a double-ended queue (deque) using a doubly linked list.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *prev;\n    struct Node *next;\n};\n\nvoid insert_front(struct Node **front, int value) {\n    struct Node *new_node = (struct Node *)malloc(sizeof(struct Node));\n    new_node->data = value;\n    new_node->prev = NULL;\n    new_node->next = *front;\n    if (*front != NULL) {\n        (*front)->prev = new_node;\n    }\n    *front = new_node;\n}\n\nvoid insert_rear(struct Node **rear, int value) {\n    struct Node *new_node = (struct Node *)malloc(sizeof(struct Node));\n    new_node->data = value;\n    new_node->next = NULL;\n    new_node->prev = *rear;\n    if (*rear != NULL) {\n        (*rear)->next = new_node;\n    }\n    *rear = new_node;\n}\n\nint delete_front(struct Node **front) {\n    if (*front == NULL) {\n        printf(\"Deque underflow\\n\");\n        return -1;\n    }\n    struct Node *temp = *front;\n    int value = temp->data;\n    *front = temp->next;\n    if (*front != NULL) {\n        (*front)->prev = NULL;\n    }\n    free(temp);\n    return value;\n}\n\nint delete_rear(struct Node **rear) {\n    if (*rear == NULL) {\n        printf(\"Deque underflow\\n\");\n        return -1;\n    }\n    struct Node *temp = *rear;\n    int value = temp->data;\n    *rear = temp->prev;\n    if (*rear != NULL) {\n        (*rear)->next = NULL;\n    }\n    free(temp);\n    return value;\n}\n\nvoid print_deque(struct Node *front) {\n    struct Node *temp = front;\n    while (temp != NULL) {\n        printf(\"%d <-> \", temp->data);\n        temp = temp->next;\n    }\n    printf(\"NULL\\n\");\n}\n\nint main() {\n    struct Node *front = NULL, *rear = NULL;\n    insert_rear(&rear, 10);\n    insert_rear(&rear, 20);\n    insert_front(&front, 5);\n\n    printf(\"Deque after insertions:\\n\");\n    print_deque(front);\n\n    printf(\"Deleted from front: %d\\n\", delete_front(&front));\n\n    printf(\"Deque after deletion from front:\\n\");\n    print_deque(front);\n\n    return 0;\n}",
    "description": "This program uses pointers to implement a double-ended queue using a doubly linked list."
  },
  {
    "id": 740,
    "input": "Write a C program that uses a pointer to implement a circular linked list.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid print_circular_list(struct Node *head) {\n    if (head == NULL) return;\n    struct Node *temp = head;\n    do {\n        printf(\"%d -> \", temp->data);\n        temp = temp->next;\n    } while (temp != head);\n    printf(\"(back to head)\\n\");\n}\n\nint main() {\n    struct Node *head = NULL, *second = NULL, *third = NULL;\n\n    head = (struct Node *)malloc(sizeof(struct Node));\n    second = (struct Node *)malloc(sizeof(struct Node));\n    third = (struct Node *)malloc(sizeof(struct Node));\n\n    head->data = 1;\n    head->next = second;\n\n    second->data = 2;\n    second->next = third;\n\n    third->data = 3;\n    third->next = head;\n\n    print_circular_list(head);\n\n    free(head);\n    free(second);\n    free(third);\n\n    return 0;\n}",
    "description": "This program demonstrates the use of pointers to implement a circular linked list."
  },
  {
    "id": 741,
    "input": "Write a C program that uses pointers to implement a function that reverses a string.",
    "output": "#include <stdio.h>\n#include <string.h>\n\nvoid reverse_string(char *str) {\n    int start = 0;\n    int end = strlen(str) - 1;\n    char temp;\n    while (start < end) {\n        temp = str[start];\n        str[start] = str[end];\n        str[end] = temp;\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    char str[] = \"Hello, World!\";\n    printf(\"Original: %s\\n\", str);\n    reverse_string(str);\n    printf(\"Reversed: %s\\n\", str);\n    return 0;\n}",
    "description": "This program uses pointers to reverse a string."
  },
  {
    "id": 742,
    "input": "Write a C program that uses a pointer to dynamically allocate memory for an array and calculate the sum of its elements.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    int n, sum = 0;\n    printf(\"Enter number of elements: \");\n    scanf(\"%d\", &n);\n    int *arr = (int *)malloc(n * sizeof(int));\n    if (arr == NULL) {\n        printf(\"Memory allocation failed\\n\");\n        return 1;\n    }\n    printf(\"Enter %d elements:\\n\", n);\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &arr[i]);\n    }\n    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n    }\n    printf(\"Sum of the elements: %d\\n\", sum);\n    free(arr);\n    return 0;\n}",
    "description": "This program uses a pointer to dynamically allocate memory for an array and calculate the sum of its elements."
  },
  {
    "id": 743,
    "input": "Write a C program that uses pointers to implement a function that swaps two integers.",
    "output": "#include <stdio.h>\n\nvoid swap(int *x, int *y) {\n    int temp = *x;\n    *x = *y;\n    *y = temp;\n}\n\nint main() {\n    int a = 5, b = 10;\n    printf(\"Before swapping: a = %d, b = %d\\n\", a, b);\n    swap(&a, &b);\n    printf(\"After swapping: a = %d, b = %d\\n\", a, b);\n    return 0;\n}",
    "description": "This program uses pointers to swap two integers."
  },
  {
    "id": 744,
    "input": "Write a C program that uses pointers to implement a function that calculates the factorial of a number.",
    "output": "#include <stdio.h>\n\nint factorial(int n) {\n    if (n == 0) return 1;\n    return n * factorial(n - 1);\n}\n\nint main() {\n    int num = 5;\n    printf(\"Factorial of %d is %d\\n\", num, factorial(num));\n    return 0;\n}",
    "description": "This program uses pointers to calculate the factorial of a number."
  },
  {
    "id": 745,
    "input": "Write a C program that uses pointers to implement a function that merges two sorted arrays into one sorted array.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid merge(int *arr1, int *arr2, int *arr3, int size1, int size2) {\n    int i = 0, j = 0, k = 0;\n    while (i < size1 && j < size2) {\n        if (arr1[i] < arr2[j]) {\n            arr3[k++] = arr1[i++];\n        } else {\n            arr3[k++] = arr2[j++];\n        }\n    }\n    while (i < size1) arr3[k++] = arr1[i++];\n    while (j < size2) arr3[k++] = arr2[j++];\n}\n\nint main() {\n    int arr1[] = {1, 3, 5, 7};\n    int arr2[] = {2, 4, 6, 8};\n    int size1 = 4, size2 = 4;\n    int *arr3 = (int *)malloc((size1 + size2) * sizeof(int));\n\n    merge(arr1, arr2, arr3, size1, size2);\n\n    printf(\"Merged array: \");\n    for (int i = 0; i < size1 + size2; i++) {\n        printf(\"%d \", arr3[i]);\n    }\n    printf(\"\\n\");\n\n    free(arr3);\n    return 0;\n}",
    "description": "This program uses pointers to merge two sorted arrays into one sorted array."
  },
  {
    "id": 746,
    "input": "Write a C program that uses pointers to implement a function that finds the largest element in an array.",
    "output": "#include <stdio.h>\n\nint find_largest(int *arr, int size) {\n    int largest = arr[0];\n    for (int i = 1; i < size; i++) {\n        if (arr[i] > largest) {\n            largest = arr[i];\n        }\n    }\n    return largest;\n}\n\nint main() {\n    int arr[] = {1, 5, 3, 9, 2};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    printf(\"Largest element: %d\\n\", find_largest(arr, size));\n    return 0;\n}",
    "description": "This program uses pointers to find the largest element in an array."
  },
  {
    "id": 747,
    "input": "Write a C program that uses pointers to implement a function that counts the number of occurrences of a given element in an array.",
    "output": "#include <stdio.h>\n\nint count_occurrences(int *arr, int size, int element) {\n    int count = 0;\n    for (int i = 0; i < size; i++) {\n        if (arr[i] == element) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 1, 4, 1, 5};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int element = 1;\n    printf(\"Element %d occurs %d times\\n\", element, count_occurrences(arr, size, element));\n    return 0;\n}",
    "description": "This program uses pointers to count the occurrences of a given element in an array."
  },
  {
    "id": 748,
    "input": "Write a C program that uses pointers to implement a function that reverses a linked list.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid reverse_linked_list(struct Node **head) {\n    struct Node *prev = NULL, *current = *head, *next = NULL;\n    while (current != NULL) {\n        next = current->next;\n        current->next = prev;\n        prev = current;\n        current = next;\n    }\n    *head = prev;\n}\n\nvoid print_linked_list(struct Node *head) {\n    struct Node *temp = head;\n    while (temp != NULL) {\n        printf(\"%d -> \", temp->data);\n        temp = temp->next;\n    }\n    printf(\"NULL\\n\");\n}\n\nint main() {\n    struct Node *head = (struct Node *)malloc(sizeof(struct Node));\n    head->data = 1;\n    head->next = (struct Node *)malloc(sizeof(struct Node));\n    head->next->data = 2;\n    head->next->next = (struct Node *)malloc(sizeof(struct Node));\n    head->next->next->data = 3;\n    head->next->next->next = NULL;\n\n    printf(\"Original linked list: \");\n    print_linked_list(head);\n    reverse_linked_list(&head);\n    printf(\"Reversed linked list: \");\n    print_linked_list(head);\n\n    return 0;\n}",
    "description": "This program uses pointers to reverse a linked list."
  },
  {
    "id": 749,
    "input": "Write a C program that uses pointers to implement a function that merges two linked lists.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid merge_linked_lists(struct Node *list1, struct Node *list2) {\n    struct Node *temp = list1;\n    while (temp->next != NULL) {\n        temp = temp->next;\n    }\n    temp->next = list2;\n}\n\nvoid print_linked_list(struct Node *head) {\n    struct Node *temp = head;\n    while (temp != NULL) {\n        printf(\"%d -> \", temp->data);\n        temp = temp->next;\n    }\n    printf(\"NULL\\n\");\n}\n\nint main() {\n    struct Node *list1 = (struct Node *)malloc(sizeof(struct Node));\n    list1->data = 1;\n    list1->next = (struct Node *)malloc(sizeof(struct Node));\n    list1->next->data = 2;\n    list1->next->next = NULL;\n\n    struct Node *list2 = (struct Node *)malloc(sizeof(struct Node));\n    list2->data = 3;\n    list2->next = (struct Node *)malloc(sizeof(struct Node));\n    list2->next->data = 4;\n    list2->next->next = NULL;\n\n    printf(\"List 1: \");\n    print_linked_list(list1);\n    printf(\"List 2: \");\n    print_linked_list(list2);\n\n    merge_linked_lists(list1, list2);\n\n    printf(\"Merged list: \");\n    print_linked_list(list1);\n\n    return 0;\n}",
    "description": "This program uses pointers to merge two linked lists."
  },
  {
    "id": 750,
    "input": "Write a C program that uses pointers to implement a function that rotates a linked list by k positions.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nvoid rotate_linked_list(struct Node **head, int k) {\n    if (*head == NULL) return;\n    struct Node *temp = *head;\n    int count = 1;\n    while (temp->next != NULL && count < k) {\n        temp = temp->next;\n        count++;\n    }\n    struct Node *kthNode = temp;\n    if (kthNode->next == NULL) return;\n    struct Node *new_head = kthNode->next;\n    kthNode->next = NULL;\n    temp = new_head;\n    while (temp->next != NULL) {\n        temp = temp->next;\n    }\n    temp->next = *head;\n    *head = new_head;\n}\n\nvoid print_linked_list(struct Node *head) {\n    struct Node *temp = head;\n    while (temp != NULL) {\n        printf(\"%d -> \", temp->data);\n        temp = temp->next;\n    }\n    printf(\"NULL\\n\");\n}\n\nint main() {\n    struct Node *head = (struct Node *)malloc(sizeof(struct Node));\n    head->data = 1;\n    head->next = (struct Node *)malloc(sizeof(struct Node));\n    head->next->data = 2;\n    head->next->next = (struct Node *)malloc(sizeof(struct Node));\n    head->next->next->data = 3;\n    head->next->next->next = (struct Node *)malloc(sizeof(struct Node));\n    head->next->next->next->data = 4;\n    head->next->next->next->next = NULL;\n\n    printf(\"Original linked list: \");\n    print_linked_list(head);\n    rotate_linked_list(&head, 2);\n    printf(\"Rotated linked list: \");\n    print_linked_list(head);\n\n    return 0;\n}",
    "description": "This program uses pointers to rotate a linked list by k positions."
  },
  {
    "id": 751,
    "input": "Write a C program that defines a structure for a point with x and y coordinates, and initializes an instance of it.",
    "output": "#include <stdio.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nint main() {\n    struct Point p1;\n    p1.x = 5;\n    p1.y = 10;\n    printf(\"Point coordinates: (%d, %d)\\n\", p1.x, p1.y);\n    return 0;\n}",
    "description": "This program defines a structure for a point and initializes an instance with x and y coordinates."
  },
  {
    "id": 752,
    "input": "Write a C program that defines a structure for a student with name, age, and grade, and prints the information.",
    "output": "#include <stdio.h>\n\nstruct Student {\n    char name[50];\n    int age;\n    float grade;\n};\n\nint main() {\n    struct Student s1 = {\"John\", 20, 85.5};\n    printf(\"Student Information:\\nName: %s\\nAge: %d\\nGrade: %.2f\\n\", s1.name, s1.age, s1.grade);\n    return 0;\n}",
    "description": "This program defines a structure for a student and prints the student's information."
  },
  {
    "id": 753,
    "input": "Write a C program that defines a structure for a rectangle with width and height, and calculates the area.",
    "output": "#include <stdio.h>\n\nstruct Rectangle {\n    int width;\n    int height;\n};\n\nint main() {\n    struct Rectangle r = {5, 10};\n    int area = r.width * r.height;\n    printf(\"Area of rectangle: %d\\n\", area);\n    return 0;\n}",
    "description": "This program defines a structure for a rectangle and calculates its area."
  },
  {
    "id": 754,
    "input": "Write a C program that defines a structure for a car with model, year, and price, and prints the details.",
    "output": "#include <stdio.h>\n\nstruct Car {\n    char model[50];\n    int year;\n    double price;\n};\n\nint main() {\n    struct Car car1 = {\"Toyota\", 2020, 25000.5};\n    printf(\"Car Details:\\nModel: %s\\nYear: %d\\nPrice: %.2f\\n\", car1.model, car1.year, car1.price);\n    return 0;\n}",
    "description": "This program defines a structure for a car and prints its details."
  },
  {
    "id": 755,
    "input": "Write a C program that defines a structure for a book with title, author, and price, and prints the information.",
    "output": "#include <stdio.h>\n\nstruct Book {\n    char title[100];\n    char author[50];\n    float price;\n};\n\nint main() {\n    struct Book book1 = {\"The Great Gatsby\", \"F. Scott Fitzgerald\", 10.99};\n    printf(\"Book Information:\\nTitle: %s\\nAuthor: %s\\nPrice: %.2f\\n\", book1.title, book1.author, book1.price);\n    return 0;\n}",
    "description": "This program defines a structure for a book and prints its information."
  },
  {
    "id": 756,
    "input": "Write a C program that defines a structure for a point with x, y, and z coordinates, and initializes an instance of it.",
    "output": "#include <stdio.h>\n\nstruct Point3D {\n    int x;\n    int y;\n    int z;\n};\n\nint main() {\n    struct Point3D p1 = {1, 2, 3};\n    printf(\"3D Point coordinates: (%d, %d, %d)\\n\", p1.x, p1.y, p1.z);\n    return 0;\n}",
    "description": "This program defines a structure for a 3D point and initializes an instance with x, y, and z coordinates."
  },
  {
    "id": 757,
    "input": "Write a C program that defines a structure for a book with title, author, and publication year, and prints the details.",
    "output": "#include <stdio.h>\n\nstruct Book {\n    char title[100];\n    char author[50];\n    int year;\n};\n\nint main() {\n    struct Book book1 = {\"1984\", \"George Orwell\", 1949};\n    printf(\"Book Details:\\nTitle: %s\\nAuthor: %s\\nYear: %d\\n\", book1.title, book1.author, book1.year);\n    return 0;\n}",
    "description": "This program defines a structure for a book and prints the book's details."
  },
  {
    "id": 758,
    "input": "Write a C program that defines a structure for a student with name, ID, and GPA, and prints the information.",
    "output": "#include <stdio.h>\n\nstruct Student {\n    char name[50];\n    int id;\n    float gpa;\n};\n\nint main() {\n    struct Student s1 = {\"Alice\", 12345, 3.9};\n    printf(\"Student Information:\\nName: %s\\nID: %d\\nGPA: %.2f\\n\", s1.name, s1.id, s1.gpa);\n    return 0;\n}",
    "description": "This program defines a structure for a student and prints the student's information."
  },
  {
    "id": 759,
    "input": "Write a C program that defines a structure for a movie with title, director, and release year, and prints the details.",
    "output": "#include <stdio.h>\n\nstruct Movie {\n    char title[100];\n    char director[50];\n    int year;\n};\n\nint main() {\n    struct Movie movie1 = {\"Inception\", \"Christopher Nolan\", 2010};\n    printf(\"Movie Details:\\nTitle: %s\\nDirector: %s\\nYear: %d\\n\", movie1.title, movie1.director, movie1.year);\n    return 0;\n}",
    "description": "This program defines a structure for a movie and prints the movie's details."
  },
  {
    "id": 760,
    "input": "Write a C program that defines a structure for a product with name, quantity, and price, and prints the details.",
    "output": "#include <stdio.h>\n\nstruct Product {\n    char name[50];\n    int quantity;\n    float price;\n};\n\nint main() {\n    struct Product product1 = {\"Laptop\", 10, 799.99};\n    printf(\"Product Information:\\nName: %s\\nQuantity: %d\\nPrice: %.2f\\n\", product1.name, product1.quantity, product1.price);\n    return 0;\n}",
    "description": "This program defines a structure for a product and prints the product's details."
  },
  {
    "id": 761,
    "input": "Write a C program that defines a structure for a bank account and calculates the balance after a deposit and withdrawal.",
    "output": "#include <stdio.h>\n\nstruct BankAccount {\n    int account_number;\n    char account_holder[50];\n    float balance;\n};\n\nint main() {\n    struct BankAccount account = {12345, \"John Doe\", 5000.0};\n\n    account.balance += 1000.0;  // Deposit\n    account.balance -= 500.0;   // Withdrawal\n\n    printf(\"Account Number: %d\\n\", account.account_number);\n    printf(\"Account Holder: %s\\n\", account.account_holder);\n    printf(\"Balance: %.2f\\n\", account.balance);\n\n    return 0;\n}",
    "description": "This program defines a structure for a bank account and calculates the balance after a deposit and withdrawal."
  },
  {
    "id": 762,
    "input": "Write a C program that defines a structure for a car and prints the car's information.",
    "output": "#include <stdio.h>\n\nstruct Car {\n    char make[50];\n    char model[50];\n    int year;\n    float price;\n};\n\nint main() {\n    struct Car car = {\"Ford\", \"Mustang\", 2022, 55000.0};\n\n    printf(\"Car Make: %s\\n\", car.make);\n    printf(\"Car Model: %s\\n\", car.model);\n    printf(\"Car Year: %d\\n\", car.year);\n    printf(\"Car Price: %.2f\\n\", car.price);\n\n    return 0;\n}",
    "description": "This program defines a structure for a car and prints the car's information."
  },
  {
    "id": 763,
    "input": "Write a C program that defines a structure for a time and calculates the time difference in minutes.",
    "output": "#include <stdio.h>\n\nstruct Time {\n    int hours;\n    int minutes;\n};\n\nint main() {\n    struct Time time1 = {2, 30};\n    struct Time time2 = {5, 45};\n\n    int total_minutes1 = time1.hours * 60 + time1.minutes;\n    int total_minutes2 = time2.hours * 60 + time2.minutes;\n\n    int diff = total_minutes2 - total_minutes1;\n\n    printf(\"Time difference: %d minutes\\n\", diff);\n\n    return 0;\n}",
    "description": "This program defines a structure for time and calculates the time difference in minutes."
  },
  {
    "id": 764,
    "input": "Write a C program that defines a structure for a student and calculates the grade based on a score.",
    "output": "#include <stdio.h>\n\nstruct Student {\n    char name[50];\n    int score;\n};\n\nint main() {\n    struct Student student = {\"Alice\", 85};\n\n    char grade;\n    if (student.score >= 90) grade = 'A';\n    else if (student.score >= 80) grade = 'B';\n    else if (student.score >= 70) grade = 'C';\n    else grade = 'D';\n\n    printf(\"Student: %s\\n\", student.name);\n    printf(\"Score: %d\\n\", student.score);\n    printf(\"Grade: %c\\n\", grade);\n\n    return 0;\n}",
    "description": "This program defines a structure for a student and calculates the grade based on a score."
  },
  {
    "id": 765,
    "input": "Write a C program that defines a structure for a product and calculates its total price after applying a discount.",
    "output": "#include <stdio.h>\n\nstruct Product {\n    char name[50];\n    float price;\n    float discount;\n};\n\nint main() {\n    struct Product product = {\"Laptop\", 1000.0, 15.0};\n\n    float total_price = product.price - (product.price * product.discount / 100);\n\n    printf(\"Product: %s\\n\", product.name);\n    printf(\"Price: %.2f\\n\", product.price);\n    printf(\"Discount: %.2f%%\\n\", product.discount);\n    printf(\"Total Price after Discount: %.2f\\n\", total_price);\n\n    return 0;\n}",
    "description": "This program defines a structure for a product and calculates its total price after applying a discount."
  },
  {
    "id": 766,
    "input": "Write a C program that defines a structure for a movie and prints its details.",
    "output": "#include <stdio.h>\n\nstruct Movie {\n    char title[100];\n    int year;\n    float rating;\n};\n\nint main() {\n    struct Movie movie = {\"Inception\", 2010, 8.8};\n\n    printf(\"Movie Title: %s\\n\", movie.title);\n    printf(\"Year: %d\\n\", movie.year);\n    printf(\"Rating: %.1f\\n\", movie.rating);\n\n    return 0;\n}",
    "description": "This program defines a structure for a movie and prints its details."
  },
  {
    "id": 767,
    "input": "Write a C program that defines a structure for a date and checks if the date is valid.",
    "output": "#include <stdio.h>\n\nstruct Date {\n    int day;\n    int month;\n    int year;\n};\n\nint is_valid_date(struct Date date) {\n    if (date.year < 1) return 0;\n    if (date.month < 1 || date.month > 12) return 0;\n    if (date.day < 1 || date.day > 31) return 0;\n    if ((date.month == 4 || date.month == 6 || date.month == 9 || date.month == 11) && date.day > 30) return 0;\n    if (date.month == 2) {\n        if ((date.year % 4 == 0 && date.year % 100 != 0) || (date.year % 400 == 0)) {\n            if (date.day > 29) return 0;\n        } else {\n            if (date.day > 28) return 0;\n        }\n    }\n    return 1;\n}\n\nint main() {\n    struct Date date = {29, 2, 2024};\n\n    if (is_valid_date(date))\n        printf(\"Date is valid\\n\");\n    else\n        printf(\"Date is invalid\\n\");\n\n    return 0;\n}",
    "description": "This program defines a structure for a date and checks if the date is valid."
  },
  {
    "id": 768,
    "input": "Write a C program that defines a structure for a book and stores multiple books in an array.",
    "output": "#include <stdio.h>\n\nstruct Book {\n    char title[100];\n    char author[50];\n    int year;\n};\n\nint main() {\n    struct Book books[2] = {\n        {\"The Great Gatsby\", \"F. Scott Fitzgerald\", 1925},\n        {\"1984\", \"George Orwell\", 1949}\n    };\n\n    for (int i = 0; i < 2; i++) {\n        printf(\"Title: %s\\n\", books[i].title);\n        printf(\"Author: %s\\n\", books[i].author);\n        printf(\"Year: %d\\n\", books[i].year);\n        printf(\"\\n\");\n    }\n\n    return 0;\n}",
    "description": "This program defines a structure for a book and stores multiple books in an array."
  },
  {
    "id": 769,
    "input": "Write a C program that defines a structure for a temperature and converts it from Celsius to Fahrenheit and Kelvin.",
    "output": "#include <stdio.h>\n\nstruct Temperature {\n    float celsius;\n};\n\nint main() {\n    struct Temperature temp = {25.0};\n\n    float fahrenheit = (temp.celsius * 9/5) + 32;\n    float kelvin = temp.celsius + 273.15;\n\n    printf(\"Temperature in Celsius: %.2f\\n\", temp.celsius);\n    printf(\"Temperature in Fahrenheit: %.2f\\n\", fahrenheit);\n    printf(\"Temperature in Kelvin: %.2f\\n\", kelvin);\n\n    return 0;\n}",
    "description": "This program defines a structure for a temperature and converts it from Celsius to Fahrenheit and Kelvin."
  },
  {
    "id": 770,
    "input": "Write a C program that defines a structure for a person and prints their full name and age.",
    "output": "#include <stdio.h>\n\nstruct Person {\n    char first_name[50];\n    char last_name[50];\n    int age;\n};\n\nint main() {\n    struct Person person = {\"John\", \"Doe\", 30};\n\n    printf(\"Full Name: %s %s\\n\", person.first_name, person.last_name);\n    printf(\"Age: %d\\n\", person.age);\n\n    return 0;\n}",
    "description": "This program defines a structure for a person and prints their full name and age."
  },
  {
    "id": 771,
    "input": "Write a C program that defines a structure for a point in 2D space and calculates the distance between two points.",
    "output": "#include <stdio.h>\n#include <math.h>\n\nstruct Point {\n    int x;\n    int y;\n};\n\nfloat calculate_distance(struct Point p1, struct Point p2) {\n    return sqrt(pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2));\n}\n\nint main() {\n    struct Point point1 = {3, 4};\n    struct Point point2 = {7, 1};\n\n    float distance = calculate_distance(point1, point2);\n\n    printf(\"Distance between points: %.2f\\n\", distance);\n\n    return 0;\n}",
    "description": "This program defines a structure for a point in 2D space and calculates the distance between two points."
  },
  {
    "id": 772,
    "input": "Write a C program that defines a structure for a rectangle and calculates its area and perimeter.",
    "output": "#include <stdio.h>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint calculate_area(struct Rectangle rect) {\n    return rect.length * rect.width;\n}\n\nint calculate_perimeter(struct Rectangle rect) {\n    return 2 * (rect.length + rect.width);\n}\n\nint main() {\n    struct Rectangle rect = {5, 8};\n\n    int area = calculate_area(rect);\n    int perimeter = calculate_perimeter(rect);\n\n    printf(\"Area: %d\\n\", area);\n    printf(\"Perimeter: %d\\n\", perimeter);\n\n    return 0;\n}",
    "description": "This program defines a structure for a rectangle and calculates its area and perimeter."
  },
  {
    "id": 773,
    "input": "Write a C program that defines a structure for a student and calculates their average score.",
    "output": "#include <stdio.h>\n\nstruct Student {\n    char name[50];\n    int scores[5];\n};\n\nfloat calculate_average(struct Student student) {\n    int total = 0;\n    for (int i = 0; i < 5; i++) {\n        total += student.scores[i];\n    }\n    return total / 5.0;\n}\n\nint main() {\n    struct Student student = {\"Alice\", {85, 90, 78, 92, 88}};\n\n    float average = calculate_average(student);\n\n    printf(\"Student: %s\\n\", student.name);\n    printf(\"Average Score: %.2f\\n\", average);\n\n    return 0;\n}",
    "description": "This program defines a structure for a student and calculates their average score."
  },
  {
    "id": 774,
    "input": "Write a C program that defines a structure for a temperature and converts it from Fahrenheit to Celsius.",
    "output": "#include <stdio.h>\n\nstruct Temperature {\n    float fahrenheit;\n};\n\nfloat fahrenheit_to_celsius(struct Temperature temp) {\n    return (temp.fahrenheit - 32) * 5 / 9;\n}\n\nint main() {\n    struct Temperature temp = {100.0};\n\n    float celsius = fahrenheit_to_celsius(temp);\n\n    printf(\"Temperature in Fahrenheit: %.2f\\n\", temp.fahrenheit);\n    printf(\"Temperature in Celsius: %.2f\\n\", celsius);\n\n    return 0;\n}",
    "description": "This program defines a structure for a temperature and converts it from Fahrenheit to Celsius."
  },
  {
    "id": 775,
    "input": "Write a C program that defines a structure for a date and compares two dates.",
    "output": "#include <stdio.h>\n\nstruct Date {\n    int day;\n    int month;\n    int year;\n};\n\nint compare_dates(struct Date date1, struct Date date2) {\n    if (date1.year > date2.year) return 1;\n    else if (date1.year < date2.year) return -1;\n    if (date1.month > date2.month) return 1;\n    else if (date1.month < date2.month) return -1;\n    if (date1.day > date2.day) return 1;\n    else if (date1.day < date2.day) return -1;\n    return 0;\n}\n\nint main() {\n    struct Date date1 = {15, 5, 2023};\n    struct Date date2 = {10, 7, 2024};\n\n    int result = compare_dates(date1, date2);\n    if (result == 1) printf(\"Date 1 is later than Date 2\\n\");\n    else if (result == -1) printf(\"Date 1 is earlier than Date 2\\n\");\n    else printf(\"The dates are the same\\n\");\n\n    return 0;\n}",
    "description": "This program defines a structure for a date and compares two dates."
  },
  {
    "id": 776,
    "input": "Write a C program that defines a structure for a circle and calculates its area and circumference.",
    "output": "#include <stdio.h>\n#include <math.h>\n\nstruct Circle {\n    float radius;\n};\n\nfloat calculate_area(struct Circle circle) {\n    return M_PI * circle.radius * circle.radius;\n}\n\nfloat calculate_circumference(struct Circle circle) {\n    return 2 * M_PI * circle.radius;\n}\n\nint main() {\n    struct Circle circle = {5.0};\n\n    float area = calculate_area(circle);\n    float circumference = calculate_circumference(circle);\n\n    printf(\"Area: %.2f\\n\", area);\n}",
    "description": "This program defines a structure for a circle and calculates its area and circumference."
  },
  {
    "id": 777,
    "input": "Write a C program that defines a structure for a car and calculates its fuel efficiency.",
    "output": "#include <stdio.h>\n\nstruct Car {\n    float distance_travelled;\n    float fuel_consumed;\n};\n\nfloat calculate_fuel_efficiency(struct Car car) {\n    return car.distance_travelled / car.fuel_consumed;\n}\n\nint main() {\n    struct Car car = {500.0, 40.0};\n\n    float efficiency = calculate_fuel_efficiency(car);\n\n    printf(\"Fuel Efficiency: %.2f km/l\\n\", efficiency);\n\n    return 0;\n}",
    "description": "This program defines a structure for a car and calculates its fuel efficiency."
  },
  {
    "id": 778,
    "input": "Write a C program that defines a structure for a product and applies a discount to it.",
    "output": "#include <stdio.h>\n\nstruct Product {\n    char name[50];\n    float price;\n};\n\nvoid apply_discount(struct Product *product, float discount) {\n    product->price -= product->price * discount / 100;\n}\n\nint main() {\n    struct Product product = {\"Smartphone\", 600.0};\n\n    apply_discount(&product, 10.0);\n\n    printf(\"Product: %s\\n\", product.name);\n    printf(\"Price after Discount: %.2f\\n\", product.price);\n\n    return 0;\n}",
    "description": "This program defines a structure for a product and applies a discount to it."
  },
  {
    "id": 779,
    "input": "Write a C program that defines a structure for a book and prints its title and author.",
    "output": "#include <stdio.h>\n\nstruct Book {\n    char title[100];\n    char author[50];\n};\n\nint main() {\n    struct Book book = {\"The Catcher in the Rye\", \"J.D. Salinger\"};\n\n    printf(\"Title: %s\\n\", book.title);\n    printf(\"Author: %s\\n\", book.author);\n\n    return 0;\n}",
    "description": "This program defines a structure for a book and prints its title and author."
  },
  {
    "id": 780,
    "input": "Write a C program that defines a structure for a person and prints their full name and age.",
    "output": "#include <stdio.h>\n\nstruct Person {\n    char first_name[50];\n    char last_name[50];\n    int age;\n};\n\nint main() {\n    struct Person person = {\"John\", \"Doe\", 30};\n\n    printf(\"Full Name: %s %s\\n\", person.first_name, person.last_name);\n    printf(\"Age: %d\\n\", person.age);\n\n    return 0;\n}",
    "description": "This program defines a structure for a person and prints their full name and age."
  },
  {
    "id": 781,
    "input": "Write a C program that defines a structure for a bank account and calculates the balance after a deposit.",
    "output": "#include <stdio.h>\n\nstruct BankAccount {\n    char account_holder[50];\n    float balance;\n};\n\nvoid deposit(struct BankAccount *account, float amount) {\n    account->balance += amount;\n}\n\nint main() {\n    struct BankAccount account = {\"Alice\", 1000.0};\n\n    deposit(&account, 500.0);\n\n    printf(\"Account Holder: %s\\n\", account.account_holder);\n    printf(\"Balance after deposit: %.2f\\n\", account.balance);\n\n    return 0;\n}",
    "description": "This program defines a structure for a bank account and calculates the balance after a deposit."
  },
  {
    "id": 782,
    "input": "Write a C program that defines a structure for a point in 3D space and calculates the distance between two points.",
    "output": "#include <stdio.h>\n#include <math.h>\n\nstruct Point3D {\n    int x;\n    int y;\n    int z;\n};\n\nfloat calculate_distance(struct Point3D p1, struct Point3D p2) {\n    return sqrt(pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2) + pow(p2.z - p1.z, 2));\n}\n\nint main() {\n    struct Point3D point1 = {1, 2, 3};\n    struct Point3D point2 = {4, 5, 6};\n\n    float distance = calculate_distance(point1, point2);\n\n    printf(\"Distance between points: %.2f\\n\", distance);\n\n    return 0;\n}",
    "description": "This program defines a structure for a point in 3D space and calculates the distance between two points."
  },
  {
    "id": 783,
    "input": "Write a C program that defines a structure for a student and prints their details.",
    "output": "#include <stdio.h>\n\nstruct Student {\n    char name[50];\n    int age;\n    float grade;\n};\n\nint main() {\n    struct Student student = {\"John\", 20, 88.5};\n\n    printf(\"Name: %s\\n\", student.name);\n    printf(\"Age: %d\\n\", student.age);\n    printf(\"Grade: %.2f\\n\", student.grade);\n\n    return 0;\n}",
    "description": "This program defines a structure for a student and prints their details."
  },
  {
    "id": 784,
    "input": "Write a C program that defines a structure for a car and calculates its depreciation.",
    "output": "#include <stdio.h>\n\nstruct Car {\n    char make[50];\n    int year;\n    float price;\n};\n\nfloat calculate_depreciation(struct Car car, int years) {\n    return car.price - (car.price * 0.15 * years);\n}\n\nint main() {\n    struct Car car = {\"Toyota\", 2020, 25000.0};\n\n    float depreciated_value = calculate_depreciation(car, 3);\n\n    printf(\"Car Make: %s\\n\", car.make);\n    printf(\"Depreciated Value after 3 years: %.2f\\n\", depreciated_value);\n\n    return 0;\n}",
    "description": "This program defines a structure for a car and calculates its depreciation."
  },
  {
    "id": 785,
    "input": "Write a C program that defines a structure for a date and checks if a year is a leap year.",
    "output": "#include <stdio.h>\n\nstruct Date {\n    int day;\n    int month;\n    int year;\n};\n\nint is_leap_year(struct Date date) {\n    if ((date.year % 4 == 0 && date.year % 100 != 0) || (date.year % 400 == 0)) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nint main() {\n    struct Date date = {15, 5, 2024};\n\n    if (is_leap_year(date))\n        printf(\"%d is a leap year.\\n\", date.year);\n    else\n        printf(\"%d is not a leap year.\\n\", date.year);\n\n    return 0;\n}",
    "description": "This program defines a structure for a date and checks if a year is a leap year."
  },
  {
    "id": 786,
    "input": "Write a C program that defines a structure for a product and applies tax to its price.",
    "output": "#include <stdio.h>\n\nstruct Product {\n    char name[50];\n    float price;\n};\n\nvoid apply_tax(struct Product *product, float tax_rate) {\n    product->price += product->price * tax_rate / 100;\n}\n\nint main() {\n    struct Product product = {\"Laptop\", 1000.0};\n\n    apply_tax(&product, 15.0);\n\n    printf(\"Product: %s\\n\", product.name);\n    printf(\"Price after tax: %.2f\\n\", product.price);\n\n    return 0;\n}",
    "description": "This program defines a structure for a product and applies tax to its price."
  },
  {
    "id": 787,
    "input": "Write a C program that defines a structure for a rectangle and checks if it is a square.",
    "output": "#include <stdio.h>\n\nstruct Rectangle {\n    int length;\n    int width;\n};\n\nint is_square(struct Rectangle rect) {\n    return rect.length == rect.width;\n}\n\nint main() {\n    struct Rectangle rect = {5, 5};\n\n    if (is_square(rect))\n        printf(\"The rectangle is a square.\\n\");\n    else\n        printf(\"The rectangle is not a square.\\n\");\n\n    return 0;\n}",
    "description": "This program defines a structure for a rectangle and checks if it is a square."
  },
  {
    "id": 788,
    "input": "Write a C program that defines a structure for a temperature and converts it from Celsius to Fahrenheit.",
    "output": "#include <stdio.h>\n\nstruct Temperature {\n    float celsius;\n};\n\nfloat celsius_to_fahrenheit(struct Temperature temp) {\n    return (temp.celsius * 9 / 5) + 32;\n}\n\nint main() {\n    struct Temperature temp = {37.0};\n\n    float fahrenheit = celsius_to_fahrenheit(temp);\n\n    printf(\"Temperature in Celsius: %.2f\\n\", temp.celsius);\n    printf(\"Temperature in Fahrenheit: %.2f\\n\", fahrenheit);\n\n    return 0;\n}",
    "description": "This program defines a structure for a temperature and converts it from Celsius to Fahrenheit."
  },
  {
    "id": 789,
    "input": "Write a C program that defines a structure for a book and checks if a book is available in a library.",
    "output": "#include <stdio.h>\n\nstruct Book {\n    char title[50];\n    int available_copies;\n};\n\nint is_available(struct Book book) {\n    return book.available_copies > 0;\n}\n\nint main() {\n    struct Book book = {\"The Great Gatsby\", 2};\n\n    if (is_available(book))\n        printf(\"The book '%s' is available.\\n\", book.title);\n    else\n        printf(\"The book '%s' is not available.\\n\", book.title);\n\n    return 0;\n}",
    "description": "This program defines a structure for a book and checks if a book is available in a library."
  },
  {
    "id": 790,
    "input": "Write a C program that defines a structure for a game character and calculates its total health after damage.",
    "output": "#include <stdio.h>\n\nstruct GameCharacter {\n    char name[50];\n    int health;\n};\n\nvoid take_damage(struct GameCharacter *character, int damage) {\n    character->health -= damage;\n}\n\nint main() {\n    struct GameCharacter character = {\"Warrior\", 100};\n\n    take_damage(&character, 30);\n\n    printf(\"Character: %s\\n\", character.name);\n    printf(\"Health after damage: %d\\n\", character.health);\n\n    return 0;\n}",
    "description": "This program defines a structure for a game character and calculates its total health after damage."
  },
  {
    "id": 791,
    "input": "Write a C program that uses a structure to represent a complex number and performs addition of two complex numbers.",
    "output": "#include <stdio.h>\n\nstruct Complex {\n    float real;\n    float imag;\n};\n\nstruct Complex add_complex(struct Complex c1, struct Complex c2) {\n    struct Complex result;\n    result.real = c1.real + c2.real;\n    result.imag = c1.imag + c2.imag;\n    return result;\n}\n\nint main() {\n    struct Complex c1 = {3.5, 2.5};\n    struct Complex c2 = {1.5, 4.5};\n\n    struct Complex result = add_complex(c1, c2);\n\n    printf(\"Result: %.2f + %.2fi\\n\", result.real, result.imag);\n\n    return 0;\n}",
    "description": "This program uses a structure to represent a complex number and performs addition of two complex numbers."
  },
  {
    "id": 792,
    "input": "Write a C program that uses a structure to represent a matrix and performs matrix multiplication.",
    "output": "#include <stdio.h>\n\nstruct Matrix {\n    int rows;\n    int cols;\n    int data[3][3];\n};\n\nstruct Matrix multiply_matrices(struct Matrix m1, struct Matrix m2) {\n    struct Matrix result = {3, 3};\n    for (int i = 0; i < m1.rows; i++) {\n        for (int j = 0; j < m2.cols; j++) {\n            result.data[i][j] = 0;\n            for (int k = 0; k < m1.cols; k++) {\n                result.data[i][j] += m1.data[i][k] * m2.data[k][j];\n            }\n        }\n    }\n    return result;\n}\n\nvoid print_matrix(struct Matrix m) {\n    for (int i = 0; i < m.rows; i++) {\n        for (int j = 0; j < m.cols; j++) {\n            printf(\"%d \", m.data[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    struct Matrix m1 = {3, 3, {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}};\n    struct Matrix m2 = {3, 3, {{9, 8, 7}, {6, 5, 4}, {3, 2, 1}}};\n\n    struct Matrix result = multiply_matrices(m1, m2);\n\n    printf(\"Matrix 1: \\n\");\n    print_matrix(m1);\n    printf(\"Matrix 2: \\n\");\n    print_matrix(m2);\n    printf(\"Result of multiplication: \\n\");\n    print_matrix(result);\n\n    return 0;\n}",
    "description": "This program uses a structure to represent a matrix and performs matrix multiplication."
  },
  {
    "id": 793,
    "input": "Write a C program that defines a structure for a time (hours, minutes, seconds) and performs time addition.",
    "output": "#include <stdio.h>\n\nstruct Time {\n    int hours;\n    int minutes;\n    int seconds;\n};\n\nstruct Time add_time(struct Time t1, struct Time t2) {\n    struct Time result;\n    result.seconds = t1.seconds + t2.seconds;\n    result.minutes = t1.minutes + t2.minutes + result.seconds / 60;\n    result.hours = t1.hours + t2.hours + result.minutes / 60;\n    result.minutes %= 60;\n    result.seconds %= 60;\n    return result;\n}\n\nint main() {\n    struct Time t1 = {5, 45, 30};\n    struct Time t2 = {3, 30, 45};\n\n    struct Time result = add_time(t1, t2);\n\n    printf(\"Total Time: %d:%d:%d\\n\", result.hours, result.minutes, result.seconds);\n\n    return 0;\n}",
    "description": "This program defines a structure for a time and performs time addition."
  },
  {
    "id": 794,
    "input": "Write a C program that defines a structure for a shape (circle, rectangle) and calculates the area using function pointers.",
    "output": "#include <stdio.h>\n#include <math.h>\n\nstruct Shape {\n    char type[10];\n    float (*area)(void *);\n};\n\nstruct Circle {\n    float radius;\n};\n\nstruct Rectangle {\n    float length, width;\n};\n\nfloat area_circle(void *shape) {\n    struct Circle *circle = (struct Circle *)shape;\n    return M_PI * circle->radius * circle->radius;\n}\n\nfloat area_rectangle(void *shape) {\n    struct Rectangle *rect = (struct Rectangle *)shape;\n    return rect->length * rect->width;\n}\n\nint main() {\n    struct Circle c = {5.0};\n    struct Rectangle r = {4.0, 6.0};\n\n    struct Shape shape1 = {\"Circle\", area_circle};\n    struct Shape shape2 = {\"Rectangle\", area_rectangle};\n\n    printf(\"Area of %s: %.2f\\n\", shape1.type, shape1.area(&c));\n    printf(\"Area of %s: %.2f\\n\", shape2.type, shape2.area(&r));\n\n    return 0;\n}",
    "description": "This program defines a structure for a shape and calculates the area using function pointers."
  },
  {
    "id": 795,
    "input": "Write a C program that defines a structure for a polynomial and evaluates it at a given point.",
    "output": "#include <stdio.h>\n\nstruct Polynomial {\n    int degree;\n    int coefficients[10];\n};\n\nint evaluate_polynomial(struct Polynomial poly, int x) {\n    int result = 0;\n    for (int i = 0; i <= poly.degree; i++) {\n        result += poly.coefficients[i] * pow(x, poly.degree - i);\n    }\n    return result;\n}\n\nint main() {\n    struct Polynomial poly = {2, {3, 2, 1}}; // 3x^2 + 2x + 1\n\n    int x = 2;\n    int result = evaluate_polynomial(poly, x);\n\n    printf(\"Polynomial value at x = %d: %d\\n\", x, result);\n\n    return 0;\n}",
    "description": "This program defines a structure for a polynomial and evaluates it at a given point."
  },
  {
    "id": 796,
    "input": "Write a C program that uses a structure to store a binary tree node and performs an in-order traversal.",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\nstruct TreeNode {\n    int data;\n    struct TreeNode *left, *right;\n};\n\nvoid inorder_traversal(struct TreeNode *root) {\n    if (root != NULL) {\n        inorder_traversal(root->left);\n        printf(\"%d \", root->data);\n        inorder_traversal(root->right);\n    }\n}\n\nstruct TreeNode *create_node(int data) {\n    struct TreeNode *new_node = (struct TreeNode *)malloc(sizeof(struct TreeNode));\n    new_node->data = data;\n    new_node->left = new_node->right = NULL;\n    return new_node;\n}\n\nint main() {\n    struct TreeNode *root = create_node(1);\n    root->left = create_node(2);\n    root->right = create_node(3);\n    root->left->left = create_node(4);\n    root->left->right = create_node(5);\n\n    printf(\"In-order traversal: \");\n    inorder_traversal(root);\n\n    return 0;\n}",
    "description": "This program uses a structure to store a binary tree node and performs an in-order traversal."
  },
  {
    "id": 797,
    "input": "Write a C program that defines a structure for a graph and performs a depth-first search (DFS).",
    "output": "#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_VERTICES 5\n\nstruct Graph {\n    int adj_matrix[MAX_VERTICES][MAX_VERTICES];\n    int vertices;\n};\n\nvoid dfs(struct Graph *g, int start, int visited[]) {\n    visited[start] = 1;\n    printf(\"%d \", start);\n    for (int i = 0; i < g->vertices; i++) {\n        if (g->adj_matrix[start][i] == 1 && !visited[i]) {\n            dfs(g, i, visited);\n        }\n    }\n}\n\nint main() {\n    struct Graph g = {{\n        {0, 1, 1, 0, 0},\n        {1, 0, 1, 0, 0},\n        {1, 1, 0, 1, 1},\n        {0, 0, 1, 0, 1},\n        {0, 0, 1, 1, 0}\n    }, 5};\n\n    int visited[MAX_VERTICES] = {0};\n    printf(\"DFS starting from vertex 0: \");\n    dfs(&g, 0, visited);\n\n    return 0;\n}",
    "description": "This program defines a structure for a graph and performs a depth-first search (DFS)."
  },
  {
    "id": 798,
    "input": "Write a C program that uses a structure to store student information (name, age, marks) and calculates the average marks.",
    "output": "#include <stdio.h>\n\nstruct Student {\n    char name[50];\n    int age;\n    float marks[5];\n};\n\nfloat calculate_average(struct Student s) {\n    float total = 0;\n    for (int i = 0; i < 5; i++) {\n        total += s.marks[i];\n    }\n    return total / 5;\n}\n\nint main() {\n    struct Student s = {\"John Doe\", 20, {85.0, 90.0, 78.0, 92.0, 88.0}};\n\n    float average = calculate_average(s);\n    printf(\"Average marks of %s: %.2f\\n\", s.name, average);\n\n    return 0;\n}",
    "description": "This program uses a structure to store student information and calculates the average marks."
  },
  {
    "id": 799,
    "input": "Write a C program that uses a structure to store information about a book (title, author, price) and displays the information.",
    "output": "#include <stdio.h>\n\nstruct Book {\n    char title[50];\n    char author[50];\n    float price;\n};\n\nvoid display_book_info(struct Book b) {\n    printf(\"Book Title: %s\\n\", b.title);\n    printf(\"Author: %s\\n\", b.author);\n    printf(\"Price: %.2f\\n\", b.price);\n}\n\nint main() {\n    struct Book b = {\"The C Programming Language\", \"Brian Kernighan and Dennis Ritchie\", 49.99};\n\n    display_book_info(b);\n\n    return 0;\n}",
    "description": "This program uses a structure to store information about a book and displays the information."
  },
  {
    "id": 800,
    "input": "Write a C program that defines a structure for a bank account (account number, balance) and allows deposit and withdrawal operations.",
    "output": "#include <stdio.h>\n\nstruct BankAccount {\n    int account_number;\n    float balance;\n};\n\nvoid deposit(struct BankAccount *account, float amount) {\n    account->balance += amount;\n}\n\nvoid withdraw(struct BankAccount *account, float amount) {\n    if (account->balance >= amount) {\n        account->balance -= amount;\n    } else {\n        printf(\"Insufficient balance\\n\");\n    }\n}\n\nint main() {\n    struct BankAccount account = {1001, 5000.0};\n\n    printf(\"Initial balance: %.2f\\n\", account.balance);\n\n    deposit(&account, 2000.0);\n    printf(\"After deposit: %.2f\\n\", account.balance);\n\n    withdraw(&account, 1000.0);\n    printf(\"After withdrawal: %.2f\\n\", account.balance);\n\n    return 0;\n}",
    "description": "This program defines a structure for a bank account and allows deposit and withdrawal operations."
  }
]